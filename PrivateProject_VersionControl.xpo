Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlMorphXItemTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlMorphXItemTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlMorphXItemTable
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      MaxAccessMode       #NoAccess
      Visible             #No
      CacheLookup         #FoundAndEmpty
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Main
      PrimaryIndex        #ItemPathIdx
      ClusterIndex        #ItemPathIdx
      DeveloperDocumentation  #@SYS123444
      Origin              #{2C2009ED-0000-1000-A805-EAF069E6E903}
      LegacyId            #2541
    ENDPROPERTIES
    
    FIELDS
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Mandatory           #Yes
          Table               #SysVersionControlMorphXItemTable
          Origin              #{5A8D625F-D1AB-41E7-AD18-56234D577C1D}
          LegacyId            #5
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ItemPathIdx
      PROPERTIES
        Name                #ItemPathIdx
        AllowDuplicates     #No
        Origin              #{2B0B0001-09ED-1000-FC26-5FD162617468}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemPath
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
      #SysVersionControlMorphXRevisionTable
      PROPERTIES
        Table               #SysVersionControlMorphXRevisionTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #actionTextForCheckedOutItem
        #/// <summary>
        #///    Retrieves the action being performed on this item.
        #/// </summary>
        #/// <returns>
        #///    The action being performed on this item.
        #/// </returns>
        #/// <remarks>
        #///    An empty string is returned if the item is not checked out.
        #/// </remarks>
        #public SysVersionControlActionText actionTextForCheckedOutItem()
        #{
        #    return SysVersionControlMorphXLockTable::find(this.ItemPath).Action;
        #}
      ENDSOURCE
      SOURCE #checkedOutTo
        #/// <summary>
        #///    Retrieves the ID of the user who has checked out this item.
        #/// </summary>
        #/// <returns>
        #///    The ID of the user who the item is checked out to.
        #/// </returns>
        #/// <remarks>
        #///    If the item is checked out by several users, only the ID of one of the users is returned. If the
        #///    item is not checked out by anyone, an empty string is returned.
        #/// </remarks>
        #public userId checkedOutTo()
        #{
        #    return SysVersionControlMorphXLockTable::checkedOutTo(this.ItemPath);
        #}
      ENDSOURCE
      SOURCE #checkIn
        #/// <summary>
        #///    Checks in the current item.
        #/// </summary>
        #/// <param name="_comment">
        #///    The comment to use for the check-in.
        #/// </param>
        #/// <param name="_filename">
        #///    The name of the file that contains the revision data; optional.
        #/// </param>
        #/// <remarks>
        #///    The item is also unlocked.
        #/// </remarks>
        #public void checkIn(SysVersionControlItemComment _comment, Filename _filename = '')
        #{
        #    #SysVersionControl
        #    SysVersionControlActionText actionText;
        #
        #    ttsbegin;
        #
        #    //
        #    // Create the revision
        #    //
        #    actionText = this.actionTextForCheckedOutItem();
        #    SysVersionControlMorphXRevisionTable::create(this.ItemPath, actionText, _comment, _filename);
        #
        #    //
        #    // Remove the lock
        #    //
        #    SysVersionControlMorphXLockTable::remove(this.ItemPath);
        #
        #    ttscommit;
        #
        #    info(strfmt("@SYS119106", this.ItemPath));
        #}
      ENDSOURCE
      SOURCE #checkOut
        #/// <summary>
        #///    Checks out the item.
        #/// </summary>
        #/// <param name="_action">
        #///    The action being performed on the item; optional.
        #/// </param>
        ##SysVersionControl
        #public void checkOut(SysVersionControlActionText _action = #MorphXActionEdit)
        #{
        #    SysVersionControlMorphXLockTable::create(this.ItemPath, _action);
        #    info(strfmt("@SYS119107", this.ItemPath));
        #}
      ENDSOURCE
      SOURCE #checkOutForDelete
        #/// <summary>
        #/// Opens the item for deletion.
        #/// </summary>
        #public void checkOutForDelete()
        #{
        ##SysVersionControl
        #
        #    SysVersionControlMorphXLockTable::create(this.ItemPath, #MorphXActionDelete);
        #    info(strfmt("@SYS119117", this.ItemPath));
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #/// <summary>
        #///    Retrieves a list of all revisions of the item.
        #/// </summary>
        #/// <returns>
        #///    A temporary table that contains a record describing each revision.
        #/// </returns>
        #public SysVersionControlTmpItem getItemHistory()
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #    SysVersionControlTmpItem item;
        #
        #    //
        #    // Enumerate the revisions
        #    //
        #    while select ItemPath, Version, Action, Comment, CreatedBy, CreatedDateTime from revision // Use field list to avoid fetching the revision data blob.
        #        where revision.ItemPath == this.ItemPath
        #    {
        #        item.clear();
        #        item.data(revision.createItem());
        #        item.ChangeNumber = revision.RecId;
        #        item.insert();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #rename
        #/// <summary>
        #///    Opens the item for rename.
        #/// </summary>
        #/// <param name="_newPath">
        #///    The new path of the item.
        #/// </param>
        #/// <remarks>
        #///    The history link is broken after the check-in of a rename.
        #/// </remarks>
        #public void rename(SysVersionControlItemPath _newPath)
        #{
        #    SysVersionControlMorphXRevisionTable revisionOld, revisionNew;
        #
        #    ttsbegin;
        #    SysVersionControlMorphXItemTable::addToVersionControl(_newPath);
        #    this.checkOutForDelete();
        #
        #    //
        #    // Copy revision history to new item path
        #    //
        #    insert_recordset revisionNew (ItemPath, Version, Comment, Action, RevisionData)
        #        select _newPath, Version, Comment, Action, RevisionData from revisionOld
        #        where revisionOld.ItemPath == this.ItemPath;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #undoCheckOut
        #/// <summary>
        #///    Undoes the check-out of the item.
        #/// </summary>
        #public void undoCheckOut()
        #{
        #
        #    ttsbegin;
        #    SysVersionControlMorphXLockTable::remove(this.ItemPath);
        #    ttscommit;
        #    info(strfmt("@SYS119108", this.ItemPath));
        #}
      ENDSOURCE
      SOURCE #writeItemVersionToFile
        #/// <summary>
        #///    Writes a version of the current item to a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of file.
        #/// </param>
        #/// <param name="_version">
        #///    The version requested.
        #/// </param>
        #/// <remarks>
        #///    If the <paramref name="_version" /> parameter is 0, the most recent version is written to the file.
        #/// </remarks>
        #/// <exception cref="M:Exception::Error">
        #///    If the requested version does not exist, an error is thrown.
        #/// </exception>
        #public void writeItemVersionToFile(Filename _filename, SysVersionControlItemVersion _version)
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    if (_version == 0) //latest version requested
        #    {
        #        _version = SysVersionControlMorphXRevisionTable::latestVersionNumber(this.ItemPath);
        #    }
        #
        #    revision = SysVersionControlMorphXRevisionTable::find(this.ItemPath, _version);
        #
        #    if (revision)
        #    {
        #        revision.writeToFile(_filename);
        #    }
        #    else
        #    {
        #        throw error(strfmt("@SYS119109", _version, this.ItemPath));
        #    }
        #}
      ENDSOURCE
      SOURCE #addToVersionControl
        #/// <summary>
        #/// Adds an item to the version control system.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// The path of the item to add.
        #/// </param>
        #public static void addToVersionControl(SysVersionControlItemPath _itemPath)
        #{
        ##SysVersionControl
        #
        #    ttsbegin;
        #    SysVersionControlMorphXItemTable::create(_itemPath);
        #    SysVersionControlMorphXLockTable::create(_itemPath, #MorphXActionAdd);
        #    ttscommit;
        #    info(strfmt("@SYS119110", _itemPath));
        #}
      ENDSOURCE
      SOURCE #create
        #/// <summary>
        #/// Creates an item record.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// The path of the item.
        #/// </param>
        #/// <returns>
        #/// The created record.
        #/// </returns>
        #static private SysVersionControlMorphXItemTable create(SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlMorphXItemTable item;
        #
        #    ttsbegin;
        #    item.ItemPath = _itemPath;
        #    item.insert();
        #    ttscommit;
        #
        #    flush SysVersionControlMorphXItemTable;
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #exists
        #public static boolean exists(SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlMorphXItemTable item;
        #
        #    select firstonly RecId from item
        #        where item.ItemPath == _itemPath;
        #
        #    return item.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #public static SysVersionControlMorphXItemTable find(SysVersionControlItemPath _itemPath, boolean _forupdate = false)
        #{
        #    SysVersionControlMorphXItemTable item;
        #
        #    if (_forupdate)
        #    {
        #        item.selectForUpdate(true);
        #    }
        #
        #    select firstonly item
        #        where item.ItemPath == _itemPath;
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #removeFromVersionControl
        #/// <summary>
        #///    Removes an item from the version control system.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item to remove from the version control system.
        #/// </param>
        #/// <remarks>
        #///    This is the opposite of calling the <c>addToVersionControl</c> method.
        #/// </remarks>
        #public static void removeFromVersionControl(SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlMorphXItemTable item;
        #
        #    ttsbegin;
        #
        #    delete_from item
        #        where item.ItemPath == _itemPath;
        #
        #    flush SysVersionControlMorphXItemTable;
        #
        #    ttscommit;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlMorphXLockTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlMorphXLockTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlMorphXLockTable
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      MaxAccessMode       #NoAccess
      Visible             #No
      CacheLookup         #FoundAndEmpty
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Main
      PrimaryIndex        #ItemPathIdx
      ClusterIndex        #ItemPathIdx
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #@SYS123445
      Origin              #{2C2009EE-0000-1000-210C-65A269E6E954}
      LegacyId            #2542
    ENDPROPERTIES
    
    FIELDS
      FIELD #Action
        STRING
        PROPERTIES
          Name                #Action
          Visible             #No
          Table               #SysVersionControlMorphXLockTable
          Origin              #{A31093BB-3AC5-44C4-9BC9-4DC858423EF1}
          LegacyId            #8
          ExtendedDataType    #SysVersionControlActionText
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Mandatory           #Yes
          Visible             #No
          Table               #SysVersionControlMorphXLockTable
          Origin              #{960EA124-6358-43BB-916D-5FE1FC3B2E56}
          LegacyId            #7
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #Version
        INT
        PROPERTIES
          Name                #Version
          Table               #SysVersionControlMorphXLockTable
          Origin              #{BDA3B620-4555-4176-BF73-862B8860818A}
          LegacyId            #9
          ExtendedDataType    #SysVersionControlItemVersion
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Action
          #createdBy
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ItemPathIdx
      PROPERTIES
        Name                #ItemPathIdx
        AllowDuplicates     #No
        Origin              #{2B0B0001-09EE-1000-FC26-5FD162617468}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemPath
        #createdBy
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #SysVersionControlMorphXItemTable
        PROPERTIES
          Name                #SysVersionControlMorphXItemTable
          Table               #SysVersionControlMorphXItemTable
          EntityRelationshipRole  #@SYS123446
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Composition
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemPath
            RelatedField        #ItemPath
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #createItem
        #/// <summary>
        #/// Creates a <c>SysVersionControlTmpItem</c> record from this lock record.
        #/// </summary>
        #/// <returns>
        #/// The created <c>SysVersionControlTmpItem</c> record.
        #/// </returns>
        #private SysVersionControlTmpItem createItem()
        #{
        #    #file
        #    SysVersionControlTmpItem item;
        #    SysVersionControlItemPath itemPath;
        #    SysVersionControllable controllable;
        #
        #    itemPath = SysVersionControlMorphXLockTable::internalFilenameToItemPath(this.ItemPath);
        #
        #    if (strContains(this.ItemPath, '\\labels\\'))
        #    {
        #        item.InternalFilename = this.ItemPath+#ald;
        #    }
        #    else
        #    {
        #        controllable = SysTreeNodeVirtualDeleted::newTreeNodePath(itemPath);
        #        Debug::assert(controllable != null);
        #
        #        item.InternalFilename = this.ItemPath+controllable.fileExtension();
        #    }
        #
        #    item.InternalFilename = strReplace(item.InternalFilename, '\\', '/');
        #
        #    item.ItemPath = itemPath;
        #    if (hasGUI())
        #    {
        #        item.ImageRes = new ImageListAppl_Aot().image(SysVersionControlSystem::path2Image(item.ItemPath));
        #    }
        #    item.ActionText = this.Action;
        #    item.Version = this.Version;
        #    item.User = this.CreatedBy;
        #    item.vcsDate = DateTimeUtil::date(this.CreatedDateTime);
        #    item.vcsTime = DateTimeUtil::time(this.CreatedDateTime);
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #checkedOutTo
        #/// <summary>
        #///    Returns the ID of the user who has checked out an item.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item.
        #/// </param>
        #/// <returns>
        #///    The ID of the user the item is checked out to.
        #/// </returns>
        #/// <remarks>
        #///    If the item is checked out by several users, only the ID of one of the users is returned. If the
        #///    item is not checked out by anyone, an empty string is returned.
        #/// </remarks>
        #static public userId checkedOutTo(SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlMorphXLockTable lock;
        #
        #    //
        #    // Always read non-cached data,
        #    // as this method also is used to determine if check-out is allowed.
        #    //
        #    lock.disableCache(true);
        #
        #    select firstonly lock
        #        where lock.ItemPath == _itemPath;
        #
        #    if (lock)
        #    {
        #        return lock.CreatedBy;
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #create
        #/// <summary>
        #///    Creates a lock record to indicate that an item is locked for editing.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item for this record to lock.
        #/// </param>
        #/// <param name="_action">
        #///    The action performed on the item in this lock.
        #/// </param>
        #/// <returns>
        #///    The new record.
        #/// </returns>
        #static public SysVersionControlMorphXLockTable create(SysVersionControlItemPath _itemPath, SysVersionControlActionText _action)
        #{
        #    SysVersionControlMorphXLockTable lock;
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    ttsbegin;
        #    lock.ItemPath = _itemPath;
        #    lock.Action = _action;
        #
        #    //
        #    // The version locked is always the latest version.
        #    //
        #    select maxof(Version) from revision
        #            where revision.ItemPath == _itemPath;
        #
        #    lock.Version = revision.Version;
        #    lock.insert();
        #    ttscommit;
        #
        #    flush SysVersionControlMorphXLockTable;
        #    return lock;
        #}
      ENDSOURCE
      SOURCE #exists
        #static public boolean exists(SysVersionControlItemPath _itemPath, userId _userId = curuserid())
        #{
        #    SysVersionControlMorphXLockTable lock;
        #
        #    select firstonly RecId from lock
        #        where lock.ItemPath == _itemPath &&
        #              lock.CreatedBy == _userId;
        #
        #    return lock.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existsForAnyUser
        #/// <summary>
        #///    Returns a Boolean value that indicates if any user holds a lock for an item.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item.
        #/// </param>
        #/// <returns>
        #///    true if any user holds a lock on this record; otherwise, false.
        #/// </returns>
        #static public boolean existsForAnyUser(SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlMorphXLockTable lock;
        #
        #    select firstonly RecId from lock
        #        where lock.ItemPath == _itemPath;
        #
        #    return lock.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #static public SysVersionControlMorphXLockTable find(
        #    SysVersionControlItemPath _itemPath,
        #    userId _userId = curuserid(),
        #    boolean _forupdate = false)
        #{
        #    SysVersionControlMorphXLockTable lock;
        #
        #    if (_forupdate)
        #    {
        #        lock.selectForUpdate(true);
        #    }
        #
        #    select firstonly lock
        #        where lock.ItemPath == _itemPath &&
        #              lock.CreatedBy == _userId;
        #
        #    return lock;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #/// <summary>
        #///    Gets the pending items for a user.
        #/// </summary>
        #/// <param name="_userId">
        #///    The ID of the user; optional.
        #/// </param>
        #/// <returns>
        #///    The pending items.
        #/// </returns>
        #/// <remarks>
        #///    A table that contains one record for each pending item.
        #/// </remarks>
        #public static server SysVersionControlTmpItem getCheckedOutItems(userId _userId = curuserid())
        #{
        #    SysVersionControlMorphXLockTable lock;
        #    SysVersionControlTmpItem item;
        #
        #    while select lock
        #        where lock.CreatedBy == _userId
        #    {
        #        item.clear();
        #        item.data(lock.createItem());
        #        item.insert();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #internalFilenameToItemPath
        #/// <summary>
        #/// Converts the internal file name of an item to the path of the item.
        #/// </summary>
        #/// <param name="_internalFilename">
        #/// The internal file name.
        #/// </param>
        #/// <returns>
        #/// The path of the item.
        #/// </returns>
        #/// <remarks>
        #/// The internal file name contains layer information; whereas the path is the AOT path for tree nodes.
        #/// </remarks>
        #static public SysVersionControlItemPath internalFilenameToItemPath(Filename _internalFilename)
        #{
        #    UtilEntryLevel layer;
        #    str vcsPath;
        #    #AOT
        #
        #    //
        #    // Is it placed in a layer folder?
        #    //
        #    for (layer=UtilEntryLevel::sys; layer<enumcnt(UtilEntryLevel); layer++)
        #    {
        #        if (strStartsWith(_internalFilename, strfmt('\\%1\\', layer)))
        #        {
        #            vcsPath = substr(_internalFilename, strlen(strfmt('\\%1\\', layer)), maxint());
        #            if (strscan(vcsPath, #VSProjectsPath, 1, strlen(vcsPath)))
        #            {
        #                return SysTreeNodeVSItem::vcsPath2TreeNodePath(vcsPath);
        #            }
        #
        #            //If so, return the treenode path
        #            return vcsPath;
        #        }
        #    }
        #
        #    return _internalFilename;
        #}
      ENDSOURCE
      SOURCE #remove
        #/// <summary>
        #///    Removes a record lock on an item for a user.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item.
        #/// </param>
        #/// <param name="_userId">
        #///    The ID of the user; optional.
        #/// </param>
        #static public void remove(SysVersionControlItemPath _itemPath, userId _userId = curuserid())
        #{
        #    SysVersionControlMorphXLockTable lock;
        #
        #    delete_from lock
        #        where lock.ItemPath == _itemPath &&
        #              lock.CreatedBy == _userId;
        #
        #    flush SysVersionControlMorphXLockTable;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlMorphXRevisionTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlMorphXRevisionTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlMorphXRevisionTable
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      MaxAccessMode       #NoAccess
      Visible             #No
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Transaction
      PrimaryIndex        #ItemPathVersionIdx
      ClusterIndex        #ItemPathVersionIdx
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #@SYS123447
      Origin              #{2C2409EF-0000-1000-4EAD-7FD17B921D7C}
      LegacyId            #2543
    ENDPROPERTIES
    
    FIELDS
      FIELD #Action
        STRING
        PROPERTIES
          Name                #Action
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{6EBFE732-8AAF-4F08-83A7-5C79E13672EA}
          LegacyId            #6
          ExtendedDataType    #SysVersionControlActionText
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #Comment
        STRING
        PROPERTIES
          Name                #Comment
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{796F1BB7-C4E9-43A2-BADD-F0B57330B3AE}
          LegacyId            #5
          ExtendedDataType    #SysVersionControlItemComment
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Mandatory           #Yes
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{9FC44834-3131-4A17-8306-669026845C5C}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #RevisionData
        QUEUE
        PROPERTIES
          Name                #RevisionData
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{A8706604-D358-43FF-855F-3FABE483E120}
          LegacyId            #7
          ExtendedDataType    #Blobdata
        ENDPROPERTIES
        
      FIELD #Version
        INT
        PROPERTIES
          Name                #Version
          Mandatory           #Yes
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{B999F33A-19BE-4150-9629-358C7220D7D2}
          LegacyId            #4
          ExtendedDataType    #SysVersionControlItemVersion
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Version
          #Comment
          #Action
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ItemPathVersionIdx
      PROPERTIES
        Name                #ItemPathVersionIdx
        AllowDuplicates     #No
        Origin              #{2B120001-09EF-1000-E72C-4A1A063213FA}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemPath
        #Version
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #SysVersionControlMorphXItemTable
        PROPERTIES
          Name                #SysVersionControlMorphXItemTable
          Table               #SysVersionControlMorphXItemTable
          EntityRelationshipRole  #@SYS123446
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Composition
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemPath
            RelatedField        #ItemPath
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #createItem
        #/// <summary>
        #///    Creates a <c>SysVersionControlTmpItem</c> record from this revision.
        #/// </summary>
        #/// <returns>
        #///    The new <c>SysVersionControlTmpItem</c> record.
        #/// </returns>
        #public SysVersionControlTmpItem createItem()
        #{
        #    #file
        #    SysVersionControlTmpItem item;
        #    SysVersionControlItemPath itemPath;
        #    SysVersionControllable controllable;
        #
        #    itemPath = SysVersionControlMorphXLockTable::internalFilenameToItemPath(this.ItemPath);
        #
        #    controllable = SysTreeNodeVirtualDeleted::newTreeNodePath(itemPath);
        #
        #    Debug::assert(controllable != null);
        #
        #    item.InternalFilename = strReplace(this.ItemPath+controllable.fileExtension(), '\\', '/');
        #    item.Version = this.Version;
        #    item.ItemPath = itemPath;
        #    if (hasGUI())
        #    {
        #        item.ImageRes = new ImageListAppl_Aot().image(SysVersionControlSystem::path2Image(item.ItemPath));
        #    }
        #    item.ActionText = this.Action;
        #    item.Comment = this.Comment;
        #    item.User = this.CreatedBy;
        #    item.vcsDate = DateTimeUtil::date(this.CreatedDateTime);
        #    item.vcsTime = DateTimeUtil::time(this.CreatedDateTime);
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #writeToFile
        #/// <summary>
        #///    Writes the revision data to a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file to write the data to.
        #/// </param>
        #/// <remarks>
        #///    The file is created on the client tier.
        #///    If a file already exists with the given file name, it is
        #///    overwritten.
        #/// </remarks>
        #public void writeToFile(Filename _filename)
        #{
        #    if (this.RevisionData)
        #    {
        #        SysVersionControlMorphXRevisionTable::writeToFileClient(_filename, this.RevisionData);
        #    }
        #    else
        #    {
        #        throw error("@SYS136800");
        #    }
        #}
      ENDSOURCE
      SOURCE #create
        #/// <summary>
        #///    Creates a revision record.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item for this revision.
        #/// </param>
        #/// <param name="_action">
        #///    The action performed on the item in this revision.
        #/// </param>
        #/// <param name="_comment">
        #///    The description of this revision.
        #/// </param>
        #/// <param name="_filename">
        #///    The file name with the revision data; optional.
        #/// </param>
        #/// <returns>
        #///    The new record.
        #/// </returns>
        #public server static SysVersionControlMorphXRevisionTable create(
        #    SysVersionControlItemPath _itemPath,
        #    SysVersionControlActionText _action,
        #    SysVersionControlItemComment _comment,
        #    Filename _filename = '')
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    //
        #    // Set descriptors
        #    //
        #    ttsbegin;
        #    revision.clear();
        #    revision.ItemPath = _itemPath;
        #    revision.Action = _action;
        #    revision.Comment = _comment;
        #
        #    //
        #    // Load file and clean up
        #    //
        #    if (_filename)
        #    {
        #        revision.RevisionData = SysVersionControlMorphXRevisionTable::readFromFile(_filename);
        #    }
        #    //
        #    // Set version number
        #    //
        #
        #    revision.Version = SysVersionControlMorphXRevisionTable::latestVersionNumber(_itemPath) + 1;
        #    revision.insert();
        #    ttscommit;
        #
        #    return revision;
        #}
      ENDSOURCE
      SOURCE #find
        #public static SysVersionControlMorphXRevisionTable find(
        #    SysVersionControlItemPath _itemPath,
        #    SysVersionControlItemVersion _version,
        #    boolean _forupdate = false)
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    if (_forupdate)
        #    {
        #        revision.selectForUpdate(true);
        #    }
        #
        #    select firstonly revision
        #        where revision.ItemPath == _itemPath &&
        #              revision.Version == _version;
        #
        #    return revision;
        #}
      ENDSOURCE
      SOURCE #getContainerHistory
        #/// <summary>
        #/// Gets the history records for the container node.
        #/// </summary>
        #/// <param name="_container">
        #/// The instance of the container node.
        #/// </param>
        #/// <param name="_vcsItemPath">
        #/// The path to the container node in the version control system.
        #/// </param>
        #/// <param name="_internalFileName">
        #/// The internal file name of the container
        #/// </param>
        #/// <returns>
        #/// The history records for the container node.
        #/// </returns>
        #public static SysVersionControlTmpItem getContainerHistory(SysTreeNodeContainer _container, SysVersionControlItemPath _vcsItemPath, Filename _internalFileName)
        #{
        #    int history;
        #    SysVersionControlMorphXRevisionTable revision;
        #    SysVersionControlMorphXRevisionTable revisionComment;
        #    SysVersionControlTmpItem item;
        #    SysVersionControllable controllable;
        #    str containerPath;
        #    SysVersionControlItemPath searchPattern;
        #
        #    controllable = _container as SysVersionControllable;
        #    Debug::assert(controllable != null);
        #
        #    containerPath = controllable.versionControlItemPath();
        #
        #    // The search pattern will look for all items under the container path
        #    searchPattern =  strReplace(_vcsItemPath, @"\", @"\\") + @"\\*";
        #
        #    while select CreatedDateTime, CreatedBy from revision
        #        group by CreatedDateTime, CreatedBy
        #        where revision.ItemPath like searchPattern
        #    {
        #        // Because in X++ we cannot group by comment we need to query for it separately.
        #        select firstonly comment from revisionComment
        #            where revisionComment.CreatedDateTime == revision.CreatedDateTime;
        #
        #        history++;
        #
        #        item.clear();
        #        item.InternalFilename = _internalFileName;
        #        item.Version = history;
        #        item.ItemPath = containerPath;
        #        if (hasGUI())
        #        {
        #            item.ImageRes = new ImageListAppl_Aot().image(SysVersionControlSystem::path2Image(controllable.versionControlItemPath()));
        #        }
        #
        #        item.ActionText = "";
        #        item.Comment = revisionComment.Comment;
        #        item.User = revision.CreatedBy;
        #        item.vcsDate = DateTimeUtil::date(revision.CreatedDateTime);
        #        item.vcsTime = DateTimeUtil::time(revision.CreatedDateTime);
        #        item.insert();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #latestVersionNumber
        #/// <summary>
        #/// Returns the version number of the latest revision.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// The path of the item requested.
        #/// </param>
        #/// <returns>
        #/// The version number.
        #/// </returns>
        #static server public SysVersionControlItemVersion latestVersionNumber(SysVersionControlItemPath _itemPath)
        #{
        #    return (select maxof(Version) from sysVersionControlMorphXRevisionTable
        #            where sysVersionControlMorphXRevisionTable.ItemPath == _itemPath).Version;
        #}
      ENDSOURCE
      SOURCE #readFromFile
        #/// <summary>
        #///    Reads the revision data from a file on the client tier.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file to read.
        #/// </param>
        #/// <returns>
        #///    The revision data from the file.
        #/// </returns>
        #private static client container readFromFile(Filename _filename)
        #{
        #    BinData binData = new BinData();
        #;
        #    binData.loadFile(_filename);
        #    WinAPI::deleteFile(_filename);
        #    return binData.getData();
        #}
      ENDSOURCE
      SOURCE #writeToFileClient
        #/// <summary>
        #///    Writes the revision data to a file on the client tier.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file to which to write.
        #/// </param>
        #/// <param name="_revisionData">
        #///    The revision data to write to the file.
        #/// </param>
        #private static client void writeToFileClient(Filename _filename, container _revisionData)
        #{
        #    BinData binData = new BinData();
        #;
        #    binData.setData(_revisionData);
        #    binData.saveFile(_filename);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlParameters unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlParameters
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlParameters
      Label               #@SYS85914
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      MaxAccessMode       #Edit
      CacheLookup         #Found
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Parameter
      PrimaryIndex        #Key
      ClusterIndex        #Key
      ModifiedDateTime    #Yes
      DEL_modifiedTime    #Yes
      ModifiedBy          #Yes
      ModifiedTransactionId #Yes
      DeveloperDocumentation  #@SYS123440
      Origin              #{2C1B07BD-0000-1000-136B-81DEC3EE9E54}
      LegacyId            #1981
    ENDPROPERTIES
    
    FIELDS
      FIELD #AppRoot
        STRING
        PROPERTIES
          Name                #AppRoot
          Table               #SysVersionControlParameters
          Origin              #{372075C2-1491-4F0B-BF42-D126534DC81F}
          LegacyId            #14
          ExtendedDataType    #SysVersionControlAppRoot
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #Key
        INT
        PROPERTIES
          Name                #Key
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SysVersionControlParameters
          Origin              #{5A5C9A55-2238-4A72-ADDB-889AF4BE12AF}
          LegacyId            #1
          ExtendedDataType    #ParametersKey
        ENDPROPERTIES
        
      FIELD #RepositoryFolder
        STRING
        PROPERTIES
          Name                #RepositoryFolder
          Table               #SysVersionControlParameters
          Origin              #{F75A44FB-EFB7-4581-A21A-DEE9F6731C51}
          LegacyId            #3
          ExtendedDataType    #SysVersionControlRepositoryFolder
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #TfsBranch
        STRING
        PROPERTIES
          Name                #TfsBranch
          Table               #SysVersionControlParameters
          Origin              #{18E4BFF1-ADF0-48B5-A72F-718351B42D89}
          LegacyId            #13
          ExtendedDataType    #SysVersionControlTfsBranch
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #TfsProject
        STRING
        PROPERTIES
          Name                #TfsProject
          Label               #@SYS118668
          Table               #SysVersionControlParameters
          Origin              #{8B414758-EBC2-4396-9129-11BBB587FE3A}
          LegacyId            #12
          ExtendedDataType    #SysVersionControlTfsProject
          StringSize          #65
        ENDPROPERTIES
        
      FIELD #TfsServer
        STRING
        PROPERTIES
          Name                #TfsServer
          Label               #@SYS118666
          Table               #SysVersionControlParameters
          Origin              #{C908CBEB-516E-4A34-AB07-EAB4BD8AF5C5}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlTfsServer
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #UIFlags
        INT
        PROPERTIES
          Name                #UIFlags
          Table               #SysVersionControlParameters
          Origin              #{9035DAC0-B840-40AF-816B-19A864362F8B}
          LegacyId            #9
          ExtendedDataType    #SysVersionControlUISettings
        ENDPROPERTIES
        
      FIELD #VCSEnabled
        ENUM
        PROPERTIES
          Name                #VCSEnabled
          Label               #@SYS94367
          HelpText            #@SYS94418
          Table               #SysVersionControlParameters
          Origin              #{9FC8E85B-57ED-4EFF-9051-5572C32A11D7}
          LegacyId            #4
          EnumType            #EnableDisable
        ENDPROPERTIES
        
      FIELD #VCSType
        ENUM
        PROPERTIES
          Name                #VCSType
          Table               #SysVersionControlParameters
          Origin              #{D419D147-FDD0-4986-9EC2-CF2B3776699C}
          LegacyId            #5
          EnumType            #SysVersionControlType
        ENDPROPERTIES
        
      FIELD #VSSIniFile
        STRING
        PROPERTIES
          Name                #VSSIniFile
          Label               #@SYS94757
          HelpText            #@SYS94758
          Table               #SysVersionControlParameters
          Origin              #{968CD623-9D3E-4156-B8BE-743873733F6C}
          LegacyId            #10
          ExtendedDataType    #FilenameOpen
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #VSSProjectRoot
        STRING
        PROPERTIES
          Name                #VSSProjectRoot
          Label               #@SYS94759
          HelpText            #@SYS98662
          Table               #SysVersionControlParameters
          Origin              #{8DD13460-7FFD-483B-9418-4F7293B056D5}
          LegacyId            #11
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #VCSEnabled
          #VCSType
          #RepositoryFolder
          #UIFlags
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DevSettings
        PROPERTIES
          Name                #DevSettings
          Label               #@SYS94379
        ENDPROPERTIES
        
        GROUPFIELDS
          #VCSEnabled
          #VCSType
          #RepositoryFolder
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Setup
        PROPERTIES
          Name                #Setup
          Label               #@SYS2186
        ENDPROPERTIES
        
        GROUPFIELDS
          #VCSEnabled
          #RepositoryFolder
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Tfs
        PROPERTIES
          Name                #Tfs
          Label               #@SYS117837
        ENDPROPERTIES
        
        GROUPFIELDS
          #TfsServer
          #TfsProject
          #TfsBranch
          #AppRoot
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #UIFlags
        PROPERTIES
          Name                #UIFlags
          Label               #@SYS94421
        ENDPROPERTIES
        
        GROUPFIELDS
          #UIFlags
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VSS
        PROPERTIES
          Name                #VSS
          Label               #@SYS94760
        ENDPROPERTIES
        
        GROUPFIELDS
          #VSSProjectRoot
          #VSSIniFile
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #Key
      PROPERTIES
        Name                #Key
        AllowDuplicates     #No
        Origin              #{2B030001-07BD-1000-4B65-790000000000}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #Key
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #getRepositoryFolder
        #private str getRepositoryFolder(str repositoryRoot, str appRoot)
        #{
        #    #File
        #    str pathSection1 = this.serverPathToLocalPath(repositoryRoot);
        #    str pathSection2 = this.serverPathToLocalPath(appRoot);
        #    str result;
        #
        #    result = pathSection1 + #FilePathDelimiter + pathSection2;
        #    return result;
        #}
      ENDSOURCE
      SOURCE #getTargetRepositoryFolder
        #public FilePath getTargetRepositoryFolder()
        #{
        #
        #    str result = this.RepositoryFolder;
        #
        #    if (this.VCSType == SysVersionControlType::SysVersionControlTfs && this.AppRoot)
        #    {
        #        result = this.getRepositoryFolder(this.RepositoryFolder, this.AppRoot);
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #serverPathToLocalPath
        #private str serverPathToLocalPath(str path)
        #{
        #    #File
        #    #define.serverPathDelimiter('/')
        #    str result = path;
        #
        #    result = strReplace(result, #ServerPathDelimiter, #FilePathDelimiter);
        #
        #    if (strEndsWith(result, #FilePathDelimiter))
        #    {
        #        result = strDel(result, strLen(result), 1);
        #    }
        #
        #    if (strStartsWith(result, #FilePathDelimiter))
        #    {
        #        result = strDel(result, 1, 1);
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite()
        #{
        #    boolean ret;
        #
        #    ret = super();
        #
        #    if (ret && this.RepositoryFolder && strEndsWith(this.RepositoryFolder, @'\'))
        #    {
        #        ret = checkFailed(strFmt("@SYS4000115", this.RepositoryFolder));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #find
        #public client server static SysVersionControlParameters find(boolean _forupdate = false)
        #{
        #    #SysVersionControl
        #    SysVersionControlParameters parameter;
        #
        #    parameter.selectForUpdate(_forupdate);
        #    select firstonly parameter
        #        index Key
        #        where parameter.Key == 0;
        #
        #    // Do not create record if we're in config mode
        #    if (!parameter && !parameter.isTmp() && !appl.isConfigMode())
        #    {
        #        ttsbegin;
        #        Company::createParameter(parameter);
        #
        #        if(parameter)
        #        {
        #            parameter.selectForUpdate(true);
        #            //default start value for first time setup
        #            parameter.vcsEnabled = EnableDisable::Disable;
        #            parameter.vssProjectRoot = '$/';
        #            parameter.TfsServer = 'http://';
        #            parameter.uiFlags = #VCWarnWhenReverting | #VCAOTColoring;
        #            parameter.update();
        #        }
        #        ttscommit;
        #    }
        #
        #    return parameter;
        #}
      ENDSOURCE
      SOURCE #getTargetRepositoryFolderPath
        #public static FilePath getTargetRepositoryFolderPath()
        #{
        #    SysVersionControlParameters sysVersionControlParameters = SysVersionControlParameters::find();
        #
        #    return sysVersionControlParameters.getTargetRepositoryFolder();
        #}
      ENDSOURCE
      SOURCE #getVCSType
        #public client server static SysVersionControlType getVCSType()
        #{
        #    SysVersionControlParameters sysVersionControlParameters = SysVersionControlParameters::find();
        #    return sysVersionControlParameters.VCSType;
        #}
      ENDSOURCE
      SOURCE #isVCSEnabled
        #public client server static boolean isVCSEnabled()
        #{
        #    SysVersionControlParameters sysVersionControlParameters = SysVersionControlParameters::find();
        #    ;
        #
        #    return sysVersionControlParameters && sysVersionControlParameters.vcsEnabled == EnableDisable::Enable;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlPendingChangeList unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlPendingChangeList
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlPendingChangeList
      Label               #@SYS98466
      TitleField1         #Id
      TitleField2         #Description
      TableType           #InMemory
      Systemtable         #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      Origin              #{2C2206E1-0000-1000-9EF8-44F9206B7713}
      LegacyId            #1761
    ENDPROPERTIES
    
    FIELDS
      FIELD #Description
        STRING
        PROPERTIES
          Name                #Description
          Table               #SysVersionControlPendingChangeList
          Origin              #{2A0B0002-06E1-1000-5724-124283697074}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlChangeListDescription
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #Id
        STRING
        PROPERTIES
          Name                #Id
          Table               #SysVersionControlPendingChangeList
          Origin              #{2A020001-06E1-1000-4964-000000000000}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlChangeListId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #Id
          #Description
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlSynchronizeLog unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlSynchronizeLog
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlSynchronizeLog
      Label               #@SYS85913
      TitleField1         #BatchNum
      TitleField2         #ItemPath
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Worksheet
      PrimaryIndex        #RecId
      ClusterIndex        #BatchNumCmdIdx
      CreatedDateTime     #Yes
      DEL_createdTime     #Yes
      OccEnabled          #No
      DeveloperDocumentation  #@SYS123441
      Origin              #{2C1F07BE-0000-1000-0629-DDD4D3151896}
      LegacyId            #1982
    ENDPROPERTIES
    
    FIELDS
      FIELD #BatchNum
        INT
        PROPERTIES
          Name                #BatchNum
          Table               #SysVersionControlSynchronizeLog
          Origin              #{8DA51E98-AB03-4785-9CE8-05A0CA0C2D27}
          LegacyId            #3
          ExtendedDataType    #SysVersionControlSynchronizeBatchNum
        ENDPROPERTIES
        
      FIELD #Command
        ENUM
        PROPERTIES
          Name                #Command
          Table               #SysVersionControlSynchronizeLog
          Origin              #{2EF84009-6ACD-476E-8520-E4B2BDA327EC}
          LegacyId            #4
          EnumType            #SysVersionControlSynchronizeCommand
        ENDPROPERTIES
        
      FIELD #Filename
        STRING
        PROPERTIES
          Name                #Filename
          Table               #SysVersionControlSynchronizeLog
          Origin              #{090AF8A4-0326-4719-A9BC-2EC4FE18212D}
          LegacyId            #5
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #ImageRes
        INT
        PROPERTIES
          Name                #ImageRes
          Table               #SysVersionControlSynchronizeLog
          Origin              #{EAF9961B-8667-4F64-91E4-05A1DBE7C7A0}
          LegacyId            #2
          ExtendedDataType    #ImageRes
        ENDPROPERTIES
        
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Table               #SysVersionControlSynchronizeLog
          Origin              #{06F24AEC-4B61-4EC4-9640-77ECBE581C46}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #ModelId
        INT64
        PROPERTIES
          Name                #ModelId
          Mandatory           #Yes
          Visible             #No
          Table               #SysVersionControlSynchronizeLog
          Origin              #{B90DFBAB-AF0C-42D1-A39F-ABD24E73AEC4}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Processed
        ENUM
        PROPERTIES
          Name                #Processed
          Label               #@SYS17748
          HelpText            #@SYS85927
          Table               #SysVersionControlSynchronizeLog
          Origin              #{6667EAC1-05A2-4B44-B0B1-6EB4D91CB359}
          LegacyId            #6
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #BatchNum
          #Command
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #All
        PROPERTIES
          Name                #All
          Label               #@SYS6047
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #ImageRes
          #BatchNum
          #Command
          #Filename
          #Processed
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #GridGrp
        PROPERTIES
          Name                #GridGrp
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Command
          #BatchNum
          #Processed
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #BatchNumCmdIdx
      PROPERTIES
        Name                #BatchNumCmdIdx
        Origin              #{2B0E0002-07BE-1000-531C-B16D2A48D97F}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #BatchNum
        #ModelId
        #Command
      ENDINDEXFIELDS
      
      #ProcessedIdx
      PROPERTIES
        Name                #ProcessedIdx
        Origin              #{2B0C0003-07BE-1000-DC6B-315DC9857365}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #Processed
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #SysModel
        PROPERTIES
          Name                #SysModel
          Table               #SysModel
          EntityRelationshipRole  #@SYS9923
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ModelId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #updateNotSynced
        #public static void updateNotSynced()
        #{
        #    SysVersionControlSynchronizeLogHelper sysVersionControlSynchronizeLogHelper = new SysVersionControlSynchronizeLogHelper();
        #    sysVersionControlSynchronizeLogHelper.run()                                                                              ;
        #}
        #
      ENDSOURCE
      SOURCE #getControllable
        #public SysVersionControllable getControllable()
        #{
        #    SysVersionControlSystem versionControlSystem = versioncontrol.parmSysVersionControlSystem();
        #    if (versionControlSystem)
        #    {
        #        return versionControlSystem.getControllable(this.ItemPath, this.Filename);
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #calculateModels
        #private server static container calculateModels(SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    SysVersionControlSynchronizeLog syncLog;
        #    SysVersionControlSystem vcs = versioncontrol.parmSysVersionControlSystem();
        #    Set models = new Set(Types::Int64);
        #
        #    while select ModelId from syncLog
        #        group by ModelId
        #        where syncLog.BatchNum == _batchNum
        #    {
        #        models.add(syncLog.ModelId);
        #    }
        #
        #    return models.pack();
        #}
      ENDSOURCE
      SOURCE #compileAndSaveAfterImport
        #//AOSRunMode::Client
        #private static client void compileAndSaveAfterImport(Set _modelsInBatch, SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    TreeNode                        treeNode;
        #    SysTreeNode                     sysTreeNode;
        #    SysVersionControllable          controllable;
        #    SysVersionControlSynchronizeLog syncLog;
        #    SysVersionControlTmpChange      processedElement;
        #    List                            syncLogCollection;
        #    ListEnumerator                  syncLogEnumerator;
        #    SetEnumerator                   modelEnumerator = _modelsInBatch.getEnumerator();
        #
        #    processedElement.setTmpData(versionControl.parmProcessedSyncElements());
        #
        #    while (modelEnumerator.moveNext())
        #    {
        #        syncLogCollection = List::create(SysVersionControlSynchronizeLog::getNonDeletedProcessedItemsInBatch(modelEnumerator.current(), _batchNum, processedElement));
        #        syncLogEnumerator = syncLogCollection.getEnumerator();
        #
        #        while (syncLogEnumerator.moveNext())
        #        {
        #            syncLog = syncLogEnumerator.current();
        #
        #            controllable = syncLog.getControllable();
        #            if (controllable)
        #            {
        #                sysTreeNode = controllable as SysTreeNode;
        #
        #                if (sysTreeNode && sysTreeNode.parmTreeNode())
        #                {
        #                    treeNode = sysTreeNode.parmTreeNode();
        #
        #                    //
        #                    // Do not compile documentation nodes
        #                    //
        #                    if (!(treeNode is DocNode))
        #                    {
        #                        treeNode.AOTcompile();
        #                    }
        #
        #                    treeNode.AOTsave();
        #                    treeNode.treeNodeRelease();
        #                }
        #
        #                controllable = null;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #createLogEntry
        #//AOSRunMode::Client
        #public static client SysVersionControlSynchronizeLog createLogEntry(
        #    Filename                             _filename,
        #    SysVersionControllable               _controllable,
        #    SysVersionControlSynchronizeCommand  _command,
        #    SysVersionControlSynchronizeBatchNum _batchNum = SysVersionControlSynchronizeLog::nextBatchNum(),
        #    FilePath                             _folder = versioncontrol.parmSysVersionControlSystem().parmFolder()
        #)
        #{
        #    SysVersionControlSynchronizeLog log;
        #
        #    log = SysVersionControlSynchronizeLog::initLogEntry(_filename,
        #        _controllable,
        #        _command,
        #        _batchNum,
        #        _folder);
        #
        #    log.insert();
        #
        #    return log;
        #}
        #
      ENDSOURCE
      SOURCE #getDeleteItemsInBatch
        #private static server container getDeleteItemsInBatch(SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    List controllables = new List(Types::Record);
        #    SysVersionControlSynchronizeLog syncLog;
        #
        #    while select syncLog
        #        where syncLog.BatchNum == _batchNum &&
        #              syncLog.Command  == SysVersionControlSynchronizeCommand::Delete
        #    {
        #        controllables.addEnd(syncLog);
        #    }
        #
        #    return controllables.pack();
        #}
      ENDSOURCE
      SOURCE #getLatestSyncCount
        #public static int64 getLatestSyncCount(SysVersionControlItemPath itemPath)
        #{
        #    return (select maxof(BatchNum) from sysVersionControlSynchronizeLog
        #    where sysVersionControlSynchronizeLog.ItemPath == itemPath).BatchNum;
        #}
      ENDSOURCE
      SOURCE #getNonDeletedProcessedItemsInBatch
        #private static server container getNonDeletedProcessedItemsInBatch(ModelId _modelId, SysVersionControlSynchronizeBatchNum _batchNum, SysVersionControlTmpChange _processedElements)
        #{
        #    List controllables = new List(Types::Record);
        #    SysVersionControlSynchronizeLog syncLog;
        #    SysVersionControlTmpChange processedElement;
        #
        #    processedElement.setTmpData(_processedElements);
        #
        #    while select syncLog
        #        where syncLog.BatchNum == _batchNum &&
        #                syncLog.ModelId == _modelId &&
        #                syncLog.Command != SysVersionControlSynchronizeCommand::Delete
        #        join processedElement
        #            where processedElement.ChangeNumber == syncLog.RecId
        #    {
        #        controllables.addEnd(syncLog);
        #    }
        #
        #    return controllables.pack();
        #}
      ENDSOURCE
      SOURCE #getNonDeleteItemsInBatch
        #private static server container getNonDeleteItemsInBatch(ModelId _modelId, SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    List controllables = new List(Types::Record);
        #    SysVersionControlSynchronizeLog syncLog;
        #
        #    while select syncLog
        #        where syncLog.BatchNum == _batchNum &&
        #                syncLog.ModelId == _modelId &&
        #                syncLog.Command != SysVersionControlSynchronizeCommand::Delete
        #    {
        #        controllables.addEnd(syncLog);
        #    }
        #
        #    return controllables.pack();
        #}
      ENDSOURCE
      SOURCE #initLogEntry
        #//AOSRunMode::Client
        #public static client SysVersionControlSynchronizeLog initLogEntry(
        #    Filename                             _filename,
        #    SysVersionControllable               _controllable,
        #    SysVersionControlSynchronizeCommand  _command,
        #    SysVersionControlSynchronizeBatchNum _batchNum,
        #    FilePath                             _folder)
        #{
        #    SysVersionControlSynchronizeLog log;
        #    #define.StrLenLayerWithDelimter(5) // e.g. /USR/
        #    #File
        #    #ResAppl
        #
        #    log.Command          = _command;
        #    log.Filename         = _filename;
        #    log.BatchNum         = _batchNum;
        #
        #    log.ModelId = versioncontrol.parmSysVersionControlSystem().getModelFromFile(log.Filename);
        #
        #    if (!log.ModelId) //Typically an additional folder
        #    {
        #        log.ModelId = xInfo::getSystemGeneratedModelId(currentAOLayer());
        #    }
        #
        #    if (_controllable)
        #        log.ItemPath = _controllable.versionControlItemPath();
        #
        #    if (!log.ItemPath)
        #    {
        #        log.ItemPath    = subStr(_filename, strLen(_folder)+#StrLenLayerWithDelimter, maxInt());
        #        log.ItemPath    = subStr(log.ItemPath, 1, strLen(log.ItemPath)-strLen(#XPO));
        #    }
        #
        #    if (hasGUI())
        #    {
        #        log.ImageRes         = new ImageListAppl_Aot().image(SysVersionControlSystem::path2Image(log.ItemPath));
        #    }
        #    log.Processed        = false;
        #
        #    return log;
        #}
      ENDSOURCE
      SOURCE #nextBatchNum
        #public server static SysVersionControlSynchronizeBatchNum nextBatchNum()
        #{
        #    return (select maxof(BatchNum) from sysVersionControlSynchronizeLog).BatchNum+1;
        #}
      ENDSOURCE
      SOURCE #processBatchNum
        #//AOSRunMode::Client
        #public static client void processBatchNum(SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    ModelId originalModelId = xInfo::getCurrentModelId();
        #    ModelId modelId;
        #    boolean result;
        #    Set modelsInBatch;
        #    SetEnumerator modelsEnum;
        #
        #    try
        #    {
        #        versionControl.initSynchronizationProcess();
        #
        #        modelsInBatch = Set::create(SysVersionControlSynchronizeLog::calculateModels(_batchNum));
        #        modelsEnum = modelsInBatch.getEnumerator();
        #
        #        // Delete commands must be processed first, as they may be part of a rename or move to model operation.
        #        result = SysVersionControlSynchronizeLog::processDeletesInBatchNum(_batchNum);
        #
        #        while (modelsEnum.moveNext())
        #        {
        #            modelId = modelsEnum.current();
        #            if (SysModelStore::modelExists(modelId))
        #            {
        #                xInfo::setCurrentModelId(modelId);
        #                result = SysVersionControlSynchronizeLog::processModelInBatchNum(modelId, _batchNum) && result;
        #            }
        #            else
        #            {
        #                result = checkFailed(strFmt("@SYS345063", SysModelStore::displayName(modelId)));
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #
        #    try
        #    {
        #        // Update synchronization log as processed.
        #        SysVersionControlSynchronizeLog::updateLogEntry(_batchNum);
        #
        #        // Make sure tree nodes get compiled and saved for add and update
        #        SysVersionControlSynchronizeLog::compileAndSaveAfterImport(modelsInBatch, _batchNum);
        #    }
        #    catch
        #    {
        #        // fall through making sure processedSyncElements gets cleared and original model is set back to the orginal.
        #        exceptionTextFallThrough();
        #    }
        #
        #    versionControl.parmProcessedSyncElements().clear();
        #    versionControl.parmTreeNodePath2SyncLog(null);
        #
        #    // Set current model back to original
        #    xInfo::setCurrentModelId(originalModelId);
        #}
      ENDSOURCE
      SOURCE #processDelete
        #/// <summary>
        #/// Handles delete actions during synchronization.
        #/// </summary>
        #/// <param name="_modelId">
        #/// The model currently being synchronized.
        #/// </param>
        #/// <param name="_controllable">
        #/// The controllable to delete.
        #/// </param>
        #/// <returns>
        #/// true if the controllable was deleted; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the element to be deleted is located in a different model than the one that is currently being
        #/// synchronized, the element should not be deleted as it may be the result of moving an element to a
        #/// different model.
        #/// </remarks>
        #private static client boolean processDelete(ModelId _modelId, SysVersionControllable _controllable)
        #{
        #    #SysModelStore
        #    SysTreeNode                         sysTreeNode = _controllable as SysTreeNode;
        #    TreeNode                            treeNode;
        #    ModelId                             modelId = #ModelId_Undefined;
        #    boolean                             canDelete = true;
        #
        #    if (sysTreeNode)
        #    {
        #        // Only delete the item if it currently lives in the model being synchronized.
        #        // In case of a move operation it could have been synced to a different model already.
        #        treeNode    = sysTreeNode.parmTreeNode();
        #        if (VersionControl::modelQueryable(treeNode))
        #        {
        #            if (treeNode.AOTLayer() == currentAOLayer())
        #            {
        #                modelId = treeNode.AOTGetModel();
        #            }
        #            else if (SysTreeNode::existsInLayer(treeNode, currentAOLayer()))
        #            {
        #                // Get the first model from the subelements, since subelements exists in current layer but root element doesn't
        #                modelId = SysTreeNode::getFirstModelIdFromSubElements(treeNode.utilIdElement().Name, treeNode.utilIdElement().RecordType);
        #            }
        #            else
        #            {
        #                // If the element does not exist in the current layer, do not attempt to delete it.
        #                canDelete = false;
        #            }
        #
        #            if (modelId != #ModelId_Undefined &&
        #                modelId != _modelId)
        #            {
        #                // The element exists in a different model than what is currently being synchronized. Do not delete it.
        #                canDelete = false;
        #            }
        #        }
        #    }
        #
        #    if (canDelete)
        #    {
        #        _controllable.delete();
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #processDeletesInBatchNum
        #//AOSRunMode::Client
        #private static client boolean processDeletesInBatchNum(SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    SysVersionControllable          controllable;
        #    SysVersionControlSynchronizeLog syncLog;
        #    List                            syncLogCollection = List::create(SysVersionControlSynchronizeLog::getDeleteItemsInBatch(_batchNum));
        #    ListEnumerator                  syncLogEnumerator = syncLogCollection.getEnumerator();
        #    boolean                         result;
        #    SysVersionControlTmpChange      processedElement;
        #
        #    versioncontrol.parmIsSynchronizing(true);
        #
        #    try
        #    {
        #        processedElement.setTmpData(versionControl.parmProcessedSyncElements());
        #
        #        while (syncLogEnumerator.moveNext())
        #        {
        #            syncLog = syncLogEnumerator.current();
        #            Debug::assert(syncLog.Command == SysVersionControlSynchronizeCommand::Delete);
        #
        #            controllable = syncLog.getControllable();
        #            if (controllable)
        #            {
        #                if (SysVersionControlSynchronizeLog::processDelete(int642int(syncLog.ModelId), controllable))
        #                {
        #                    versionControl.addProcessedSyncElement(syncLog.RecId);
        #                }
        #
        #                controllable = null;
        #            }
        #        }
        #        result = true;
        #    }
        #    catch
        #    {
        #        result = false;
        #    }
        #
        #    versioncontrol.parmIsSynchronizing(false);
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #processModelInBatchNum
        #//AOSRunMode::Client
        #private static client boolean processModelInBatchNum(ModelId _modelId, SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    #AOTExport
        #    #File
        #    #AOT
        #    #Define.tempFileName('AOTimp.xpo')
        #
        #    SysImportElements               sysImportElements = new SysImportElements();
        #
        #    TextIo                          impFile;
        #    TextIo                          objectFile;
        #    container                       con;
        #    str                             line;
        #    str                             tempFilename = WinAPI::getTempPath()+#tempFileName;
        #    boolean                         xpoUpdate;
        #    SysVersionControllable          controllable;
        #    SysVersionControlSynchronizeLog syncLog;
        #    List                            syncLogCollection = List::create(SysVersionControlSynchronizeLog::getNonDeleteItemsInBatch(_modelId, _batchNum));
        #    ListEnumerator                  syncLogEnumerator = syncLogCollection.getEnumerator();
        #    SysTreeNode                     treeNodeControllable;
        #    boolean                         result = true;
        #    TreeNode                        treeNode;
        #    TmpAotImport                    tmpImportAot;
        #
        #    impFile = new TextIo(tempFilename, #IO_Write, #utf8Format); // UTF8
        #    impFile.write(#HeaderLine1);
        #    impFile.write(#HeaderLine2);
        #    impFile.write('');
        #
        #    // Disable save operation during XPO import via VCS
        #    versioncontrol.parmIsSynchronizing(true);
        #
        #    while (syncLogEnumerator.moveNext())
        #    {
        #        syncLog = syncLogEnumerator.current();
        #        controllable = syncLog.getControllable();
        #
        #        if (controllable)
        #        {
        #            // Delete commands should be processed in processDeletesInbatchNum()
        #            Debug::assert(syncLog.Command != SysVersionControlSynchronizeCommand::Delete);
        #            treeNodeControllable = controllable as SysTreeNode;
        #
        #            switch (true)
        #            {
        #                case treeNodeControllable != null:
        #
        #                    if (controllable is SysTreeNodeVSItem ||
        #                        controllable is SysTreeNodeVirtualVSItemDeleted)
        #                    {
        #                        try
        #                        {
        #                            controllable.fromFile(syncLog.Filename);
        #                            // Make sure model is set after import, as the import logic is done
        #                            // in the AX- and VSInteraction assemblies through treenode API.
        #                            if (treeNodeControllable.parmTreeNode() &&
        #                                (treeNodeControllable.parmTreeNode().applObjectLayerMask() & (1 << currentAOLayer())))
        #                            {
        #                                treeNodeControllable.parmTreeNode().AOTSetModel(_modelId);
        #                            }
        #                            versionControl.addProcessedSyncElement(syncLog.RecId);
        #                        }
        #                        catch
        #                        {
        #                            result = false;
        #                            exceptionTextFallThrough();
        #                        }
        #                        break;
        #                    }
        #
        #                    sysImportElements.newFile(syncLog.Filename);
        #
        #                    // Get info of the file
        #                    tmpImportAot = sysImportElements.getTmpImportAot();
        #
        #                    // add syncLog for controllable's treenode path
        #                    versionControl.parmTreeNodePath2SyncLog().insert(tmpImportAot.TreeNodePath, syncLog.RecId);
        #
        #                    xpoUpdate = true;
        #                    objectFile = new TextIo(syncLog.Filename, #IO_Read);
        #                    if (!objectFile)
        #                        throw error(strFmt("@SYS18678", syncLog.Filename));
        #
        #                    objectFile.inFieldDelimiter(#delimiterEnter);
        #
        #                    while (objectFile.status() == IO_Status::Ok)
        #                    {
        #                        con = objectFile.read();
        #                        if (conLen(con) > 0)
        #                            line = conPeek(con,1);
        #                        else
        #                            line = '';
        #
        #                        if (strStartsWith(line, #expEndRecord) &&     // ***ELEMENT
        #                            !strStartsWith(line, #FooterLine))    // The element end delimeter (***ELEMENT: END) shouldn't be used as element start line.
        #                        {
        #                            impFile.write(line);
        #                            break;
        #                        }
        #                    }
        #                    while (objectFile.status() == IO_Status::Ok)
        #                    {
        #                        con = objectFile.read();
        #                        if (conLen(con) > 0)
        #                            line = conPeek(con,1);
        #                        else
        #                            line = '';
        #
        #                        if (strStartsWith(line, #expEndRecord))  // ***ELEMENT
        #                        {
        #                            break;
        #                        }
        #                        else
        #                        {
        #                            impFile.write(line);
        #                        }
        #                    }
        #                    break;
        #
        #                default:
        #                    try
        #                    {
        #                        controllable.fromFile(syncLog.Filename);
        #
        #                        treeNode = controllable as treeNode;
        #                        if (treeNode && (treeNode.applObjectLayerMask() & (1 << currentAOLayer())))
        #                        {
        #                            treeNode.AOTSetModel(xInfo::getCurrentModelId());
        #                        }
        #
        #                        versionControl.addProcessedSyncElement(syncLog.RecId);
        #                    }
        #                    catch
        #                    {
        #                        result = false;
        #                        exceptionTextFallThrough();
        #                    }
        #
        #                    break;
        #            }
        #
        #            // Release controllable
        #            SysVersionControlTmpItem::releaseControllable(controllable);
        #            controllable = null;
        #        }
        #    }
        #
        #    try
        #    {
        #        if (xpoUpdate)
        #        {
        #            impFile.write('');
        #            impFile.write(#FooterLine);
        #            impFile.write('');
        #            impFile = null;
        #
        #            sysImportElements.newFile(tempFilename);
        #            sysImportElements.parmImportAot(true);
        #            sysImportElements.parmAddToProject(false);
        #
        #            // Import all elements. Each root element will invoke infolog.importElement in SysImportElements during import.
        #            // SysImportElements.importElements will lookup the syncLog record ID in the versionControl's path2SyncLog map and add it to the list
        #            // of processed elements.
        #            if (!sysImportElements.import(#impRemoveExcess | #impIgnoreCheckStatus | #impKeepIds | #impOverrideModel))
        #            {
        #                result = false;
        #            }
        #        }
        #        else
        #        {
        #            impFile = null;
        #        }
        #    }
        #    catch
        #    {
        #        result = false;
        #        exceptionTextFallThrough();
        #    }
        #
        #    // Re-enable save operation during XPO import via VCS
        #    versioncontrol.parmIsSynchronizing(false);
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #updateLogEntry
        #private static server void updateLogEntry(SysVersionControlSynchronizeBatchNum _batchNum)
        #{
        #    UserConnection connection = new UserConnection();
        #    SysVersionControlSynchronizeLog syncLog;
        #    SysVersionControlTmpChange processedElement;
        #
        #    processedElement.setTmpData(versionControl.parmProcessedSyncElements());
        #
        #    syncLog.setConnection(connection);
        #    connection.ttsbegin();
        #
        #    update_recordset syncLog
        #        setting Processed = NoYes::Yes
        #    join processedElement
        #    where processedElement.ChangeNumber == syncLog.RecId
        #       && syncLog.BatchNum  == _batchNum;
        #
        #    connection.ttscommit();
        #    connection = null;
        #}
      ENDSOURCE
      SOURCE #validateFile
        #public static boolean validateFile(Filename _filename)
        #{
        #    SysVersionControlSynchronizeLog log;
        #
        #    select firstonly log
        #        order by BatchNum desc
        #        where log.Filename == _filename;
        #    //
        #    // The client isn't up-to-date, as a sync has failed
        #    //
        #    if (log && log.Processed == false)
        #    {
        #        error(strFmt("@SYS86579", _filename));
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpAdditionalFolders unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpAdditionalFolders
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlTmpAdditionalFolders
      Label               #@SYS94390
      TableType           #InMemory
      Origin              #{2C2508A9-0000-1000-0C3A-96FDB900217A}
      LegacyId            #2217
    ENDPROPERTIES
    
    FIELDS
      FIELD #AldLocation
        STRING
        PROPERTIES
          Name                #AldLocation
          Label               #@SYS335486
          HelpText            #@SYS335487
          Table               #SysVersionControlTmpAdditionalFolders
          Origin              #{658651E4-FB29-4A14-8475-55DF326C085F}
          LegacyId            #3
          ExtendedDataType    #FilePath
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #Description
        STRING
        PROPERTIES
          Name                #Description
          Table               #SysVersionControlTmpAdditionalFolders
          Origin              #{02E61B6C-4D68-4EE9-87A1-E261382570AA}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlAddFolderDescription
          StringSize          #128
        ENDPROPERTIES
        
      FIELD #Folder
        STRING
        PROPERTIES
          Name                #Folder
          Label               #@SYS110044
          HelpText            #@SYS110043
          Table               #SysVersionControlTmpAdditionalFolders
          Origin              #{08704D81-8964-4A0C-88BB-E3C46C60D1AC}
          LegacyId            #1
          ExtendedDataType    #FilePath
          StringSize          #259
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpChange unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpChange
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlTmpChange
      Label               #@SYS85911
      FormRef             #SysVersionControlChangesHistory
      TitleField1         #ChangeNumber
      TitleField2         #VCSDate
      TableType           #InMemory
      Systemtable         #Yes
      SaveDataPerCompany  #No
      TableGroup          #Main
      PrimaryIndex        #KeyIdx
      ClusterIndex        #KeyIdx
      Origin              #{2C1A07BF-0000-1000-49C6-44EB3BD26A15}
      LegacyId            #1983
    ENDPROPERTIES
    
    FIELDS
      FIELD #ChangeNumber
        INT64
        PROPERTIES
          Name                #ChangeNumber
          Table               #SysVersionControlTmpChange
          Origin              #{064A99E8-FD8D-429F-AF18-75A048D23620}
          LegacyId            #7
          ExtendedDataType    #SysVersionControlChangeNumber
        ENDPROPERTIES
        
      FIELD #Comment
        STRING
        PROPERTIES
          Name                #Comment
          Table               #SysVersionControlTmpChange
          Origin              #{0A1D8FFD-80D4-472D-8D3F-F212768D1BC4}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlItemComment
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #ComputerName
        STRING
        PROPERTIES
          Name                #ComputerName
          Table               #SysVersionControlTmpChange
          Origin              #{D6922AC7-BF8F-42C0-ADBA-3DFA9BF24B4B}
          LegacyId            #6
          ExtendedDataType    #ComputerName
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ShortComment
        STRING
        PROPERTIES
          Name                #ShortComment
          Table               #SysVersionControlTmpChange
          Origin              #{220431BC-B8F8-405F-BBBC-535FAC858A6B}
          LegacyId            #8
          ExtendedDataType    #SysVersionControlItemShortComment
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #StatusText
        STRING
        PROPERTIES
          Name                #StatusText
          Table               #SysVersionControlTmpChange
          Origin              #{E6337605-6CF5-4E04-86B3-F3F029C77D3A}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlStatusText
        ENDPROPERTIES
        
      FIELD #User
        STRING
        PROPERTIES
          Name                #User
          Table               #SysVersionControlTmpChange
          Origin              #{4F8414FC-722C-465A-8876-98E7CCC53D67}
          LegacyId            #3
          ExtendedDataType    #SysVersionControlUser
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #VCSDate
        DATE
        PROPERTIES
          Name                #VCSDate
          Table               #SysVersionControlTmpChange
          Origin              #{E8E8D715-8679-464B-82C8-A7AB819391DA}
          LegacyId            #4
          ExtendedDataType    #SysVersionControlItemDate
        ENDPROPERTIES
        
      FIELD #VCSTime
        TIME
        PROPERTIES
          Name                #VCSTime
          Label               #@SYS8827
          HelpText            #@SYS98628
          Table               #SysVersionControlTmpChange
          Origin              #{D1ABD163-F772-4A9C-92D7-F13510BCE27F}
          LegacyId            #9
          ExtendedDataType    #TimeOfDay
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #ChangelistHeader
        PROPERTIES
          Name                #ChangelistHeader
          Label               #@SYS2952
        ENDPROPERTIES
        
        GROUPFIELDS
          #ChangeNumber
          #User
          #ComputerName
          #VCSDate
          #VCSTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ChangesHistoryGrid
        PROPERTIES
          Name                #ChangesHistoryGrid
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #ChangeNumber
          #StatusText
          #VCSDate
          #VCSTime
          #User
          #ShortComment
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Comment
        PROPERTIES
          Name                #Comment
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #Comment
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ModifiedBy
        PROPERTIES
          Name                #ModifiedBy
          Label               #@SYS75729
        ENDPROPERTIES
        
        GROUPFIELDS
          #User
          #ComputerName
          #VCSDate
          #VCSTime
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #KeyIdx
      PROPERTIES
        Name                #KeyIdx
        AllowDuplicates     #No
        Origin              #{2B060001-07BF-1000-4B65-794964780000}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ChangeNumber
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #generateShortComment
        #private SysVersionControlItemShortComment generateShortComment()
        #{
        #    return strrem(this.Comment, '\n\r');
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.ShortComment = this.generateShortComment();
        #    super();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpItem unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpItem
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlTmpItem
      Label               #@SYS85910
      FormRef             #sysversionControlitemHistory
      TitleField1         #Version
      TitleField2         #ItemPath
      TableType           #InMemory
      Systemtable         #Yes
      SaveDataPerCompany  #No
      TableGroup          #Main
      Origin              #{2C1807C0-0000-1000-6C63-C7DBDD00AD98}
      LegacyId            #1984
    ENDPROPERTIES
    
    FIELDS
      FIELD #ActionText
        STRING
        PROPERTIES
          Name                #ActionText
          Table               #SysVersionControlTmpItem
          Origin              #{D1B46432-5D2F-46E6-B2FE-BA98E6994BBC}
          LegacyId            #9
          ExtendedDataType    #SysVersionControlActionText
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #ChangeNumber
        INT64
        PROPERTIES
          Name                #ChangeNumber
          Table               #SysVersionControlTmpItem
          Origin              #{BDE266FA-5CFB-4FCB-B973-BD17D2058F20}
          LegacyId            #10
          ExtendedDataType    #SysVersionControlChangeNumber
        ENDPROPERTIES
        
      FIELD #Comment
        STRING
        PROPERTIES
          Name                #Comment
          Table               #SysVersionControlTmpItem
          Origin              #{05D8BDEA-DAF8-44E4-8061-DD0A80EE6D9E}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlItemComment
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #ComputerName
        STRING
        PROPERTIES
          Name                #ComputerName
          Table               #SysVersionControlTmpItem
          Origin              #{D7DD9959-A705-4A6E-B333-484EB21BFCCB}
          LegacyId            #8
          ExtendedDataType    #ComputerName
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #Filename
        STRING
        PROPERTIES
          Name                #Filename
          Table               #SysVersionControlTmpItem
          Origin              #{EDD71E76-68C2-4AB6-AB5F-C848C54C9B17}
          LegacyId            #4
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #ImageRes
        INT
        PROPERTIES
          Name                #ImageRes
          Table               #SysVersionControlTmpItem
          Origin              #{C2F03D5C-4758-4EFE-BF53-CC4CED41FBBB}
          LegacyId            #12
          ExtendedDataType    #ImageRes
        ENDPROPERTIES
        
      FIELD #InternalFilename
        STRING
        PROPERTIES
          Name                #InternalFilename
          Visible             #No
          Table               #SysVersionControlTmpItem
          Origin              #{0ED7BE2A-1349-4674-B981-8A3B5E16B926}
          LegacyId            #11
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Table               #SysVersionControlTmpItem
          Origin              #{0E5E74D4-6D53-4356-B608-334E10683826}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #Label
        STRING
        PROPERTIES
          Name                #Label
          Table               #SysVersionControlTmpItem
          Origin              #{68A5E31D-BAAB-49D7-92C5-A9D490D04E3E}
          LegacyId            #16
          ExtendedDataType    #SysVersionControlLabel
          StringSize          #31
        ENDPROPERTIES
        
      FIELD #Selected
        ENUM
        PROPERTIES
          Name                #Selected
          Label               #@SYS28109
          HelpText            #@SYS111700
          Table               #SysVersionControlTmpItem
          Origin              #{0F364A2F-B79D-4E08-8BC0-F16716CAB447}
          LegacyId            #7
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ShortComment
        STRING
        PROPERTIES
          Name                #ShortComment
          Table               #SysVersionControlTmpItem
          Origin              #{01DD3A48-FA63-4D3D-B0A5-CFB5AA2C1C59}
          LegacyId            #14
          ExtendedDataType    #SysVersionControlItemShortComment
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #StatusText
        STRING
        PROPERTIES
          Name                #StatusText
          Table               #SysVersionControlTmpItem
          Origin              #{F6A94DBC-EEE9-43CF-9AC9-A62B7A9DD366}
          LegacyId            #13
          ExtendedDataType    #SysVersionControlStatusText
        ENDPROPERTIES
        
      FIELD #User
        STRING
        PROPERTIES
          Name                #User
          Table               #SysVersionControlTmpItem
          Origin              #{FD8D0EC7-E01E-4229-876A-F8395059FED1}
          LegacyId            #3
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #VCSDate
        DATE
        PROPERTIES
          Name                #VCSDate
          Table               #SysVersionControlTmpItem
          Origin              #{8F3DD330-D10D-4C5A-A0EA-8392F78F3F41}
          LegacyId            #6
          ExtendedDataType    #SysVersionControlItemDate
        ENDPROPERTIES
        
      FIELD #VCSTime
        TIME
        PROPERTIES
          Name                #VCSTime
          Label               #@SYS8758
          Table               #SysVersionControlTmpItem
          Origin              #{70028030-BDB5-453D-BF5E-C66DED7C244C}
          LegacyId            #15
          ExtendedDataType    #TimeOfDay
        ENDPROPERTIES
        
      FIELD #Version
        INT
        PROPERTIES
          Name                #Version
          Table               #SysVersionControlTmpItem
          Origin              #{C743EFD9-605A-4B2A-AD3F-8EB296A54D61}
          LegacyId            #5
          ExtendedDataType    #SysVersionControlItemVersion
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #ChangelistGrid
        PROPERTIES
          Name                #ChangelistGrid
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Version
          #ActionText
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ChangelistHeader
        PROPERTIES
          Name                #ChangelistHeader
          Label               #@SYS2952
        ENDPROPERTIES
        
        GROUPFIELDS
          #ChangeNumber
          #User
          #ComputerName
          #VCSDate
          #VCSTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Comment
        PROPERTIES
          Name                #Comment
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #Comment
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Filename
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ModifiedBy
        PROPERTIES
          Name                #ModifiedBy
          Label               #@SYS75729
        ENDPROPERTIES
        
        GROUPFIELDS
          #User
          #ComputerName
          #VCSDate
          #VCSTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview
        PROPERTIES
          Name                #Overview
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #Version
          #ActionText
          #VCSDate
          #VCSTime
          #User
          #ChangeNumber
          #itemPathUsingObjectName
          #ShortComment
          #Label
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #DateIdx
      PROPERTIES
        Name                #DateIdx
        Origin              #{2B070001-07C0-1000-4461-746549647800}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #VCSDate
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #fileName
        #public FilenameOpen fileName()
        #{
        #    if (!this.Filename)
        #    {
        #        this.Filename = versioncontrol.getItemVersion(this.getControllable(), this);
        #        if (!this.Filename)
        #        {
        #            //
        #            // The file could not be retrieved, e.g. in case of a deletion.
        #            //
        #            throw error("@SYS86327");
        #        }
        #    }
        #    return this.Filename;
        #}
      ENDSOURCE
      SOURCE #generateShortComment
        #private SysVersionControlItemShortComment generateShortComment()
        #{
        #    return strRem(this.Comment, '\n\r');
        #}
      ENDSOURCE
      SOURCE #getComparable
        #public SysComparable getComparable()
        #{
        #    #SysVersionControl
        #    #AOT
        #
        #    if (match(#LabelMatch, this.ItemPath))
        #    {
        #        return SysLabelFile::newVCSItem(this);
        #    }
        #
        #    if (match(#DefFileMatch, this.ItemPath))
        #    {
        #        return SysVersionControlDefFile::newVCSItem(this);
        #    }
        #
        #    if (match(#VSProjectPathMatch, this.ItemPath))
        #    {
        #        return SysTreeNodeVirtualVCS::newVCSItem(this);
        #    }
        #
        #    if (this.ItemPath && SysVersionControlTmpItem::isValidXPOFile(this.InternalFilename))
        #    {
        #        return SysTreeNodeVirtualVCS::newVCSItem(this);
        #    }
        #
        #
        #    return SysVersionControlFile::newVCSItem(this);
        #}
      ENDSOURCE
      SOURCE #getControllable
        #/// <summary>
        #/// Constructs a <c>SysVersionControllable</c> object.
        #/// </summary>
        #/// <param name="_forceVirtualDeletedForDeleteOperation">
        #/// A Boolean value that indicates whether to always use a <c>SysTreeNodeVirtualDeleted</c> instance
        #/// when the file is opened for delete.
        #/// </param>
        #/// <returns>
        #/// An instance of a class that implements the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #/// <remarks>
        #/// If the caller expects a <c>SysTreeNodeVirtualDeleted</c> object in case of delete, use true for the
        #/// value of the <paramref name="_forceVirtualDeletedForDeleteOperation" /> parameter.Otherwise, this
        #/// method will return a non-virtual object when the delete object actually exists in the AOT. This can
        #/// occur, for example, when the delete operation was a result of moving an object to a different model.
        #/// </remarks>
        #public SysVersionControllable getControllable(boolean _forceVirtualDeletedForDeleteOperation = false)
        #{
        #    SysVersionControllable      controllable;
        #    boolean                     forceVirtualDeleted;
        #
        #    forceVirtualDeleted = _forceVirtualDeletedForDeleteOperation && versioncontrol.parmSysVersionControlSystem().isTmpItemOpenedForDelete(this);
        #
        #    controllable = SysVersionControlTmpItem::newControllable(this.itemPathUsingObjectName(), this.InternalFilename, !forceVirtualDeleted);
        #
        #    if (!controllable)
        #    {
        #        controllable = SysVersionControlFile::newVCSItem(this);
        #    }
        #    return controllable;
        #}
      ENDSOURCE
      SOURCE #getVirtualTreenode
        #public TreeNode getVirtualTreenode(Filename _filename = this.fileName())
        #{
        #    #AOT
        #    #AotExport
        #    #File
        #
        #    TmpAotImport        tmpImportAot;
        #    SysImportElements   sysImportElements = new SysImportElements();
        #
        #    TreeNode  treeNodeImport  = null;
        #    int       exportId;
        #    int       flag            = (#impGetCompareNode + #impKeepIds);
        #    str       name;
        #    str       extension;
        #
        #    extension = System.IO.Path::GetExtension(_filename);
        #
        #    if (match(#vsProjFileExtMatch, extension))
        #    {
        #        return SysTreeNodeVSProject::getVirtualProject(_filename);
        #    }
        #
        #    // Set the filename.
        #    sysImportElements.newFile(_filename);
        #
        #    // Get info from the file
        #    tmpImportAot = sysImportElements.getTmpImportAot();
        #
        #    // Create an import context
        #    exportId     = infolog.startImport(_filename, flag);
        #
        #    // Get the right name - for doc nodes it is the path excl the first part
        #    switch (tmpImportAot.UtilFileType)
        #    {
        #        case UtilFileType::Application:
        #            name = tmpImportAot.TreeNodeName;
        #            break;
        #        case UtilFileType::KernelHelp:
        #            name = strDel(tmpImportAot.TreeNodePath, 1, strLen(#SystemDocPath));
        #            break;
        #        default:
        #            name = tmpImportAot.TreeNodeName;
        #            break;
        #    }
        #
        #    // Import the node in memory
        #    treeNodeImport  = infolog.getImportedNode(
        #        exportId,
        #        tmpImportAot.UtilFileType,
        #        tmpImportAot.UtilElementType,
        #        name,
        #        tmpImportAot.FilePos,
        #        flag);
        #
        #    // Close the import context
        #    infolog.endImport(exportId, 1);
        #
        #    return treeNodeImport;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.ShortComment = this.generateShortComment();
        #    super();
        #}
      ENDSOURCE
      SOURCE #itemPathUsingObjectName
        #// BP deviation documented
        #display SysVersionControlItemPath itemPathUsingObjectName()
        #{
        #    int len = strLen(this.ItemPath);
        #    int i = strScan(this.ItemPath, '\\', len, -len);
        #
        #    return subStr(this.ItemPath,1,i)+this.objectName();
        #}
      ENDSOURCE
      SOURCE #objectName
        #// BP deviation documented
        #display IdentifierName objectName()
        #{
        #    #file
        #
        #    int len = strLen(this.InternalFilename);
        #    int i = strScan(this.InternalFilename, '\\', len, -len);
        #    int j = strScan(this.InternalFilename, #xpo, 1 , len);
        #    if (!j)
        #        j = strScan(this.InternalFilename, #ald, 1 , len);
        #    if (!j)
        #        j = strScan(this.InternalFilename, #xml, 1 , len);
        #    if (!i)
        #        i = strScan(this.InternalFilename, '/', len, -len);
        #
        #    // If the name does not contain well known extensions return the whole name
        #    if (!j)
        #        j = len + 1;
        #
        #    if (i && j && i<j)
        #        return subStr(this.InternalFilename, i+1, j-i-1);
        #    return '';
        #}
      ENDSOURCE
      SOURCE #openNewWindow
        #public void openNewWindow()
        #{
        #    TreeNode treeNode = this.getVirtualTreenode();
        #    if (treeNode)
        #        treeNode.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #viewFile
        #public void viewFile()
        #{
        #    #WinApi
        #    #define.Command('cmd')
        #    #define.Notepad('/c notepad \%1')
        #
        #;
        #    if (WinAPI::fileExists(this.fileName()))
        #        WinAPI::shellExecute(#Command,strFmt(#Notepad,this.fileName()),'',#ShellExeOpen,#SW_HIDE);
        #    else
        #        error(strFmt("@SYS19312", this.fileName()));
        #}
      ENDSOURCE
      SOURCE #compareContext
        #public static SysCompareContextProvider compareContext(SysVersionControlTmpItem _item1, SysVersionControlTmpItem _item2 = null)
        #{
        #    SysComparable comparable1 = _item1 ? _item1.getComparable() : null;
        #    SysComparable comparable2 = _item2 ? _item2.getComparable() : null;
        #    SysLabelFile  labelFile1, labelFile2;
        #    SysTreeNode   treeNode1, treeNode2;
        #    TreeNode      treeNode;
        #
        #    if (comparable1 is SysLabelFile)
        #    {
        #        labelFile1 = comparable1 as SysLabelFile;
        #        labelFile2 = comparable2 as SysLabelFile;
        #        if (labelFile1)
        #        {
        #            if (!labelFile2)
        #            {
        #                labelFile2 = SysLabelFile::newLanguageModule(labelFile1.parmLanguageId(), labelFile1.parmModuleId());
        #            }
        #            return SysLabelFileCompareContext::newSysLabelFiles(labelFile1, labelFile2);
        #        }
        #    }
        #
        #    if (comparable1 is SysTreeNode)
        #    {
        #        treeNode1 = comparable1 as SysTreeNode;
        #        treeNode2 = comparable2 as SysTreeNode;
        #
        #        if (treeNode1)
        #        {
        #            if (!treeNode2)
        #            {
        #                if (_item2 && _item2.ItemPath)
        #                {
        #                    treeNode  = TreeNode::findNode(_item2.ItemPath);
        #                }
        #                else
        #                {
        #                    treeNode  = TreeNode::findNode(_item1.ItemPath);
        #                }
        #                treeNode2 = SysTreeNode::newTreeNode(treeNode);
        #            }
        #            return SysTreenodeCompareContext::newSysTreeNode(treeNode1, treeNode2);
        #        }
        #    }
        #
        #    if (comparable1 && comparable2)
        #    {
        #        return SysComparableCompareContext::newComparables(comparable1, comparable2);
        #    }
        #
        #    // If the second comparable is null, try to find the node in repository for comparison.
        #    if (comparable1 && !comparable2)
        #    {
        #        treeNode  = TreeNode::findNode(_item1.ItemPath);
        #
        #        if (treeNode)
        #        {
        #            treeNode2 = SysTreeNode::newTreeNode(treeNode);
        #
        #            if (treeNode2)
        #            {
        #                return SysComparableCompareContext::newComparables(comparable1, treeNode2);
        #            }
        #        }
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #hasSeveralNames
        #public static boolean hasSeveralNames(SysVersionControlTmpItem _item)
        #{
        #    Set set = new Set(Types::String);
        #
        #    while select _item
        #    {
        #        set.add(_item.itemPathUsingObjectName());
        #    }
        #    return set.elements() > 1;
        #}
      ENDSOURCE
      SOURCE #isValidXPOFile
        #static public boolean isValidXPOFile(Filename _filename)
        #{
        #    #File
        #    UtilEntryLevel layer;
        #    int i;
        #    MapEnumerator enum;
        #    Filename filename = _filename;
        #
        #
        #    //
        #    // Is it an xpo file?
        #    //
        #    if (strScan(filename, #xpo, 1, strLen(filename)))
        #    {
        #        // Is it placed in a layer folder?
        #        //
        #        filename = strReplace(filename, '\\', '/');
        #        for (i=0; i<enumCnt(UtilEntryLevel); i++)
        #        {
        #            layer = i;
        #            if (strScan(filename, strFmt('/%1/', layer), 1, strLen(filename)))
        #                return true;
        #        }
        #
        #        //
        #        // Is it part of model
        #        //
        #        if (versioncontrol.parmSysVersionControlSystem() && versioncontrol.parmSysVersionControlSystem().parmModelFolders())
        #        {
        #            enum = versioncontrol.parmSysVersionControlSystem().parmModelFolders().getEnumerator();
        #            while (enum.moveNext())
        #            {
        #                if (strScan(filename, strFmt('/%1/', enum.currentKey()), 1, strLen(filename)))
        #                    return true;
        #            }
        #        }
        #
        #        //
        #        // Is it placed in an additional folder?
        #        //
        #        if (versioncontrol.parmSysVersionControlSystem() && versioncontrol.parmSysVersionControlSystem().parmAdditionalFolders())
        #        {
        #            enum = versioncontrol.parmSysVersionControlSystem().parmAdditionalFolders().getEnumerator();
        #            while (enum.moveNext())
        #            {
        #                if (strScan(filename, strFmt('/%1/', enum.currentKey()), 1, strLen(filename)))
        #                    return true;
        #            }
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #newControllable
        #/// <summary>
        #/// Constructs a new Controllable.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// A <c>SysVersionControlItemPath</c> for the controllable.
        #/// </param>
        #/// <param name="_filename">
        #/// The local file path of the element under version control.
        #/// </param>
        #/// <param name="_useTreeNode">
        #/// A Boolean value that indicates whether a controllable can be created by using a tree node from the
        #/// AOT.
        #/// </param>
        #/// <returns>
        #/// An instance of a class implementing the <c>SysVersionControllable</c> interface when the element is
        #/// supported; otherwise null.
        #/// </returns>
        #/// <remarks>
        #/// Set the value of the <paramref name="_useTreeNode" /> parameter to false to make sure that a
        #/// <c>SysTreeNodeVirtualDeleted</c> object is created for AOT elements.
        #/// </remarks>
        #public static client server SysVersionControllable newControllable(
        #    SysVersionControlItemPath _itemPath,
        #    Filename                  _filename,
        #    boolean                   _useTreeNode = true)
        #{
        #    TreeNode        treeNode;
        #    LanguageId      languageId;
        #    LabelModuleId   labelModuleId;
        #    #SysVersionControl
        #    #AOT
        #
        #    if (_itemPath && _useTreeNode)
        #    {
        #        treeNode = TreeNode::findNode(_itemPath);
        #        if (treeNode)
        #        {
        #            return SysTreeNode::newTreeNode(treeNode);
        #        }
        #    }
        #    //
        #    // _itemPath = "\labels\axsysen-us.ald"
        #    //
        #    if (match(#LabelMatch, _itemPath))
        #    {
        #        [labelModuleId, languageId] = SysLabelFile::splitLabelFileName(_itemPath);
        #        return SysLabelFile::newLanguageModule(languageId, labelModuleId);
        #    }
        #
        #    //
        #    // _itemPath = "\definition\VCSDef.xml"
        #    //
        #    if (match(#DefFileMatch, _itemPath))
        #    {
        #        return SysVersionControlDefFile::newVCSDefFile();
        #    }
        #
        #    //
        #    // _itemPath = "*\Model"
        #    //
        #    if (match(#ModelMatch, _itemPath))
        #    {
        #        return SysVersionControlModelFile::newItemPath(_itemPath);
        #    }
        #
        #    if (match(#VSProjectsPath, _itemPath))
        #    {
        #        return SysTreeNodeVirtualDeleted::newTreeNodePath(_itemPath);
        #    }
        #
        #    if (_itemPath && SysVersionControlTmpItem::isValidXPOFile(_filename))
        #    {
        #        return SysTreeNodeVirtualDeleted::newTreeNodePath(_itemPath);
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #releaseControllable
        #/// <summary>
        #///    Releases a tree node object from memory if the specified <c>SysVersionControllable</c> object is a
        #///    node of a <c>SysTreeNode</c> class tree.
        #/// </summary>
        #/// <param name="_controllable">
        #///    The specified <c>SysVersionControllable</c> object.
        #/// </param>
        #public static client void releaseControllable(SysVersionControllable _controllable)
        #{
        #    SysTreeNode sysTreeNode;
        #    TreeNode nodeToRelease;
        #
        #    // if the controllable is a treenode, then release it.
        #    sysTreeNode = _controllable as SysTreeNode;
        #    if (sysTreeNode)
        #    {
        #        nodeToRelease = sysTreeNode.parmTreeNode() as TreeNode;
        #        if (nodeToRelease &&
        #            TreeNode::isNodeReferenceValid(nodeToRelease) &&
        #            nodeToRelease.treeNodeType().isConsumingMemory())
        #        {
        #            nodeToRelease.treeNodeRelease();
        #        }
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpUnwantedNames unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpUnwantedNames
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlTmpUnwantedNames
      Label               #@SYS94372
      TableType           #InMemory
      Origin              #{2C210110-0000-1000-27FE-48E7B1680670}
      LegacyId            #272
    ENDPROPERTIES
    
    FIELDS
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Label               #@SYS94372
          Table               #SysVersionControlTmpUnwantedNames
          Origin              #{2A040001-0110-1000-4E61-6D6500000000}
          LegacyId            #1
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpUnwantedTypes unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpUnwantedTypes
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlTmpUnwantedTypes
      Label               #@SYS94373
      TableType           #InMemory
      Origin              #{2C210112-0000-1000-27FE-48E753DB02E9}
      LegacyId            #274
    ENDPROPERTIES
    
    FIELDS
      FIELD #ObjectType
        ENUM
        PROPERTIES
          Name                #ObjectType
          Label               #@SYS94373
          HelpText            #@SYS94413
          Table               #SysVersionControlTmpUnwantedTypes
          Origin              #{2A0A0001-0112-1000-1F25-E97463745479}
          LegacyId            #1
          EnumType            #UtilElementType
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpWorkItems unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpWorkItems
    EnforceFKRelation 1
    PROPERTIES
      Name                #SysVersionControlTmpWorkItems
      Label               #@SYS341266
      TableType           #InMemory
      Systemtable         #Yes
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      TableGroup          #Main
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      DeveloperDocumentation  #@SYS341272
      Origin              #{167EDF63-120E-47B2-8DB7-5653EFF1D774}
    ENDPROPERTIES
    
    FIELDS
      FIELD #CheckInAction
        ENUM
        PROPERTIES
          Name                #CheckInAction
          Table               #SysVersionControlTmpWorkItems
          Origin              #{F86256E6-4490-4112-850D-A8D3DE2D7BB8}
          EnumType            #SysVersionControlWorkItemAction
        ENDPROPERTIES
        
      FIELD #ID
        INT
        PROPERTIES
          Name                #ID
          Table               #SysVersionControlTmpWorkItems
          Origin              #{1843C666-427F-47C4-BF07-028D929029B2}
          ExtendedDataType    #SysVersionControlWorkItemId
        ENDPROPERTIES
        
      FIELD #Selected
        ENUM
        PROPERTIES
          Name                #Selected
          Label               #@SYS28109
          HelpText            #@SYS341276
          Table               #SysVersionControlTmpWorkItems
          Origin              #{68BEFDB0-9F0D-43FE-A545-F967733709B6}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #State
        STRING
        PROPERTIES
          Name                #State
          Table               #SysVersionControlTmpWorkItems
          Origin              #{E99F83E9-594D-4EE6-985D-FF2D4D231302}
          ExtendedDataType    #SysVersionControlWorkItemState
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #Title
        STRING
        PROPERTIES
          Name                #Title
          Table               #SysVersionControlTmpWorkItems
          Origin              #{B3B9EDAD-F959-49AE-8267-73B7ACAB0696}
          ExtendedDataType    #SysVersionControlWorkItemTitle
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #Type
        STRING
        PROPERTIES
          Name                #Type
          Table               #SysVersionControlTmpWorkItems
          Origin              #{1BF8E3EE-0F45-41AD-998F-BA04FCF03871}
          ExtendedDataType    #SysVersionControlWorkItemType
          StringSize          #255
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #CheckInActionData
        PROPERTIES
          Name                #CheckInActionData
          Label               #@SYS341273
        ENDPROPERTIES
        
        GROUPFIELDS
          #Selected
          #ID
          #Title
          #CheckInAction
          #State
          #Type
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ItemId
      PROPERTIES
        Name                #ItemId
        AllowDuplicates     #No
        Origin              #{16DD105A-C563-415A-9322-C219595EC7BA}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ID
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #containsItemById
        #/// <summary>
        #/// Checks whether a table contains a work item with the specified ID.
        #/// </summary>
        #/// <param name="workItemId">
        #/// The ID of the work item.
        #/// </param>
        #/// <returns>
        #/// true if the table contains the specified item; otherwise, false.
        #/// </returns>
        #public boolean containsItemById(SysVersionControlWorkItemId workItemId)
        #{
        #    select count(recId) from this
        #        where this.ID == workItemId;
        #
        #    return this.RecId == 1;
        #}
      ENDSOURCE
      SOURCE #numberOfWorkItems
        #/// <summary>
        #/// Gets the number of work items in the specified table.
        #/// </summary>
        #/// <param name="workItems">
        #/// A table to query.
        #/// </param>
        #/// <returns>
        #/// The total number of work items.
        #/// </returns>
        #public static int64 numberOfWorkItems(SysVersionControlTmpWorkItems workItems)
        #{
        #    select count(recId) from workItems;
        #    return workItems.RecId;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSynchronizeLogHelper unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSynchronizeLogHelper
    PROPERTIES
      Name                #SysVersionControlSynchronizeLogHelper
      Origin              #{9309A2AE-F3D5-49C5-81BB-E7D8E5CCAE68}
    ENDPROPERTIES
    
    METHODS
      SOURCE #scanPolicies
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Policies.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanPolicies()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Security*Policies*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Policies is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanProcessCycles
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Process cycles.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanProcessCycles()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Security*Process cycles*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Process cycles is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanSSRSReportImages
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for SSRS Reports.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanSSRSReportImages()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*SSRS Reports*Report images*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                          ;
        #        sysVersionControlSynchronizeBatchNum++                                                                   ;
        #        info(strFmt('Synchronization Batch number for SSRS Report images is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanSSRSReportDatasources
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for SSRS Reports.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanSSRSReportDatasources()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*SSRS Reports*Report datasources*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                          ;
        #        sysVersionControlSynchronizeBatchNum++                                                                   ;
        #        info(strFmt('Synchronization Batch number for SSRS Report datasources is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanSSRSReportStyleTemplates
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for SSRS Reports style templates.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanSSRSReportStyleTemplates()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*SSRS Reports*Report style templates*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                          ;
        #        sysVersionControlSynchronizeBatchNum++                                                                   ;
        #        info(strFmt('Synchronization Batch number for SSRS Report style templates is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanDataSets
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Data sets.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanDataSets()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data sets*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Data sets is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanMacros
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Macros.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanMacros()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Macros*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Macros is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanPerspectives
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Perspectives.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanPerspectives()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Perspectives*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Perspectives is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanTableCollections
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Table collections.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanTableCollections()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Table collections*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Table collections is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanSecurityKeys
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Security keys.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanSecurityKeys()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Security keys*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Security keys is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanConfigurationKeys
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Configuration keys.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanConfigurationKeys()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Configuration keys*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Configuration keys is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanLicenseCodes
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for License codes.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanLicenseCodes()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*License codes*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for License codes is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanViews
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Views.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanViews()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Views*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Views is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanMaps
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Maps.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanMaps()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Maps*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Maps is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanParts
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Parts.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanParts()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Parts*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Parts is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanWorkflow
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Workflow.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanWorkflow()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Workflow*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Workflow is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanCodePermissions
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Code permissions.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanCodePermissions()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Security*Code permissions*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Code permissions is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanServices
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Services.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanServices()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Services*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Services is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanMenus
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Menus.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanMenus()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Menus*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Menus is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanPrivileges
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Privileges.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanPrivileges()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Securtiy*Privileges*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Privileges is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanDuties
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Duties.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanDuties()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Security*Duties*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Duties is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanRoles
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Roles.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanRoles()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Security*Roles*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Roles is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanSSRSReports
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for SSRS Reports.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanSSRSReports()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*SSRS Reports*Reports*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                          ;
        #        sysVersionControlSynchronizeBatchNum++                                                                   ;
        #        info(strFmt('Synchronization Batch number for SSRS Reports is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanJobs
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Jobs.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanJobs()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Jobs*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                  ;
        #        sysVersionControlSynchronizeBatchNum++                                                           ;
        #        info(strFmt('Synchronization Batch number for Jobs is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanSharedProjects
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Shared projects.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanSharedProjects()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Projects*Shared*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Shared projects is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanPrivateProjects
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Private projects.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanPrivateProjects()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Projects*Private*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Private projects is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanMenuItems
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Menu items.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanMenuItems()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Menu items*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Menu items is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanBaseEnums
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Base Enums.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanBaseEnums()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Base Enums*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Base Enums is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanExtendedDataTypes
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Extended data types.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanExtendedDataTypes()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Extended data types*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Extended data types is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanTables
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Tables.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanTables()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Data dictionary*Tables*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Tables is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanForms
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Forms.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanForms()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Forms*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for Forms is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #scanClasses
        #/// <summary>
        #///     Updates BatchNum from <c>SysVersionControlSynchronizeLog</c> table for Classes.
        #/// </summary>
        #/// <exception cref="Exception::UpdateConflictNotRecovered">
        #///     Thrown when a deadlock is unable to recover
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #///     General exception
        #/// </exception>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #private void scanClasses()
        #{
        #    ttsBegin;
        #    try
        #    {
        #        while select forUpdate sysVersionControlSynchronizeLog
        #            where 1==1
        #                && sysVersionControlSynchronizeLog.Processed == NoYes::No
        #                && sysVersionControlSynchronizeLog.ItemPath like '*Classes*'
        #        {
        #            shouldIncrementBatchNum                  = true                                    ;
        #            sysVersionControlSynchronizeLog.BatchNum = sysVersionControlSynchronizeBatchNum + 1;
        #            sysVersionControlSynchronizeLog.update()                                           ;
        #        }
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        if(xSession::currentRetryCount() < #RetryNum)
        #            retry;
        #        else
        #            throw Exception::UpdateConflictNotRecovered;
        #    }
        #    catch(Exception::UpdateConflictNotRecovered)
        #    {
        #        error('Deadlock occurred while updating. Unable to recover.');
        #    }
        #    catch(Exception::Error)
        #    {
        #        throw Exception::Error;
        #    }
        #    ttsCommit;
        #
        #    if(shouldIncrementBatchNum)
        #    {
        #        shouldIncrementBatchNum = false                                                                     ;
        #        sysVersionControlSynchronizeBatchNum++                                                              ;
        #        info(strFmt('Synchronization Batch number for classes is %1', sysVersionControlSynchronizeBatchNum));
        #    }
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    shouldIncrementBatchNum = false;
        #    this.getLastBatchNum()         ;
        #
        #    setPrefix('Please manually process the following batch numbers');
        #
        #    this.scanTables()                  ; //child of Data Dictionary
        #    this.scanMaps()                    ; //child of Data Dictionary
        #    this.scanViews()                   ; //child of Data Dictionary
        #    this.scanExtendedDataTypes()       ; //child of Data Dictionary
        #    this.scanBaseEnums()               ; //child of Data Dictionary
        #    this.scanLicenseCodes()            ; //child of Data Dictionary
        #    this.scanConfigurationKeys()       ; //child of Data Dictionary
        #    this.scanSecurityKeys()            ; //child of Data Dictionary
        #    this.scanTableCollections()        ; //child of Data Dictionary
        #    this.scanPerspectives()            ; //child of Data Dictionary
        #
        #    this.scanMacros()                  ;
        #    this.scanClasses()                 ;
        #    this.scanForms()                   ;
        #    this.scanParts()                   ;
        #    this.scanDataSets()                ;
        #
        #    this.scanSSRSReports()             ; //child of SSRS Reports
        #    this.scanSSRSReportStyleTemplates(); //child of SSRS Reports
        #    this.scanSSRSReportDatasources()   ; //child of SSRS Reports
        #    this.scanSSRSReportImages()        ; //child of SSRS Reports
        #
        #    this.scanJobs()                    ;
        #    this.scanMenus()                   ;
        #    this.scanMenuItems()               ;
        #    this.scanServices()                ;
        #    this.scanWorkflow()                ;
        #
        #    this.scanCodePermissions()         ; //child of Security
        #    this.scanPrivileges()              ; //child of Security
        #    this.scanDuties()                  ; //child of Security
        #    this.scanRoles()                   ; //child of Security
        #    this.scanProcessCycles()           ; //child of Security
        #    this.scanPolicies()                ; //child of Security
        #
        #    this.scanPrivateProjects()         ; //child of Projects
        #    this.scanSharedProjects()          ; //child of Projects
        #}
      ENDSOURCE
      SOURCE #getLastBatchNum
        #private void getLastBatchNum()
        #{
        #    select firstOnly BatchNum
        #        from sysVersionControlSynchronizeLog
        #        order by sysVersionControlSynchronizeLog.BatchNum desc;
        #    sysVersionControlSynchronizeBatchNum = sysVersionControlSynchronizeLog.BatchNum;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///     The <c>SysVersionControlSynchronizeLogHelper</c> class handles version control system actions invoked through the
        #///     <c>SysVersionControlSynchronizeLog</c> form.
        #/// </summary>
        #/// <author>
        #///     Kevin Kabatra based on work by Viktor Ristovski
        #/// </author>
        #//// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlSynchronizeLogHelper
        #{
        #    #define.RetryNum(5)
        #    SysVersionControlSynchronizeLog      sysVersionControlSynchronizeLog     ;
        #    SysVersionControlSynchronizeBatchNum sysVersionControlSynchronizeBatchNum;
        #    boolean                              shouldIncrementBatchNum             ;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlAddIn unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlAddIn
    PROPERTIES
      Name                #SysVersionControlAddIn
      RunOn               #Client
      Origin              #{2D160349-0000-1000-6C62-ED34075D1BAB}
      LegacyId            #841
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysVersionControlAddIn</c> class handles version control system actions invoked through the Add-Ins menu and menu item buttons.
        #/// </summary>
        #/// <remarks>
        #///    If new actions are added, this class must be updated to reflect the changes.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlAddIn
        #{
        #}
      ENDSOURCE
      SOURCE #doItem
        #/// <summary>
        #///    Invokes a version control action on a <c>SysVersionControlTmpItem</c> table record.
        #/// </summary>
        #/// <param name="_callerItem">
        #///    The <c>SysVersionControlTmpItem</c> table record the action should be invoked upon.
        #/// </param>
        #/// <param name="_action">
        #///    The action to perform.
        #/// </param>
        #/// <param name="_batchNum">
        #///    In case the action is "Undo check-out", this optional parameter can be used to group multiple <c>SysVersionControlTmpItem</c> records into the same Synchronization log.
        #/// </param>
        #static protected void doItem(
        #    SysVersionControlTmpItem                _callerItem,
        #    SysVersionControlAction                 _action,
        #    SysVersionControlSynchronizeBatchNum    _batchNum = SysVersionControlSynchronizeLog::nextBatchNum()
        #)
        #{
        #    SysVersionControllable          controllable;
        #    Filename                        getFilename;
        #    SysVersionControlSyncParameters syncParm;
        #
        #    controllable = _callerItem.getControllable(_action == SysVersionControlAction::UndoCheckOut);
        #
        #    if (controllable)
        #    {
        #        switch (_action)
        #        {
        #            case SysVersionControlAction::Get:
        #                setprefix("@SYS85749");
        #                if (!(controllable is SysTreeNodeVirtualDeleted) &&
        #                    versioncontrol.parmSysVersionControlSystem().allowEdit(controllable))
        #                {
        #                    getFilename = versioncontrol.parmSysVersionControlSystem().getItemVersion(controllable, _callerItem);
        #                    controllable.fromFile(getFilename);
        #                    info(strfmt("@SYS85990", _callerItem.Version, _callerItem.ItemPath));
        #                }
        #                else
        #                {
        #                    syncParm = SysVersionControlSyncParameters::construct();
        #                    syncParm.parmSilent(false);
        #                    syncParm.parmForce(true);
        #                    syncParm.parmVersion(_callerItem.Version);
        #                    syncParm.parmChangeListNumber(_callerItem.ChangeNumber);
        #                    syncParm.parmDeleteLocalObjects(false);
        #                    syncParm.parmLabel(_callerItem.Label);
        #                    syncParm.parmBatchNumber(_batchNum);
        #                    syncParm.parmDateTime(DateTimeUtil::newDateTime(_callerItem.vcsDate, _callerItem.vcsTime));
        #
        #                    if (!prmisdefault(_batchNum))
        #                    {
        #                        //Import is done in an outer loop
        #                        syncParm.parmSkipImport(true);
        #                    }
        #                    versioncontrol.parmSysVersionControlSystem().commandSynchronize(controllable, syncParm);
        #                }
        #                break;
        #            default:
        #                if (controllable)
        #                {
        #                    switch (_action)
        #                    {
        #                        case SysVersionControlAction::UndoCheckOut:
        #                            setprefix("@SYS83894");
        #                            if (prmisdefault(_batchNum))
        #                            {
        #                                versioncontrol.parmSysVersionControlSystem().commandUndoCheckOut(controllable, true);
        #                            }
        #                            else
        #                            {
        #                                versioncontrol.parmSysVersionControlSystem().commandUndoCheckOut(controllable, true, _batchNum);
        #                            }
        #                            versioncontrol.colorAOT();
        #                            break;
        #                    }
        #                }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #doTreenode
        #/// <summary>
        #///    Invokes a version control action on a <c>TreeNode.</c>
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The <c>TreeNode</c> the action is invoked upon.
        #/// </param>
        #/// <param name="_action">
        #///    The action to perform.
        #/// </param>
        #static protected void doTreenode(TreeNode _treeNode, SysVersionControlAction _action)
        #{
        #    switch (_action)
        #    {
        #        case SysVersionControlAction::CheckIn:
        #            versioncontrol.checkIn(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::CheckOut:
        #            versioncontrol.checkOut(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::UndoCheckOut:
        #            versioncontrol.undoCheckOut(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::Synchronize:
        #            versioncontrol.getLatestVersion(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::Add:
        #            versioncontrol.create(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::Delete:
        #            versioncontrol.delete(_treeNode);
        #            break;
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    SysVersionControlTmpItem                callerItem;
        #    SysVersionControlAction                 action;
        #    SysContextMenu                          sysContextMenu;
        #    TreeNode                                treeNode;
        #    TreeNode                                rootElementNode;
        #    FormRun                                 formRun;
        #    FormDataSource                          datasource;
        #    SysVersionControlSynchronizeBatchNum    batchNum;
        #
        #    #SysVersionControl
        #
        #    if (args.parmEnumType() == enumnum(SysVersionControlAction))
        #    {
        #        action = args.parmEnum();
        #
        #        if (SysContextMenu::startedFrom(args))
        #        {
        #            sysContextMenu = args.parmObject();
        #            treeNode = sysContextMenu.getFirstNode();
        #            while (treeNode)
        #            {
        #                rootElementNode = SysTreeNode::getRootElement(treeNode);
        #                if (rootElementNode)
        #                    SysVersionControlAddIn::doTreenode(rootElementNode, action);
        #                treeNode = sysContextMenu.next();
        #            }
        #        }
        #        else
        #        {
        #            if (args &&
        #                args.record() &&
        #                args.record() is SysVersionControlTmpItem)
        #            {
        #                infolog.globalCache().remove(classstr(SysVersionControlSystem), #VCUndoCheckOutButton);
        #                formRun = args.caller();
        #                if (formRun)
        #                {
        #                    datasource = formRun.dataSource(1);
        #                    if (datasource.anyMarked())
        #                    {
        #                        batchNum = SysVersionControlSynchronizeLog::nextBatchNum();
        #                        callerItem = datasource.getFirst(true) as SysVersionControlTmpItem;
        #                        while (callerItem)
        #                        {
        #                            SysVersionControlAddIn::doItem(callerItem, action, batchNum);
        #                            callerItem = datasource.getNext() as SysVersionControlTmpItem;
        #                        }
        #                        SysVersionControlSynchronizeLog::processBatchNum(batchNum);
        #                    }
        #                    else
        #                    {
        #                        callerItem = args.record() as SysVersionControlTmpItem;
        #                        SysVersionControlAddIn::doItem(callerItem, action);
        #                    }
        #                }
        #                else
        #                {
        #                    callerItem = args.record() as SysVersionControlTmpItem;
        #                    SysVersionControlAddIn::doItem(callerItem, action);
        #                }
        #                infolog.globalCache().remove(classstr(SysVersionControlSystem), #VCUndoCheckOutButton);
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlBackendDirSupport unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControlBackendDirSupport
    PROPERTIES
      Name                #SysVersionControlBackendDirSupport
      Origin              #{B3C4296A-D32E-4BDE-8477-9A1816959825}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public interface SysVersionControlBackendDirSupport
        #{
        #}
      ENDSOURCE
      SOURCE #directoryGetVersion
        #/// <summary>
        #/// Gets the directory of the specific version.
        #/// </summary>
        #/// <param name="_localDirectoryPath">The local directory path.</param>
        #/// <param name="_item">The instance of the source control item.</param>
        #/// <returns>The path where the directory was extracted.</returns>
        #public FilePath directoryGetVersion(FilePath _localDirectoryPath, SysVersionControlTmpItem _item)
        #{
        #}
        #
      ENDSOURCE
      SOURCE #directoryHistory
        #/// <summary>
        #/// Gets the history for the directory path.
        #/// </summary>
        #/// <param name="_localDirectoryPath">
        #/// The local path of the directory.
        #/// </param>
        #/// <returns>
        #/// The instance of the version control item that describes the history.
        #/// </returns>
        #public SysVersionControlTmpItem directoryHistory(FilePath _localDirectoryPath)
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlChangeLists unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControlChangeLists
    PROPERTIES
      Name                #SysVersionControlChangeLists
      Origin              #{2D1C034B-0000-1000-7FC3-846B1C58B61B}
      LegacyId            #843
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlChangeLists</c> class handles the concept of a changelist. A changelist is
        #/// several changed files grouped in one atomic change.
        #/// </summary>
        #/// <remarks>
        #/// Classes that implement this interface should also extend the <c>SysVersionControlSystem</c> class.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #interface SysVersionControlChangeLists
        #{
        #}
      ENDSOURCE
      SOURCE #getChangeLists
        #public SysVersionControlPendingChangeList getChangeLists()
        #{
        #}
      ENDSOURCE
      SOURCE #getChangeNumberContents
        #/// <summary>
        #/// Gets a collection of objects that are included in a specific changelist.
        #/// </summary>
        #/// <param name="_changeNumber">
        #/// The changelist from which to retrieve the information.
        #/// </param>
        #/// <param name="_changeDateTime">
        #/// The time and date when the change was submitted.
        #/// </param>
        #/// <param name="_changeComments">
        #/// The comments that are associated with the change.
        #/// </param>
        #/// <returns>
        #/// The <c>SysVersionControlTmpItem</c> table that contains a record for each change in the changelist.
        #/// </returns>
        #public SysVersionControlTmpItem getChangeNumberContents(SysVersionControlChangeNumber _changeNumber, utcdatetime _changeDateTime, SysVersionControlItemComment _changeComments)
        #{
        #}
      ENDSOURCE
      SOURCE #getChangesHistory
        #/// <summary>
        #///    Gets a collection of <c>SysVersionControlChangeLists</c> records that describe all changes.
        #/// </summary>
        #/// <returns>
        #///    A temporary <c>SysVersionControlTmpChange</c> table that contains a record for each change.
        #/// </returns>
        #public SysVersionControlTmpChange getChangesHistory()
        #{
        #}
      ENDSOURCE
      SOURCE #getPendingChangeListContents
        #public SysVersionControlTmpItem getPendingChangeListContents(str _changeList, boolean _silent = false)
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlCreateProject unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlCreateProject
    PROPERTIES
      Name                #SysVersionControlCreateProject
      Extends             #RunBase
      Origin              #{2D1E317D-0000-1000-72B7-E95CA714789B}
      LegacyId            #12669
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysVersionControlCreateProject</c> class creates a private project from the list of checked
        #///    out elements.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlCreateProject extends RunBase
        #{
        #    PrivateProjectName projectName;
        #    DialogField projectNameField;
        #    SysProjectFilterRunBase projectFilter;
        #
        #    SysVersionControlChangeListId changeList;
        #    SysVersionControlSystem sysVersionControlSystem;
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        projectName
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #createProject
        #/// <summary>
        #///    Creates a private project.
        #/// </summary>
        #/// <param name="_projectName">
        #///    The name of the project to create.
        #/// </param>
        #protected void createProject(SharedProjectName _projectName)
        #{
        #    ProjectNode projectNode;
        #    ;
        #    SysUpgradeProject::delete(_projectName, ProjectSharedPrivate::ProjPrivate);
        #
        #    projectNode = SysTreeNode::createProject(_projectName);
        #    projectFilter = new SysProjectFilterRunBase();
        #    projectFilter.parmProjectNode(projectNode);
        #    projectFilter.grouping(SysProjectGrouping::AOT);
        #}
      ENDSOURCE
      SOURCE #dialog
        #/// <summary>
        #///    Constructs the dialog box for the class.
        #/// </summary>
        #/// <returns>
        #///    The dialog box for this class.
        #/// </returns>
        #public Object dialog()
        #{
        #    DialogRunbase dialog = DialogRunbase::newOnClient("@SYS28969", this);
        #
        #    dialog.windowType(FormWindowType::Workspace);
        #    projectNameField = dialog.addField(extendedtypestr(PrivateProjectName));
        #    projectNameField.value(projectName);
        #
        #    return dialog;
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #/// <summary>
        #///    Extracts the values from the dialog.
        #/// </summary>
        #/// <returns>
        #///    true if the values can be extracted from the dialog; otherwise, false.
        #/// </returns>
        #public boolean getFromDialog()
        #{
        #    boolean ret = super();
        #
        #    projectName = projectNameField.value();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #initParmDefault
        #/// <summary>
        #/// Initializes the internal variables.
        #/// </summary>
        #/// <remarks>
        #/// This method is called when no <c>SysLastValue</c> record can be found after a call to the
        #/// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
        #/// </remarks>
        #public void initParmDefault()
        #{
        #    #define.defaultName('PendingObjects')
        #    super();
        #    projectName = #defaultName;
        #}
      ENDSOURCE
      SOURCE #lastValueDataAreaId
        #public dataAreaId lastValueDataAreaId()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
        #    super();
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion,#CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmChangeList
        #public SysVersionControlChangeListId parmChangeList(SysVersionControlChangeListId _changeList = changeList)
        #{
        #    changeList = _changeList;
        #
        #    return changeList;
        #}
      ENDSOURCE
      SOURCE #parmProjectName
        #public PrivateProjectName parmProjectName(PrivateProjectName _projectName = projectName)
        #{
        #    ;
        #    projectName = _projectName;
        #
        #    return projectName;
        #}
        #
      ENDSOURCE
      SOURCE #parmSysVersionControlSystem
        #public SysVersionControlSystem parmSysVersionControlSystem(SysVersionControlSystem _sysVersionControlSystem = sysVersionControlSystem)
        #{
        #    sysVersionControlSystem = _sysVersionControlSystem;
        #
        #    return sysVersionControlSystem;
        #}
        #
      ENDSOURCE
      SOURCE #run
        #/// <summary>
        #/// Populates the project.
        #/// </summary>
        #public void run()
        #{
        #    #SysVersionControl
        #    SysVersionControlTmpItem item;
        #    SysVersionControlTmpItem pendingItems;
        #    TreeNode treeNode;
        #    UtilElements utilElements;
        #    SysVersionControlChangeLists sysVersionControlChangeLists = sysVersionControlSystem as SysVersionControlChangeLists;
        #    boolean added;
        #    SysVersionControllable controllable;
        #    SysTreeNodeChild child;
        #
        #    startLengthyOperation();
        #
        #    if (!sysVersionControlSystem)
        #        return;
        #
        #    this.createProject(projectName);
        #
        #    if (sysVersionControlChangeLists && changeList)
        #    {
        #        pendingItems = sysVersionControlChangeLists.getPendingChangeListContents(changeList);
        #    }
        #    else
        #    {
        #        pendingItems = sysVersionControlSystem.getCheckedOutItems();
        #    }
        #    item.setTmpData(pendingItems);
        #
        #    while select item
        #        where item.ItemPath != ''
        #    {
        #        if (strStartsWith(item.ItemPath, #LabelsLocalPath))
        #        {
        #            // Skip label files
        #            continue;
        #        }
        #
        #        added = false;
        #        treeNode = TreeNode::findNode(item.ItemPath);
        #        controllable = SysTreeNode::newTreeNode(treeNode);
        #        child = controllable as SysTreeNodeChild;
        #
        #        if (controllable && child)
        #        {
        #            treeNode = child.getParentContainer();
        #        }
        #
        #        if (SysVersionControlTmpItem::isValidXPOFile(item.InternalFilename) || child)
        #        {
        #            if (treeNode &&
        #                treeNode.handle() != classnum(ProjectNode))
        #            {
        #                utilElements = xUtilElements::findTreeNode(treeNode, true);
        #                if (utilElements.Name)
        #                {
        #                    added = true;
        #                    projectFilter.doUtilElements(utilElements);
        #                }
        #            }
        #        }
        #
        #        if (!added)
        #        {
        #            info(strfmt("@SYS316339", item.InternalFilename));
        #        }
        #    }
        #
        #    projectFilter.write();
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Version version     = RunBase::getVersion(packedClass);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = packedClass;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate(Object _calledFrom = null)
        #{
        #    boolean ret;
        #
        #    ret = super(_calledFrom);
        #
        #    if (!projectName)
        #    {
        #        ret = checkFailed(strfmt("@SYS50104", "@SYS6663"));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlCreateProject construct()
        #{
        #    return new SysVersionControlCreateProject();
        #}
        #
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    SysVersionControlCreateProject sysVersionControlCreateProject = SysVersionControlCreateProject::construct();
        #
        #    if (_args &&
        #        _args.caller() &&
        #        _args.caller() is SysSetupFormRun &&
        #        formHasMethod(_args.caller(), identifierstr(changeList)))
        #    {
        #        sysVersionControlCreateProject.parmChangeList(_args.caller().changeList());
        #    }
        #
        #    if (sysVersionControlCreateProject.prompt())
        #    {
        #        sysVersionControlCreateProject.run();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlCreateRepository unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlCreateRepository
    PROPERTIES
      Name                #SysVersionControlCreateRepository
      Extends             #RunBase
      RunOn               #Client
      Origin              #{2D21034E-0000-1000-D651-A89A6D012ECC}
      LegacyId            #846
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlCreateRepository</c> class is used to create the initial version control
        #/// foundation for all objects in the AOT. This class will perform an action similar to invoking Create
        #/// on each object.
        #/// </summary>
        #/// <remarks>
        #/// Execution time may vary, depending on the settings in the definition file. This is a time-consuming
        #/// process.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlCreateRepository extends RunBase
        #{
        #    QueryRun                        queryRun;
        #
        #    DialogField                     dialogComment;
        #    SysVersionControlItemComment    comment;
        #
        #    DialogField dialogModelId;
        #    ModelRecid modelId;
        #
        #    DialogField dialogRepositoryFolder;
        #    FilePath repositoryFolder;
        #
        #    boolean isFileBasedVCS;
        #
        #    #DEFINE.CurrentVersion(5)
        #    #localmacro.CurrentList
        #        comment,
        #        modelId,
        #        repositoryFolder
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #dialog
        #/// <summary>
        #/// Returns a check-in dialog for adding a model to version control.
        #/// interface.
        #/// </summary>
        #/// <returns>
        #/// A check-in dialog for adding a model to version control.
        #/// </returns>
        #public Object dialog()
        #{
        #    #File
        #    #ResAppl
        #
        #    DialogRunBase dialog = super();
        #    DialogText dialogHelpText;
        #
        #    //Make dialog MDI
        #    dialog.windowType(FormWindowType::Workspace);
        #    // Make the dialog modal.
        #    dialog.parmIsModal(true);
        #
        #    dialogHelpText = Dialog.addText("@SYS4000124");
        #    dialogHelpText.displayLengthValue(55);
        #    Dialog.addText(' '); // empty line
        #
        #    dialogComment = dialog.addField(extendedTypeStr(SysVersionControlItemComment));
        #
        #    if (versioncontrol.parmSysVersionControlSystem() &&
        #        versioncontrol.parmSysVersionControlSystem().supportCheckInWizard())
        #    {
        #        dialogComment.enabled(false);
        #        comment = '';
        #    }
        #
        #    dialogComment.value(comment);
        #
        #    if (isFileBasedVCS)
        #    {
        #        dialogModelId = dialog.addField(extendedTypeStr(ModelRecid));
        #        dialogModelId.value(modelId);
        #        dialogModelId.registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(SysVersionControlCreateRepository, lookupModel), this);
        #
        #        dialogRepositoryFolder = dialog.addField(extendedTypeStr(FilePath), "@SYS335506", "@SYS335507");
        #        dialogRepositoryFolder.value(repositoryFolder);
        #    }
        #
        #    return dialog;
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    boolean ret = super();
        #
        #    comment  = dialogComment.value();
        #
        #    if (isFileBasedVCS)
        #    {
        #        modelId = dialogModelId.value();
        #        repositoryFolder = dialogRepositoryFolder.value();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #initParmDefault
        #/// <summary>
        #/// Initializes the internal variables.
        #/// </summary>
        #/// <remarks>
        #/// This method is called when no <c>SysLastValue</c> record can be found when it calls the
        #/// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
        #/// </remarks>
        #public void initParmDefault()
        #{
        #    #define.modelFolderHere (@'\<Model folder>')
        #
        #    comment = '';
        #    if (isFileBasedVCS)
        #    {
        #        modelId = xInfo::getCurrentModelId();
        #        repositoryFolder = versioncontrol.parmSysVersionControlSystem().parmFolder();
        #        repositoryFolder += #modelFolderHere;
        #    }
        #}
      ENDSOURCE
      SOURCE #lookupModel
        #private void lookupModel(FormReferenceGroupControl _referenceGroupControl)
        #{
        #    SysModelStore::performReferenceGroupLookup(_referenceGroupControl);
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    QueryBuildRange queryBuildRange;
        #    Query query = new Query();
        #    QueryBuildDataSource qbds;
        #    QueryBuildDataSource qbds2;
        #    QueryBuildDataSource qbds3;
        #
        #    super();
        #
        #    isFileBasedVCS = SysVersionControlParameters::getVCSType() != SysVersionControlType::SysVersionControlMorphX;
        #
        #    qbds = query.addDataSource(tableNum(SysModelElement));
        #    qbds2 = qbds.addDataSource(tableNum(SysModelElementData));
        #    qbds2.joinMode(JoinMode::InnerJoin);
        #    qbds2.relations(true);
        #
        #    qbds3 = qbds2.addDataSource(tableNum(SysModelLayer));
        #    qbds3.fetchMode(QueryFetchMode::One2One);
        #    qbds3.addLink(fieldNum(SysModelElementData, Layer), fieldNum(SysModelLayer, RecId));
        #
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElement)).addRange(fieldNum(SysModelElement, Name));
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElement)).addRange(fieldNum(SysModelElement, ParentId));
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElement)).addRange(fieldNum(SysModelElement, ElementType));
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElement)).addRange(fieldNum(SysModelElement, AxId));
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElement)).addRange(fieldNum(SysModelElement, RootModelElement));
        #
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElementData)).addRange(fieldNum(SysModelElementData, Layer));
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElementData)).addRange(fieldNum(SysModelElementData, ModelId));
        #
        #    //
        #    // Allow shared+private projects in repository; but disallow other non-aot utilElements
        #    //
        #    queryBuildRange = query.dataSourceTable(tableNum(SysModelElement)).addRange(fieldNum(SysModelElement,DataAreaId));
        #    queryBuildRange.value(strFmt('((%1!=%2::%3) && (%1!=%2::%4))',fieldStr(SysModelElement,ElementType)
        #                                                                 ,enumStr(UtilElementType)
        #                                                                 ,queryValue(UtilElementType::ClassInternalHeader)
        #                                                                 ,queryValue(UtilElementType::TableInternalHeader)));
        #
        #    queryBuildRange.status(RangeStatus::Hidden);
        #
        #
        #    queryRun = new SysQueryRun(query);
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion,#CurrentList];
        #}
      ENDSOURCE
      SOURCE #prepareVCSModelFile
        #private void prepareVCSModelFile()
        #{
        #    #SysVersionControl
        #    Filename                modelManifestFile;
        #    str                     modelManifestFileContent;
        #    SysVersionControlModelFile vcsModelFile;
        #
        #    modelManifestFile = System.IO.Path::Combine(repositoryFolder, #ModelFileNameWithExtension);
        #
        #    if (!System.IO.File::Exists(modelManifestFile))
        #    {
        #        setPrefix("@SYS335716");
        #        modelManifestFileContent = SysModelStore::getModelManifest(any2int(modelId));
        #
        #        if (!modelManifestFileContent)
        #        {
        #            // Warning, something went wrong in getting the manifest
        #            warning(strFmt("@SYS335717"),
        #            '',
        #            SysInfoAction_MenuFunction::newMenuItem(menuitemActionStr(SysModelCreateModel), MenuItemType::Action));
        #            return;
        #        }
        #        else
        #        {
        #            vcsModelFile = SysVersionControlModelFile::construct();
        #            vcsModelFile.parmModelXml(XmlDocument::newXml(modelManifestFileContent));
        #            vcsModelFile.parmModelFolder(repositoryFolder);
        #        }
        #
        #        getPrefix();
        #    }
        #    else
        #    {
        #        vcsModelFile = SysVersionControlModelFile::construct();
        #        vcsModelFile.fromFile(modelManifestFile);
        #    }
        #
        #    versioncontrol.parmSysVersionControlSystem().commandAdd(vcsModelFile);
        #    vcsModelFile.addToDefinitionFile();
        #    versioncontrol.parmSysVersionControlSystem().addModelFolder(vcsModelFile);
        #}
      ENDSOURCE
      SOURCE #run
        #/// <summary>
        #/// Contains the code that does the actual job of the class.
        #/// </summary>
        #// AosRunMode::Client
        #public void run()
        #{
        #    UtilIdElements          utilIdElementsParent;
        #    SysModelLayer           modelLayer;
        #    SysModelElement         sysModelElement, rootModelElement;
        #    SysModelElementData     sysModelElementData;
        #    SysModelLayer           sysModelLayer;
        #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
        #    TreeNode                aotTreeNode;
        #    Set                     set = new Set(Types::String);
        #    TreeNodePath            path;
        #    UtilEntryLevel          childlayer;
        #    SysVersionControllable  controllable;
        #    SysLabelFile            sysLabelFile;
        #    boolean                 sharedProject;
        #    str                     projectName;
        #    int                     posOfProjectName;
        #    #SysVersionControl
        #    #AOT
        #
        #    setPrefix("@SYS85507");
        #
        #    if (this.validate())
        #    {
        #        startLengthyOperation();
        #
        #        infolog.globalCache().set(#VCSCache, #NoPrompt, true);
        #
        #        // Set modelId or layer.
        #        // Range by layer if morphX-VCS, otherwise by modelId
        #        if (!isFileBasedVCS)
        #        {
        #            select RecId from modelLayer where modelLayer.Layer == enum2int(currentAOLayer());
        #            queryRun.query().dataSourceTable(tableNum(SysModelElementData)).addRange(fieldNum(SysModelElementData, Layer)).value(queryValue(modelLayer.RecId));
        #        }
        #        else
        #        {
        #            // Extract the manifest from the selected model and serialize it, only if the model repository folder not already contains the model.xml
        #            this.prepareVCSModelFile();
        #            queryRun.query().dataSourceTable(tableNum(SysModelElementData)).addRange(fieldNum(SysModelElementData, ModelId)).value(queryValue(modelId));
        #        }
        #
        #        queryRun.reset();
        #
        #        while (queryRun.next())
        #        {
        #            path = '';
        #            controllable = null;
        #            if (queryRun.changed(tableNum(SysModelElement)))
        #            {
        #                sysModelElement = queryRun.get(tableNum(SysModelElement)) as SysModelElement;
        #                sysModelElementData = queryRun.get(tableNum(SysModelElementData)) as SysModelElementData;
        #                sysModelLayer = queryRun.get(tableNum(SysModelLayer)) as SysModelLayer;
        #
        #                select Name, ElementType from rootModelElement
        #                    where rootModelElement.RecId == sysModelElement.RootModelElement;
        #
        #                if (sysModelElement.ElementType == UtilElementType::LabelFile)
        #                {
        #                    continue;
        #                }
        #                if (sysModelElement.ElementType == UtilElementType::LabelFileLanguage &&
        #                    rootModelElement.ElementType == UtilElementType::LabelFile)
        #                {
        #                    sysLabelFile = SysLabelFile::newLanguageModule(strReplace(sysModelElement.Name, '_', '-'), rootModelElement.Name);
        #                    path = sysLabelFile.treeNode().treeNodePath();
        #                    controllable = sysLabelFile;
        #                }
        #                else
        #                {
        #                    childlayer = sysModelLayer.Layer;
        #
        #                    // Buffer a UtilIdElementParent for fetching the path
        #                    utilIdElementsParent.doClear();
        #                    utilIdElementsParent.ParentId = 0;
        #                    utilIdElementsParent.Name = rootModelElement.Name;
        #                    utilIdElementsParent.RecordType = rootModelElement.ElementType;
        #
        #                    path = xUtilIdElements::getNodePathRough(utilIdElementsParent);
        #                    sharedProject = false;
        #                    //special case for shared project node
        #                    if (!path && sysModelElement.ElementType == UtilElementType::SharedProject)
        #                    {
        #                        path = strFmt('%1\\%2', #ProjectSharedPath, sysModelElement.Name);
        #                        sharedProject = true;
        #                    }
        #
        #                    if (xUtilIdElements::isUnwantedObject(utilIdElementsParent))
        #                    {
        #                        warning(strFmt("@SYS85681", path));
        #                        continue;
        #                    }
        #                }
        #            }
        #
        #            //Could already by exported - as we find all objects (incl. methods, fields etc.)
        #            if (path && !set.in(path))
        #            {
        #                infolog.messageWin().addLine(path);
        #
        #                if (!controllable)
        #                {
        #                    if (!sharedProject)
        #                    {
        #                        aotTreeNode = TreeNode::findNode(path);
        #                    }
        #                    else
        #                    {
        #                        //special case for shared project node
        #                        posOfProjectName = strLen(strFmt('\\%1\\',#ProjectSharedPath));
        #                        projectName = subStr(path, posOfProjectName, maxInt());
        #                        aotTreeNode = SysTreeNode::getSharedProject().AOTfindChild(projectName);
        #                    }
        #
        #                    if (aotTreeNode &&
        #                        aotTreeNode.treeNodeType().isRootElement() &&
        #                        aotTreeNode.treeNodeType().isGetNodeInLayerSupported())
        #                    {
        #                        controllable = SysTreeNode::newTreeNode(aotTreeNode);
        #                    }
        #                }
        #
        #                if (controllable)
        #                {
        #                    //
        #                    // Does the file exists?
        #                    //
        #                    if (sysVersionControlSystem.allowCreate(controllable))
        #                    {
        #                        //
        #                        // Then add it
        #                        //
        #                        sysVersionControlSystem.commandAdd(controllable, comment);
        #                    }
        #                    else
        #                    {
        #                        //
        #                        // Already exists ->  Check out and overwrite
        #                        //
        #                        sysVersionControlSystem.commandCheckOut(controllable);
        #                        controllable.toFile(sysVersionControlSystem.fileName(controllable));
        #                    }
        #
        #                    //
        #                    // Dispose treenodes to free memory
        #                    //
        #                    controllable = null;
        #
        #                    if (aotTreeNode)
        #                    {
        #                        aotTreeNode.treeNodeRelease();
        #                        aotTreeNode = null;
        #                    }
        #                }
        #                else
        #                {
        #                    // Cannot find the layered node.
        #                    // This happens if two nodes with same type and name exist in two layers.
        #                    // (id can be identical but isn't required for this warning)
        #                    warning(strFmt("@SYS28152", path));
        #                }
        #
        #                set.add(path);
        #            }
        #
        #        }
        #        sysVersionControlSystem.createRepositoryEnd(comment);
        #
        #        infolog.globalCache().remove(#VCSCache, #NoPrompt);
        #    }
        #}
      ENDSOURCE
      SOURCE #showIndexFields
        #/// <summary>
        #/// Determines whether to show index fields.
        #/// </summary>
        #/// <param name="id">
        #/// The table ID of the table in the test.
        #/// </param>
        #/// <returns>
        #/// Always returns true.
        #/// </returns>
        #public boolean showIndexFields(TableId id)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #showQueryValues
        #/// <summary>
        #/// Determines whether a Select button is to be added to the dialog. If you change the return value to
        #/// true, the button will be added.
        #/// </summary>
        #/// <returns>
        #/// Always returns false.
        #/// </returns>
        #/// <remarks>
        #/// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
        #/// return a valid <c>queryRun</c> object.
        #/// </remarks>
        #public boolean showQueryValues()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Integer version = conPeek(packedClass, 1);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version, #CurrentList] = packedClass;
        #            break;
        #
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate(Object calledFrom = null)
        #{
        #    boolean ret = true;
        #    FilePath vcsRootRepository;
        #
        #    if (!versioncontrol.parmSysVersionControlSystem())
        #    {
        #        ret = checkFailed("@SYS85711");
        #    }
        #    else
        #    {
        #        if (!comment &&
        #            !versioncontrol.parmSysVersionControlSystem().supportCheckInWizard())
        #        {
        #            ret = checkFailed(strFmt("@SYS84753", "@SYS85716"));
        #        }
        #
        #        // Verify repository folder and model
        #        if (isFileBasedVCS)
        #        {
        #            if (repositoryFolder)
        #            {
        #                if (!WinAPI::folderExists(repositoryFolder))
        #                {
        #                    ret = checkFailed(strFmt("@SYS191440",repositoryFolder));
        #                }
        #                else
        #                {
        #                    vcsRootRepository = versioncontrol.parmSysVersionControlSystem().parmFolder();
        #                    // Validate specified model repository exists beneath VCS root repository.
        #                    if (!strStartsWith(repositoryFolder, vcsRootRepository) &&
        #                        strLen(repositoryFolder) > strLen(vcsRootRepository))
        #                    {
        #                        ret = checkFailed(strFmt("@SYS110339", repositoryFolder, vcsRootRepository));
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                ret = checkFailed(strFmt("@SYS50104","@SYS85727"));
        #            }
        #
        #            if (SysModelStore::modelExists(modelId))
        #            {
        #                // Disallow adding a model to VCS if the model is already under VCS
        #                if (!this.validateModelNotUnderVCS(modelId))
        #                {
        #                    ret = false;
        #                }
        #            }
        #            else
        #            {
        #                ret = checkFailed(strFmt("@SYS335358", SysModelStore::displayName(any2int(modelId)), currentAOLayer()));
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateModelNotUnderVCS
        #protected boolean validateModelNotUnderVCS(ModelRecid _modelId)
        #{
        #    boolean             ret = true;
        #
        #    if (versioncontrol.parmSysVersionControlSystem().parmModels().exists(_modelId))
        #    {
        #        ret = checkFailed(strFmt("@SYS344543", SysModelStore::modelId2Name(_modelId)));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlCreateRepository construct()
        #{
        #    return new SysVersionControlCreateRepository();
        #}
        #
      ENDSOURCE
      SOURCE #description
        #static public ClassDescription description()
        #{
        #    return "@SYS85507";
        #}
      ENDSOURCE
      SOURCE #main
        #// AosRunMode::Server
        #public static server void main(Args args)
        #{
        #    SysVersionControlCreateRepository sysVersionControlCreate  = SysVersionControlCreateRepository::construct();
        #
        #    if (sysVersionControlCreate.prompt())
        #    {
        #        sysVersionControlCreate.run();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlDefFile unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlDefFile
    PROPERTIES
      Name                #SysVersionControlDefFile
      Extends             #SysVersionControlFile
      RunOn               #Client
      Origin              #{2D18068D-0000-1000-6CB3-7D920461BBD0}
      LegacyId            #1677
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowCheckIn
        #public boolean allowCheckIn(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowMultipleCheckout
        #public boolean allowMultipleCheckout(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlDefFile extends SysVersionControlFile
        #{
        #    XmlDocument xml;
        #}
      ENDSOURCE
      SOURCE #findMatchingComparable
        #SysComparable findMatchingComparable(SysComparable dummy)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #forceSynchronize
        #public boolean forceSynchronize()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #parmXML
        #public XmlDocument parmXML(XmlDocument _xml = xml)
        #{
        #    ;
        #    xml = _xml;
        #    return xml;
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #public boolean preCheckInUpdate(Filename _filname, SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #toFile
        #public boolean toFile(FilenameSave _filename, boolean _creating = false)
        #{
        #    ;
        #    if(xml)
        #    {
        #        // BP deviation documented
        #        xml.save(_filename);
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #construct
        #protected static SysVersionControlDefFile construct()
        #{
        #    return new SysVersionControlDefFile();
        #}
        #
      ENDSOURCE
      SOURCE #newVCSDefFile
        #public static SysVersionControlDefFile newVCSDefFile()
        #{
        #    SysVersionControlDefFile    sysVCSDefFile;
        #    SysVersionControlTmpItem    tmpItem;
        #    SysVersionControlParameters versionControlParameters = SysVersionControlParameters::find();
        #    #SysVersionControl
        #    ;
        #    tmpItem.clear();
        #    tmpItem.InternalFilename = SysVersionControlParameters::getTargetRepositoryFolderPath() + #DefFile;
        #    tmpItem.ItemPath = #DefFile;
        #    tmpItem.Filename = SysVersionControlParameters::getTargetRepositoryFolderPath() + #DefFile;
        #    tmpItem.insert();
        #
        #    sysVCSDefFile = SysVersionControlDefFile::newVCSItem(tmpItem);
        #    return sysVCSDefFile;
        #}
      ENDSOURCE
      SOURCE #newVCSItem
        #public static SysVersionControlDefFile newVCSItem(SysVersionControlTmpItem _item)
        #{
        #    SysVersionControlDefFile sysVCDefFile = SysVersionControlDefFile::construct();
        #    ;
        #    sysVCDefFile.parmVCSItem(_item);
        #
        #    return sysVCDefFile;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFile unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlFile
    PROPERTIES
      Name                #SysVersionControlFile
      Extends             #SysVersionControllableBase
      RunOn               #Client
      Origin              #{2D1503EA-0000-1000-6CE9-37D1340B529A}
      LegacyId            #1002
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowCheckIn
        #public boolean allowCheckIn(SysVersionControlSettings _settings)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControlSettings _settings)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowLockDuringCheckIn
        #public boolean allowLockDuringCheckIn(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowMultipleCheckout
        #public boolean allowMultipleCheckout(SysVersionControlSettings _settings)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlFile extends SysVersionControllableBase implements SysComparable
        #{
        #    //
        #    // This is the default class for files in the version control system.
        #    // It is used when a better match can't be found.
        #    //
        #
        #    SysVersionControlTmpItem vcsItem;
        #
        #}
      ENDSOURCE
      SOURCE #comparableName
        #public str comparableName()
        #{
        #    return strfmt('%1 (Version %2)', vcsItem.ItemPath, vcsItem.Version);
        #}
      ENDSOURCE
      SOURCE #comparableTextList
        #public List comparableTextList(
        #    SysComparable               _topComparable,
        #    SysCompareContextProvider   _context,
        #    SysComparable               _matchingDummy = null)
        #{
        #    List comparableTextList = new List(Types::Record);
        #    TextBuffer textBuffer = new TextBuffer();
        #
        #    textBuffer.fromFile(vcsItem.fileName());
        #    comparableTextList.addEnd(SysComparableTmpText::newText(textBuffer.getText(), '', 0, true, false, false, false, false, false, false));
        #
        #    return comparableTextList;
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #}
      ENDSOURCE
      SOURCE #fileExtension
        #public Filename fileExtension()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #findMatchingComparable
        #SysComparable findMatchingComparable(SysComparable dummy)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #forceSynchronize
        #public boolean forceSynchronize()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fromFile
        #public void fromFile(FilenameOpen _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysComparableEnumerator getEnumerator()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #name
        #public str name()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #}
      ENDSOURCE
      SOURCE #onCheckOut
        #public void onCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #onComparableFocus
        #public void onComparableFocus()
        #{
        #}
      ENDSOURCE
      SOURCE #onComparableSelected
        #public void onComparableSelected()
        #{
        #}
      ENDSOURCE
      SOURCE #onUndoCheckOut
        #public void onUndoCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #parmVCSItem
        #public SysVersionControlTmpItem parmVCSItem(SysVersionControlTmpItem _vcsItem = vcsItem)
        #{
        #    ;
        #    vcsItem.data(_vcsItem);
        #
        #    return vcsItem;
        #}
        #
      ENDSOURCE
      SOURCE #preAddAction
        #/// <summary>
        #/// Executes an action before the add operation.
        #/// </summary>
        #public void preAddAction()
        #{
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #public boolean preCheckInUpdate(Filename _filname, SysVersionControlSettings _settings)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #versionControlFilePath
        #public Filename versionControlFilePath(boolean _currentLayer = true)
        #{
        #    return vcsItem.InternalFilename;
        #}
      ENDSOURCE
      SOURCE #versionControlItemPath
        #public SysVersionControlItemPath versionControlItemPath()
        #{
        #    return vcsItem.ItemPath;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlFile construct()
        #{
        #    return new SysVersionControlFile();
        #}
        #
      ENDSOURCE
      SOURCE #newVCSItem
        #public static SysVersionControlFile newVCSItem(SysVersionControlTmpItem _item)
        #{
        #    SysVersionControlFile sysVersionControlFile = SysVersionControlFile::construct();
        #    ;
        #    sysVersionControlFile.parmVCSItem(_item);
        #
        #    return sysVersionControlFile;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFilebasedBackEnd unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControlFilebasedBackEnd
    PROPERTIES
      Name                #SysVersionControlFilebasedBackEnd
      RunOn               #Client
      Origin              #{2D21361D-0000-1000-9F29-933081D833D0}
      LegacyId            #13853
    ENDPROPERTIES
    
    METHODS
      SOURCE #actionText
        #/// <summary>
        #/// Converts an action to the description of the back end of the action.
        #/// </summary>
        #/// <param name="_action">
        #/// The action to convert.
        #/// </param>
        #/// <returns>
        #/// The description of the back end of the action.
        #/// </returns>
        #/// <remarks>
        #/// The description of the back end of the action must match the populated values in the <c>SysVersionControlTmpItem.ActionText</c> table field.
        #/// </remarks>
        #public str actionText(SysVersionControlSystemFileAction _action)
        #{
        #}
      ENDSOURCE
      SOURCE #actionTextForCheckedOutFile
        #/// <summary>
        #///    Gets the action text for a file that is checked-out.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve the action text for.
        #/// </param>
        #/// <returns>
        #///    The action text for this file.
        #/// </returns>
        #public str actionTextForCheckedOutFile(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #changeListContents
        #/// <summary>
        #///    Gets the contents of a checked in change list.
        #/// </summary>
        #/// <param name="_number">
        #///    The specified change list number of which to retrieve the contents.
        #/// </param>
        #/// <returns>
        #///    The contents of the change list.
        #/// </returns>
        #/// <remarks>
        #///    The returned table contains one record for each file in the change list.
        #/// </remarks>
        #public SysVersionControlTmpItem changeListContents(SysVersionControlChangeNumber _number)
        #{
        #}
      ENDSOURCE
      SOURCE #changeListsPending
        #/// <summary>
        #/// Gets the pending change lists.
        #/// </summary>
        #/// <returns>
        #/// The pending change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each pending change list.
        #/// </remarks>
        #public SysVersionControlPendingChangeList changeListsPending()
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysVersionControlFilebasedBackEnd</c> class controls a file-based version control system
        #///    back end.
        #/// </summary>
        #/// <remarks>
        #///    All operations on this class are based on files and folders.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #interface SysVersionControlFilebasedBackEnd
        #{
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #/// <summary>
        #///    Checks in the repository.
        #/// </summary>
        #/// <param name="_comment">
        #///    The check in comment.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked at the end of the create repository operation.
        #/// </remarks>
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #}
      ENDSOURCE
      SOURCE #description
        #/// <summary>
        #/// Provides a description of the class.
        #/// </summary>
        #/// <returns>
        #/// The class description.
        #/// </returns>
        #public ClassDescription description()
        #{
        #}
      ENDSOURCE
      SOURCE #fileAddToVersionControl
        #/// <summary>
        #///    Adds a file to the version control system.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to add.
        #/// </param>
        #/// <param name="_comment">
        #///    Adds a comment about the file; optional.
        #/// </param>
        #/// <returns>
        #///    true if the file was added successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file will be available to other users after a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileAddToVersionControl(Filename _filename, SysVersionControlItemComment _comment = '')
        #{
        #}
      ENDSOURCE
      SOURCE #fileCheckedOutTo
        #/// <summary>
        #/// Returns a list of users to whom a file is checked out to.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// A comma separated list of users; otherwise, an empty string.
        #/// </returns>
        #public str fileCheckedOutTo(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileCheckout
        #/// <summary>
        #/// Checks out a file to modify.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to check out.
        #/// </param>
        #/// <returns>
        #/// true if the revision being checked out is the latest revision; otherwise false.
        #/// </returns>
        #/// <remarks>
        #/// If the revision being checked out is not the latest, typically because the file has been updated
        #/// remotely recently, MorphX will try a merge operation for certain file types, such as the label file.
        #/// </remarks>
        #public boolean fileCheckout(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileDelete
        #/// <summary>
        #///    Checks out a file for delete.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to delete.
        #/// </param>
        #/// <returns>
        #///    true if the file was deleted successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file is deleted in the system by a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileDelete(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileExists
        #/// <summary>
        #/// Verifies whether a file exists in the back end.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// true if the file exists in the back end; otherwise, false.
        #/// </returns>
        #public boolean fileExists(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileGetVersion
        #/// <summary>
        #/// Retrieves a version of a file from the back end storage.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to retrieve a version of.
        #/// </param>
        #/// <param name="_item">
        #/// The temporary record that corresponds to the version control item in the requested version.
        #/// </param>
        #/// <returns>
        #/// A fully qualified file name to a temporary location, where the version of the file has been saved.
        #/// </returns>
        #/// <remarks>
        #/// If the <see cref="T:SysVersionControlItemVersion" /><paramref name="version" /> is 0 (zero), the
        #/// latest version of the file is requested.If the <see cref="T:SysVersionControlItemVersion"
        #/// /><paramref name="version" /> is -1 (minus-one), the back end copy of the local version is
        #/// requested. That is the version the user received the last time that they synchronized.
        #/// </remarks>
        #public Filename fileGetVersion(Filename _filename, SysVersionControlTmpItem _item)
        #{
        #}
      ENDSOURCE
      SOURCE #fileHistory
        #/// <summary>
        #/// Retrieves a list of all revisions of a file from the back end storage.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to retrieve information for.
        #/// </param>
        #/// <returns>
        #/// A temporary table that contains a record describing each revision.
        #/// </returns>
        #public SysVersionControlTmpItem fileHistory(
        #    Filename                    _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileLock
        #/// <summary>
        #/// Locks a file.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to lock.
        #/// </param>
        #/// <returns>
        #/// true if the file is locked; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// While a file is locked, other users cannot check in changes to the file.
        #/// </remarks>
        #public boolean fileLock(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileRename
        #/// <summary>
        #///    Renames a file.
        #/// </summary>
        #/// <param name="_oldFilename">
        #///    The file to rename.
        #/// </param>
        #/// <param name="_newFilename">
        #///    The new name of the file.
        #/// </param>
        #/// <returns>
        #///    true if the file is renamed successfully; otherwise, false.
        #/// </returns>
        #public boolean fileRename(Filename _oldFilename, Filename _newFilename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileSetCheckin
        #/// <summary>
        #/// Checks in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to check in.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the check-in.
        #/// </param>
        #/// <param name="_changeList">
        #/// The changelist to check-in.
        #/// </param>
        #/// <param name="_workItems">
        #/// The work items associated with the files to check-in.
        #/// </param>
        #/// <returns>
        #/// true if the check-in is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Any file that is successfully checked in is also unlocked.
        #/// </remarks>
        #public boolean fileSetCheckin(
        #    Map _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #}
      ENDSOURCE
      SOURCE #fileSetResolve
        #/// <summary>
        #/// Resolves conflicts in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to resolve.
        #/// </param>
        #/// <returns>
        #/// true if the set of files are resolved successful; otherwise, false.
        #/// </returns>
        #public boolean fileSetResolve(Map _setOfFiles)
        #{
        #}
      ENDSOURCE
      SOURCE #filesPending
        #/// <summary>
        #/// Gets the pending files.
        #/// </summary>
        #/// <param name="_changeListId">
        #/// The ID of the pending change list of which to retrieve the contents.
        #/// </param>
        #/// <param name="_folder">
        #/// The repository folder.
        #/// </param>
        #/// <returns>
        #/// The pending files.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each pending file.
        #/// If _changeListId is blank, the contents of the default change list is returned.
        #/// </remarks>
        #public SysVersionControlTmpItem filesPending(
        #    SysVersionControlChangeListId _changeListId,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #}
      ENDSOURCE
      SOURCE #fileSynchronize
        #/// <summary>
        #/// Gets a specific version of a file in the back end version control system.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #/// An instance of the <c>SysVersionControlSyncParameters</c> class specifying the synchronization
        #/// parameters.
        #/// </param>
        #/// <returns>
        #/// A map that contains the file name and the action performed on the file.
        #/// </returns>
        #/// <remarks>
        #/// When <see cref="T:SysVersionControlItemVersion" /><c>version</c> is not specified the latest
        #/// version of the file will be retrieved.
        #/// </remarks>
        #public Map fileSynchronize(
        #    Filename _filename,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #}
      ENDSOURCE
      SOURCE #fileUndoCheckout
        #/// <summary>
        #///    Reverts the check-out of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file for which to undo check-out.
        #/// </param>
        #/// <returns>
        #///    A container with a Boolean value that indicates whether the check-out was successful and the name
        #///    of the file.
        #/// </returns>
        #public container fileUndoCheckout(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #fileUnlock
        #/// <summary>
        #///    Unlocks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to unlock.
        #/// </param>
        #/// <returns>
        #///    true if the file is unlocked successfully; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked, other users cannot check in changes to the file.
        #/// </remarks>
        #public boolean fileUnlock(Filename _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #folderChanges
        #/// <summary>
        #///    Returns all change lists for a folder.
        #/// </summary>
        #/// <param name="_folder">
        #///    The folder to retrieve information for.
        #/// </param>
        #/// <returns>
        #///    The change lists for a folder in the back end version control system.
        #/// </returns>
        #/// <remarks>
        #///    The returned table contains one record for each change list.
        #/// </remarks>
        #public SysVersionControlTmpChange folderChanges(FilePath _folder)
        #{
        #}
      ENDSOURCE
      SOURCE #folderSetSynchronize
        #/// <summary>
        #/// Retrieves the latest version of one or more folders.
        #/// </summary>
        #/// <param name="_folderSet">
        #/// A set that contains the folders to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #/// An instance of the <c>SysVersionControlSyncParameters</c> class specifying the synchronization
        #/// parameters.
        #/// </param>
        #/// <returns>
        #/// A map that contains the file name and the action performed on the file for each modified file.
        #/// </returns>
        #public Map folderSetSynchronize(
        #    Set _folderSet,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #}
      ENDSOURCE
      SOURCE #init
        #/// <summary>
        #///    Initializes the version control system back end.
        #/// </summary>
        #/// <param name="_parameters">
        #///    The parameters of the version control system back end.
        #/// </param>
        #/// <returns>
        #///    The connection status of the version control system back end.
        #/// </returns>
        #/// <remarks>
        #///    This method returns <see cref="T:SysVersionControlSystemStatus" /><c> WorkingOffline</c> when the
        #///    back end is unavailable and version control should be enabled, but limited to offline capabilities.
        #/// </remarks>
        #public SysVersionControlSystemStatus init(SysVersionControlParameters _parameters)
        #{
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #/// <summary>
        #/// Extracts parameter settings from an XML element.
        #/// </summary>
        #/// <param name="_topNode">
        #/// The <see cref="T:XmlElement" /> that contains the parameters.
        #/// </param>
        #public void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #}
      ENDSOURCE
      SOURCE #requireSyncBeforeCheckOut
        #/// <summary>
        #/// Requires synchronizing files before checking out.
        #/// </summary>
        #/// <returns>
        #/// true if the back end requires synchronization before check out; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end requires synchronization, Morphx will guarantee synchronization of
        #/// the file before check out.
        #/// </remarks>
        #public boolean requireSyncBeforeCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #/// <summary>
        #/// Returns the file name filter for the lookup dialog box.
        #/// </summary>
        #/// <returns>
        #/// The file name filter for the lookup dialog box.
        #/// </returns>
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #}
      ENDSOURCE
      SOURCE #reviewFileSet
        #/// <summary>
        #///    Creates a review file from a set of files in the back end version control system.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #///    The set of files to review.
        #/// </param>
        #/// <param name="_comment">
        #///    The comment to use for the review.
        #/// </param>
        #/// <param name="_fileNameOfReviewPackage">
        #///    The file name of the review file.
        #/// </param>
        #/// <param name="_folder">
        #///    The repository folder.
        #/// </param>
        #public void reviewFileSet(
        #    Set _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave _fileNameOfReviewPackage,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #}
      ENDSOURCE
      SOURCE #showInfo
        #/// <summary>
        #/// Shows the connection information of the back end.
        #/// </summary>
        #public void showInfo()
        #{
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #/// <summary>
        #///    Implements change version functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports changing the version number; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports change version, MorphX will show the version number both
        #///    in pending objects and history form.
        #/// </remarks>
        #public boolean supportChangeVersion()
        #{
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #/// <summary>
        #///    Checks whether a check in wizard is used by the back end for the version control system.
        #/// </summary>
        #/// <returns>
        #///    true if the back end has a check in wizard; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the back end uses a check in wizard, check in comments will not be requested as these comments
        #///    are provided in the check in wizard.
        #/// </remarks>
        #public boolean supportCheckInWizard()
        #{
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #/// <summary>
        #/// Supports a check out of the same file by several users at the same time.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports multiple check outs of a file at the same time; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end does not support multiple check out of a file at the same time,
        #/// this method verifies that the file has not been checked out remotely before it tries a check out.
        #/// </remarks>
        #public boolean supportMultipleCheckout()
        #{
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #/// <summary>
        #///    Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports pending change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports change lists, it supports atomic operations on one or more
        #///    files.
        #///    When supported, change list operations in MorphX will be available, and the change list
        #///    methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportPendingChangeLists()
        #{
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #/// <summary>
        #///    Supports the review of a set of changed files.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports review; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end support reviews, the Review button is shown on the Pending Objects
        #///    form.
        #///    When the Review button is clicked the <c>reviewFileSet</c> method on this interface will be
        #///    invoked.
        #/// </remarks>
        #public boolean supportReviews()
        #{
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #/// <summary>
        #///    Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports submitted change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports change lists, it supports atomic operations on one or more
        #///    files.
        #///    When supported, change list operations in MorphX will be available, and the change list
        #///    methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportSubmittedChangeLists()
        #{
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #/// <summary>
        #///    Implements delete local files synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports delete local files synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports delete local files synchronization, MorphX will show a
        #///    delete files field in the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #/// <summary>
        #///    Implements label synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports label synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports label synchronization, MorphX will show a label field in
        #///    the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncLabel()
        #{
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false.
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized <c>SysVersionControlWorkItemProvider</c> object.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFileBasedBackEndSD unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlFileBasedBackEndSD
    PROPERTIES
      Name                #SysVersionControlFileBasedBackEndSD
      RunOn               #Client
      Origin              #{2D2347D2-0000-1000-9FEA-6CA08B7850CB}
      LegacyId            #18386
    ENDPROPERTIES
    
    METHODS
      SOURCE #actionText
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_action">
        #/// The action to convert.
        #/// </param>
        #/// <returns>
        #/// The description of the back end of the action.
        #/// </returns>
        #/// <remarks>
        #/// Converts an action to the description of the back end of the action.The description of the back end
        #/// of the action must match the populated values in the <c>SysVersionControlTmpItem.ActionText</c>
        #/// table field.
        #/// </remarks>
        #public str actionText(SysVersionControlSystemFileAction _action)
        #{
        #    switch (_action)
        #    {
        #        case SysVersionControlSystemFileAction::Delete:
        #            return #SDActionDelete;
        #        case SysVersionControlSystemFileAction::Add:
        #            return #SDActionAdd;
        #        case SysVersionControlSystemFileAction::Branch:
        #            return #SDActionBranch;
        #        case SysVersionControlSystemFileAction::Edit:
        #            return #SDActionEdit;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #actionTextForCheckedOutFile
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve the action text for.
        #/// </param>
        #/// <returns>
        #///    The action text for this file.
        #/// </returns>
        #/// <remarks>
        #///    Gets the action text for a checked out file.This method is used with the Source Depot version
        #///    control
        #/// </remarks>
        #public str actionTextForCheckedOutFile(Filename _filename)
        #{
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDOpenedFile, _filename));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        if (sdCommandOutputs.count())
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(0);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            return this.getVar(sdVariables, #SdVarAction);
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #buildHistoryItem
        #private void buildHistoryItem(
        #    COM _sdVariables,
        #    SysVersionControlTmpItem _item,
        #    int _variableX = -1) //zero based
        #{
        #;
        #    _item.clear();
        #    if (!prmisDefault(_variableX))
        #    {
        #        _item.Version        = str2int(this.getVarX(_sdVariables, #SdVarRev, _variableX));
        #        _item.Comment        = this.getVarX(_sdVariables, #SdVarDesc, _variableX);
        #        _item.User           = this.getVarX(_sdVariables, #SdVarUser, _variableX);
        #        _item.ComputerName   = this.getVarX(_sdVariables, #SdVarClient, _variableX);
        #        _item.ActionText     = this.getVarX(_sdVariables, #SdVarAction, _variableX);
        #        _item.ChangeNumber   = str2int(this.getVarX(_sdVariables, #SdVarChange, _variableX));
        #
        #        [_item.vcsDate,
        #         _item.vcsTime]      = this.int2DateTime(str2int(this.getVarX(_sdVariables, #SdVarTime, _variableX)));
        #    }
        #    else
        #    {
        #        _item.Version        = str2int(this.getVar(_sdVariables, #SdVarRev));
        #        _item.Comment        = this.getVar(_sdVariables, #SdVarDesc);
        #        _item.User           = this.getVar(_sdVariables, #SdVarUser);
        #        _item.ComputerName   = this.getVar(_sdVariables, #SdVarClient);
        #        _item.ActionText     = this.getVar(_sdVariables, #SdVarAction);
        #        _item.ChangeNumber   = str2int(this.getVar(_sdVariables, #SdVarChange));
        #
        #        [_item.vcsDate,
        #         _item.vcsTime]      = this.int2DateTime(str2int(this.getVar(_sdVariables, #SdVarTime)));
        #    }
        #}
      ENDSOURCE
      SOURCE #canRevert
        #// Verify that a revert of a deleted object can be done. A revert is not only successful from the
        #// file backend, it also has to be able to be imported successfully in the AOT.
        #// Get a virtual temporary tree node and validate if the ID is held by another name of the same type.
        #private boolean canRevert(Filename _filename)
        #{
        #    SysVersionControlTmpItem tmpItem;
        #    Filename tmpFilename;
        #    TreeNode tmpNode;
        #    UtilIdElements idElement;
        #
        #    // The ID can be validated only for XPO files.
        #    if (this.actionTextForCheckedOutFile(_filename) == #SDActionDelete && strEndsWith(_filename, #XPO))
        #    {
        #        tmpItem.Version = 0;
        #        tmpItem.InternalFilename = _filename;
        #
        #        tmpFilename = this.fileGetVersion(_filename, tmpItem);
        #
        #        tmpNode = tmpItem.getVirtualTreenode(tmpFilename);
        #
        #        if (tmpNode &&
        #            tmpNode.applObjectId() &&
        #            tmpNode.treeNodeType().isUtilElement())
        #        {
        #            // Get name of possible existing object name
        #            select firstonly Name from idElement where idElement.Id == tmpNode.utilIdElement().Id
        #                && idElement.ParentId == 0
        #                && idElement.RecordType == tmpNode.utilIdElement().RecordType;
        #
        #            // Check if the ID is already used in the AOD with a different name
        #            if (idElement.Name && idElement.Name != tmpNode.treeNodeName())
        #            {
        #                error(strFmtLB(strFmt("@SYS112908",
        #                    tmpNode.utilIdElement().Id,
        #                    tmpNode.utilIdElement().RecordType,
        #                    idElement.Name,
        #                    tmpNode.treeNodePath())));
        #                return false;
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #changeListContents
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <param name="_number">
        #///    The specified change list number of which to retrieve the contents.
        #/// </param>
        #/// <returns>
        #///    The contents of the change list.
        #/// </returns>
        #/// <remarks>
        #///    Gets the contents of a checked in change list.The returned table contains one record for each file
        #///    in the change list.This method is used with the Source Depot version control.
        #/// </remarks>
        #public SysVersionControlTmpItem changeListContents(SysVersionControlChangeNumber _number)
        #{
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDDescribe, _number));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i = 0;
        #    SysVersionControlTmpItem item;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        sdCommandOutput  = sdCommandOutputs.item(0);
        #        sdVariables      = sdCommandOutput.variables();
        #
        #        while (this.getVarX(sdVariables, #SdVarRev, i))
        #        {
        #            this.buildHistoryItem(sdVariables, item);
        #
        #            item.Version        = str2int(this.getVarX(sdVariables, #SdVarRev, i));
        #            item.ActionText     = this.getVarX(sdVariables, #SdVarAction, i);
        #            item.InternalFilename = this.getVarX(sdVariables, #SdVarDepotFile, i);
        #            item.StatusText = this.getVarX(sdVariables, #SdVarStatus, i);
        #
        #            item.insert();
        #            i++;
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #changeListsPending
        #/// <summary>
        #/// Gets the pending change lists.
        #/// </summary>
        #/// <returns>
        #/// The pending change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each pending change list.
        #/// </remarks>
        #public SysVersionControlPendingChangeList changeListsPending()
        #{
        #    COM sdResult;
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    SysVersionControlPendingChangeList changeList;
        #    str message;
        #    str userName;
        #    str clientName;
        #    int i;
        #    int pos;
        #
        #    sdResult = this.executeStructuredCommand(#SDInfo, '', false, true);
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.infoOutput();
        #        for (i=0; i<sdCommandOutputs.count(); i++)
        #        {
        #            if (!userName || !clientName)
        #            {
        #                sdCommandOutput  = sdCommandOutputs.item(i);
        #                message    = sdCommandOutput.message();
        #                pos = strScan(message, #SdVarUserName, 1, maxInt());
        #                if(pos)
        #                {
        #                    userName = subStr(message, pos+strLen(#SdVarUserName),maxInt());
        #                }
        #                pos = strScan(message, #sdVarClientName, 1, maxInt());
        #                if (pos)
        #                {
        #                    clientName = subStr(message, pos+strLen(#SdVarClientName),maxInt());
        #                }
        #            }
        #        }
        #
        #        sdResult = this.executeStructuredCommand(strFmt(#SDChangeLists,userName, clientName));
        #
        #        if (sdResult)
        #        {
        #            changeList.clear();
        #            changeList.Id = #DefaultChangeList;
        #            changeList.insert();
        #
        #            sdCommandOutputs = sdResult.structuredOutput();
        #            for (i=0; i< sdCommandOutputs.count(); i++)
        #            {
        #                sdCommandOutput = sdCommandOutputs.item(i);
        #                sdVariables = sdCommandOutput.variables();
        #
        #                changeList.clear();
        #                changeList.Id = this.getVar(sdVariables, #SdVarChange);
        #                changeList.Description = this.getVar(sdVariables, #SdVarDesc);
        #                changeList.insert();
        #            }
        #        }
        #    }
        #
        #    return changeList;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <remarks>
        #///    This method controls a file-based version control system back end for Source depot. All operations
        #///    of this class are based on files and folders.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlFileBasedBackEndSD
        #implements SysVersionControlFilebasedBackEnd
        #{
        #    COM sdConnection;
        #    COM sdCheckInResult;
        #
        #    boolean useCheckInWizard;
        #    SysVersionControlBranch branch;
        #    SysVersionControlRepositoryFolder folder;
        #
        #    #SysVersionControl
        #    #WinApi
        #    #File
        #
        #    #define.dpk('.dpk')
        #
        #    #define.XMLSDPort('SDPort')
        #    #define.XMLSDProxy('SDProxy')
        #
        #    #SysVersionControlSourceDepotXML
        #
        #    #define.SDProgramId('SourceDepot.SDConnection')
        #
        #    #define.SDActionBranchFrom  ('Branch from')
        #    #define.SDActionBranch      ('Branch')
        #    #define.SDActionDelete      ('Delete')
        #    #define.SDActionAdd         ('Add')
        #    #define.SDActionEdit        ('Edit')
        #
        #    #define.SDEdit              ('edit')
        #    #define.SDAdd               ('add')
        #    #define.SDDelete            ('delete')
        #    #define.SDRevert            ('revert')
        #    #define.SDSync              ('sync')
        #    #define.SDSyncForced        ('sync -f')
        #    #define.SDSyncAll           ('sync \%1')
        #    #define.SDSyncAllForced     ('sync -f \%1')
        #    #define.SDAddAll            ('add "\%1"\\...')
        #    #define.SDChange            ('change -o')
        #    #define.SDSubmit            ('submit -C "\%1"')
        #    #define.SDSubmitAll         ('submit -C "\%1" "\%2"\\...')
        #    #define.SDSubmitChangeList  ('submit -c "\%1"')
        #    #define.SDSubmitSpecData    ('submit -i')
        #    #define.SDFileLog           ('filelog -i -l "\%1"')
        #    #define.SDPrint             ('print -o "\%1"')
        #    #define.SDIntegrate         ('integrate "\%1"')
        #    #define.SDDescribe          ('describe "\%1"')
        #    #define.SDOpened            ('opened "\%1"\\...')
        #    #define.SDOpenedChangeList  ('opened -c \%1 "\%2"\\...')
        #    #define.SDOpenedAll         ('opened -a')
        #    #define.SDChanges           ('changes -l "\%1"\\...')
        #    #define.SDChangeLists       ('changes -r -s pending -u \%1 -c \%2')
        #    #define.SDOpenedFile        ('opened "\%1"')
        #    #define.SDResolveMerged     ('resolve -am')
        #    #define.SDResolveYours      ('resolve -ay')
        #    #define.SDInfo              ('info')
        #    #define.SDLock              ('lock')
        #    #define.SDUnlock            ('unlock')
        #    #define.SDFiles             ('files -d')
        #    #define.SDFstat             ('fstat -s')
        #
        #    #define.SDVarStatus         ('status')
        #    #define.SDVarRev            ('rev')
        #    #define.SDVarClient         ('client')
        #    #define.SDVarUser           ('user')
        #    #define.SDVarDesc           ('desc')
        #    #define.SDVarAction         ('action')
        #    #define.SDVarTime           ('time')
        #    #define.SDVarDepotFile      ('depotFile')
        #    #define.SDVarBranchFile     ('branchFile')
        #    #define.SDVarClientFile     ('clientFile')
        #    #define.SDVarChange         ('change')
        #    #define.SDVarHow            ('how')
        #    #define.SDVarFile           ('file')
        #    #define.SdVarUserName       ('User name: ')
        #    #define.SdVarClientName     ('Client name: ')
        #
        #    #define.SDSpecDataDescription ('Description')
        #    #define.SDSpecDataFiles       ('Files')
        #
        #    #define.SDCommmandAdded       ('Added')
        #    #define.SDCommmandUpdating    ('Updating')
        #    #define.SDCommmandRefreshing  ('Refreshing')
        #    #define.SDCommmandDeleted     ('Deleted')
        #
        #    #define.SDCommmandAdd         ('Add')
        #    #define.SDCommmandEdit        ('Edit')
        #    #define.SDCommmandDelete      ('Delete')
        #
        #    #define.SDRevisionHave        ('\%1#have')
        #    #define.SDRevisionHead        ('\%1#head')
        #
        #    #define.SDP                   ('sdp')
        #    #define.SDPCmdLine            ('pack -C \%1 \"\%2\" \%3')
        #
        #    #define.checkinw              ('cmd')
        #    #define.checkinwCmdline       (@'/k set inetroot=folder&folder\tools\path1st\myenv.cmd&checkin submit&exit')
        #    #define.checkinwCmdlineChangeList(@'/k set inetroot=folder&folder\tools\path1st\myenv.cmd&checkin submit -c change&exit')
        #
        #    #define.DefaultChangeList   ('default')
        #
        #    #define.MustResolveText('must resolve')
        #
        #    #define.delimiter(' - ')
        #    #define.uptodate('up-to-date.')
        #    #define.space(' ')
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #/// <summary>
        #///    Checks the repository in.
        #/// </summary>
        #/// <param name="_comment">
        #///    The comment to use for the check-in.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked at the end of the create repository operation.
        #/// </remarks>
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    COM specData = this.getSpecData(#SDChange);
        #
        #    specData.item(#SDSpecDataDescription, _comment);
        #    sdConnection.specData(specData);
        #    this.executeCommand(#SDSubmitSpecData);
        #}
      ENDSOURCE
      SOURCE #description
        #/// <summary>
        #/// Provides a description of the class.
        #/// </summary>
        #/// <returns>
        #/// The class description.
        #/// </returns>
        #public ClassDescription description()
        #{
        #    return "@SYS85682";
        #}
      ENDSOURCE
      SOURCE #errorHandling
        #protected boolean errorHandling(COM _sdResult, boolean _warningsAsErrors = false, boolean _noInfo = false)
        #{
        #    COM errorOutput = _sdResult.errorOutput();
        #    COM warningOutput = _sdResult.warningOutput();
        #
        #    if (errorOutput.count() > 0 ||
        #       (_warningsAsErrors && warningOutput.count() > 0 ))
        #    {
        #        if(!_noInfo)
        #            this.processOutput(_sdResult.infoOutput(),      Exception::Info);
        #        this.processOutput(_sdResult.warningOutput(),   Exception::Warning);
        #        this.processOutput(errorOutput,                 Exception::Error);
        #        return false;
        #    }
        #
        #    if(!_noInfo)
        #        this.processOutput(_sdResult.infoOutput(),      Exception::Info);
        #    this.processOutput(_sdResult.warningOutput(),   Exception::Warning);
        #    return true;
        #}
      ENDSOURCE
      SOURCE #executeCommand
        #protected boolean executeCommand(str _command, str _args = '', boolean _warningsAsErrors = true, boolean _noInfo = false)
        #{
        #    COM sdResult;
        #
        #    if (!prmisDefault(_args))
        #        sdConnection.addArg(_args);
        #
        #    sdResult = sdConnection.run(_command);
        #    this.waitUntilFinished(sdResult, strFmt("%1 %2", _command, _args));
        #
        #    return this.errorHandling(sdResult, _warningsAsErrors, _noInfo);
        #}
      ENDSOURCE
      SOURCE #executeStructuredCommand
        #protected COM executeStructuredCommand(str _command, str _args = '', boolean _warningsAsErrors = false, boolean _noInfo = false)
        #{
        #    COM sdResult = this.executeStructuredCommandSilent(_command, _args);
        #
        #    if (this.errorHandling(sdResult, _warningsAsErrors, _noInfo))
        #        return sdResult;
        #    return null;
        #}
      ENDSOURCE
      SOURCE #executeStructuredCommandSilent
        #protected COM executeStructuredCommandSilent(str _command, str _args = '')
        #{
        #    COM sdResult;
        #
        #    if (!prmisDefault(_args) && _args)
        #        sdConnection.addArg(_args);
        #
        #    sdResult = sdConnection.run(_command, true /*structured output*/);
        #    this.waitUntilFinished(sdResult, strFmt("%1 %2", _command, _args));
        #
        #    return sdResult;
        #}
      ENDSOURCE
      SOURCE #fileAddToVersionControl
        #/// <summary>
        #///    Adds a file to the version control system.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to add.
        #/// </param>
        #/// <param name="_comment">
        #///    A comment to the file which is added; optional; optional.
        #/// </param>
        #/// <returns>
        #///    true if the file was added successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file will be available to other users after a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileAddToVersionControl(Filename _filename, SysVersionControlItemComment _comment = '')
        #{
        #    if (this.verifyOwner(_filename))
        #    {
        #        if (this.executeCommand(#SDAdd, _filename, true))
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileCheckedOutTo
        #/// <summary>
        #/// Returns a list of users to whom a file is checked out to.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// A comma separated list of users; otherwise, an empty string.
        #/// </returns>
        #public str fileCheckedOutTo(Filename _filename)
        #{
        #    COM sdResult;
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    int lines;
        #
        #    //Do not display error/warning/info information, as this is a background query
        #    lines = infologLine();
        #    sdResult = this.executeStructuredCommand(#SDOpenedAll, _filename);
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        if (sdCommandOutputs.count())
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(0);
        #            sdVariables      = sdCommandOutput.variables();
        #            return this.getVar(sdVariables, #SDVarUser);
        #        }
        #    }
        #
        #    infolog.clear(lines);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileCheckout
        #/// <summary>
        #/// Checks out the file that is to be edited.
        #/// </summary>
        #/// <param name="_filename">
        #/// The checked out file.
        #/// </param>
        #/// <returns>
        #/// true if the file is checked out; otherwise, false.
        #/// </returns>
        #public boolean fileCheckout(Filename _filename)
        #{
        #    return this.executeCommand(#SDEdit, _filename, false);
        #}
      ENDSOURCE
      SOURCE #fileDelete
        #/// <summary>
        #///    Checks out a file for deletion.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to delete.
        #/// </param>
        #/// <returns>
        #///    true if the file was deleted successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file is deleted in the back end by a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileDelete(Filename _filename)
        #{
        #    if (this.executeCommand(#SDDelete, _filename))
        #    {
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileExists
        #/// <summary>
        #/// Verifies whether a file exists in the back end.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// true if the file exists in the back end; otherwise, false.
        #/// </returns>
        #public boolean fileExists(Filename _filename)
        #{
        #    return this.executeCommand(#SDFiles, _filename, true);
        #}
      ENDSOURCE
      SOURCE #fileGetVersion
        #/// <summary>
        #///    Retrieves a version of a file from the storage of the back end.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve a version of.
        #/// </param>
        #/// <param name="_item">
        #///    The that corresponds to temporary record of the version control item in the requested version.
        #/// </param>
        #/// <returns>
        #///    A fully qualified file name to a temporary location where the version of the file has been saved.
        #/// </returns>
        #/// <remarks>
        #///    If <c>_version</c> is 0 (zero), the latest version of the file is requested.If <c>_version</c> is
        #///    -1 (minus-one), the back end's copy of the local version is requested. That is the version the user
        #///    received the last time, they synchronized.
        #/// </remarks>
        #public Filename fileGetVersion(Filename _filename, SysVersionControlTmpItem _item)
        #{
        #    Filename tmpfilename;
        #    Filename filename;
        #    boolean  useCache;
        #    int      lines;
        #    SysVersionControllable controllable;
        #
        #    switch (_item.Version)
        #    {
        #        case -1:
        #            filename = strFmt(#SDRevisionHave, _filename);
        #            useCache = false;
        #            break;
        #
        #        case 0:
        #            filename = strFmt(#SDRevisionHead, _filename);
        #            useCache = false;
        #            break;
        #
        #        default:
        #            filename = strFmt('%1@%2', _filename, _item.ChangeNumber);
        #            useCache = true;
        #            break;
        #
        #    }
        #
        #    controllable = _item.getControllable();
        #
        #    if (useCache)
        #    {
        #        tmpfilename = strFmt('%1\\%2@%3%4',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), strAlpha(controllable.versionControlItemPath()), _item.ChangeNumber, controllable.fileExtension());
        #    }
        #    else
        #    {
        #        tmpfilename = strFmt('%1\\%2#%3%4',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), strAlpha(controllable.versionControlItemPath()), WinAPI::createGUID(), controllable.fileExtension());
        #    }
        #
        #    if (!useCache || !WinAPI::fileExists(tmpfilename))
        #    {
        #        lines = infologLine();
        #
        #        //
        #        // If not checked in #have will generate an error
        #        //
        #        if (this.executeCommand(strFmt(#SDPrint, tmpfilename), filename) || _item.Version == -1)
        #        {
        #            infolog.clear(lines);
        #        }
        #    }
        #    if (WinAPI::fileExists(tmpfilename))
        #    {
        #        return tmpfilename;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileHistory
        #/// <summary>
        #///    Retrieves a list of all revisions of a file from the storage of the back end.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve information for.
        #/// </param>
        #/// <returns>
        #///    A temporary table that contains a record that describes each revision.
        #/// </returns>
        #public SysVersionControlTmpItem fileHistory(Filename _filename)
        #{
        #    return this.getFileNameHistory(_filename);
        #}
      ENDSOURCE
      SOURCE #fileLock
        #/// <summary>
        #///    Locks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to lock.
        #/// </param>
        #/// <returns>
        #///    true if the file is locked; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked other users cannot check-in changes to the file.
        #/// </remarks>
        #public boolean fileLock(Filename _filename)
        #{
        #    return this.executeCommand(#SDLock, _filename);
        #}
      ENDSOURCE
      SOURCE #fileRename
        #/// <summary>
        #///    Renames a file.
        #/// </summary>
        #/// <param name="_oldFilename">
        #///    The file to rename.
        #/// </param>
        #/// <param name="_newFilename">
        #///    The new name of the file.
        #/// </param>
        #/// <returns>
        #///    true if the rename operation is successful; otherwise, false.
        #/// </returns>
        #public boolean fileRename(Filename _oldFilename, Filename _newFilename)
        #{
        #    if (this.executeCommand(strFmt(#SDIntegrate, _oldFilename), _newFilename))
        #    {
        #        if (this.executeCommand(#SDDelete, _oldFilename))
        #        {
        #            if (this.executeCommand(#SDEdit, _newFilename, false))
        #            {
        #                return true;
        #            }
        #        }
        #
        #        //
        #        // Something went wrong doing rename
        #        // Clean up the dublicated file created by "sd integrate"
        #        //
        #        WinAPI::deleteFile(_newFilename);
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileSetCheckin
        #/// <summary>
        #/// Checks in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to check in.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the check-in.
        #/// </param>
        #/// <param name="_changeList">
        #/// The changelist to check-in.
        #/// </param>
        #/// <param name="_workItems">
        #/// The work items associated with the files to check-in.
        #/// </param>
        #/// <returns>
        #/// true if the check-in is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Any file that is successfully checked in is also unlocked.
        #/// </remarks>
        #public boolean fileSetCheckin(
        #    Map _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    #define.failText('Submit failed')
        #    #define.digits('0123456789')
        #    #define.useSubmit('use \'sd submit -c')
        #
        #    boolean resolvedOk;
        #    Map resolveFiles;
        #    Filename resolveFilename;
        #    int idx;
        #    str message;
        #    str changeNum;
        #
        #    COM commandOutPut;
        #    COM specData;
        #    COM errorOutput;
        #    COM warningOutput;
        #
        #    str cmd;
        #
        #    COMVariant variant = new COMVariant(COMVariantInOut::In, COMVariantType::VT_SAFEARRAY);
        #
        #    Array arr = new Array(Types::String);
        #
        #    SysBuildNo nextBuildNo;
        #
        #    Filename filename;
        #    MapEnumerator filesEnumerator;
        #    int i = 0;
        #
        #    sdCheckInResult = null;
        #    if (!_comment) //Use gated check-in
        #    {
        #        if (_changeList && _changeList != #DefaultChangeList)
        #        {
        #            cmd = #checkinwCmdlineChangeList;
        #            cmd = strReplace(cmd, 'change', _changeList);
        #        }
        #        else
        #        {
        #            cmd = #checkinWCmdLine;
        #        }
        #        cmd = strReplace(cmd, 'folder', SysVersionControlParameters::find().RepositoryFolder);
        #        WinAPI::shellExecute(#checkinW, cmd, SysVersionControlParameters::find().RepositoryFolder, #ShellExeOpen, #SW_SHOWNORMAL );
        #    }
        #    else
        #    {
        #        filesEnumerator = _setOfFiles.getEnumerator();
        #        filesEnumerator.reset();
        #
        #        while (filesEnumerator.moveNext())
        #        {
        #            // Get internal depot filename of client filename
        #            filename = this.getDepotFilename(filesEnumerator.currentKey());
        #            if (filename)
        #            {
        #                i++;
        #                arr.value(i, filename);
        #            }
        #        }
        #
        #        variant.safeArray(arr, COMVariantType::VT_VARIANT);
        #
        #        specData = this.getSpecData(#SDChange);
        #        specData.item(#SDSpecDataFiles, variant);
        #        specData.item(#SDSpecDataDescription, _comment);
        #
        #        sdConnection.specData(specData);
        #
        #        sdCheckInResult = this.executeStructuredCommandSilent(#SDSubmitSpecData);
        #        errorOutput = sdCheckInResult.errorOutput();
        #        if (errorOutput.count())
        #        {
        #            // Resolve needed
        #            errorOutput = sdCheckInResult.errorOutput();
        #            for (i = 0; i < errorOutput.count(); i++)
        #            {
        #                commandOutPut = errorOutput.item(i);
        #
        #                message = commandOutPut.message();
        #                if (strScan(message, #failText, 1, strLen(message)))
        #                {
        #                    idx = strScan(message, #useSubmit, 1, strLen(message));
        #                    if (idx)
        #                    {
        #                        changeNum = subStr(message, idx + strLen(#useSubmit), strLen(message));
        #                        changeNum = strKeep(changeNum, #digits);
        #                        break;
        #                    }
        #                }
        #            }
        #
        #            warningOutput = sdCheckInResult.warningOutput();
        #            resolveFiles = new Map(Types::String, Types::String);
        #            resolvedOk = true;
        #            for (i = 0; i < warningOutput.count(); i++)
        #            {
        #                commandOutPut = warningOutput.item(i);
        #                message = commandOutPut.message();
        #                if (strScan(message, #MustResolveText, 1, strLen(message)))
        #                {
        #                    resolveFilename = subStr(message, 1, strFind(message, ' ', 1, strLen(message))-1);
        #                    resolveFiles.insert(resolveFilename, '');
        #                }
        #            }
        #
        #            filesEnumerator = resolveFiles.getEnumerator();
        #            while (filesEnumerator.moveNext())
        #            {
        #                if (SysLabelFile::isLabelFile(resolveFilename))
        #                {
        #                    resolvedOk = this.executeCommand(#SDResolveYours, resolveFilename) && resolvedOk;
        #                }
        #                else
        #                {
        #                    resolvedOk = this.executeCommand(#SDResolveMerged, resolveFilename) && resolvedOk;
        #                }
        #            }
        #
        #            if (resolvedOk && changeNum)
        #            {
        #                return this.executeCommand(strFmt(#SDSubmitChangeList, changeNum));
        #            }
        #        }
        #        else
        #        {
        #            nextBuildNo = SysVersionControlFileBasedBackEndSD::nextBuildNo();
        #            if (nextBuildNo)
        #            {
        #                info(strFmt("@SYS86585", nextBuildNo));
        #            }
        #            return true;
        #        }
        #        // Otherwise return false
        #        return false;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileSetResolve
        #/// <summary>
        #/// Resolves conflicts in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to resolve.
        #/// </param>
        #/// <returns>
        #/// true if the set of files are resolved successful; otherwise, false.
        #/// </returns>
        #public boolean fileSetResolve(Map _setOfFiles)
        #{
        #    boolean resolvedOk = false;
        #    MapEnumerator mapEnum;
        #
        #    if (_setOfFiles)
        #    {
        #        mapEnum = _setOfFiles.getEnumerator();
        #        mapEnum.reset();
        #
        #        resolvedOk = true;
        #
        #        while ( mapEnum.moveNext())
        #        {
        #            resolvedOk = this.executeCommand(#SDResolveMerged, mapEnum.currentKey(), true, false) && resolvedOk;
        #        }
        #    }
        #    return resolvedOk;
        #}
      ENDSOURCE
      SOURCE #filesPending
        #/// <summary>
        #///    Gets the pending files.
        #/// </summary>
        #/// <param name="_changeListId">
        #///    The ID of the pending change list of which to retrieve the contents.
        #/// </param>
        #/// <param name="_folder">
        #///    The repository folder.
        #/// </param>
        #/// <returns>
        #///    The pending files.
        #/// </returns>
        #/// <remarks>
        #///    The returned table contains one record for each pending file.If the <c>changeListId</c> field is
        #///    blank, the contents of the default change list is returned.
        #/// </remarks>
        #public SysVersionControlTmpItem filesPending(
        #    SysVersionControlChangeListId _changeListId,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    SysVersionControlTmpItem item;
        #    str defFile;
        #
        #    if(_changeListId)
        #    {
        #        this.getPendingChangeList(item, strFmt(#SDOpenedChangeList, _changeListId, _folder), true);
        #    }
        #    else
        #    {
        #        this.getPendingChangeList(item, strFmt(#SDOpened, _folder), true);
        #    }
        #
        #    if (branch)
        #    {
        #        defFile = SysVersionControlParameters::find().RepositoryFolder + #DefFile;
        #        this.getPendingChangeList(item, strFmt(#SDOpenedFile, defFile), true);
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileSynchronize
        #/// <summary>
        #///    Gets a specific version of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contains the file name and the action performed on the file.
        #/// </returns>
        #/// <remarks>
        #///    When the version in the <c>syncParameters</c> parameter is not specified, the latest version of the
        #///    file will be retrieved.
        #/// </remarks>
        #public Map fileSynchronize(
        #    Filename _filename,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    Map retMap = new Map(Types::String, Types::Enum); // Filename, Synchronization-command
        #
        #    int firstLine = infologLine();
        #    int lastLine;
        #    int i;
        #    str commandStr;
        #    str message;
        #    str warningText;
        #    Filename localFilename = _syncParameters.parmChangeListNumber() == 0 ? _filename : strFmt('%1@%2', _filename, _syncParameters.parmChangeListNumber());
        #    Filename syncFileName;
        #    Filename arg;
        #    SysVersionControlSynchronizeCommand command;
        #
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #
        #    if (_syncParameters.parmChangeListNumber() == 0)
        #    {
        #        // Use local file name when syncing head revision.
        #        syncFileName = localFilename;
        #        arg = syncFileName;
        #    }
        #    else
        #    {
        #        syncFileName = this.getDepotFilename(localFilename, false);
        #        arg = strFmt('%1@%2', syncFileName, _syncParameters.parmChangeListNumber());
        #    }
        #
        #    if (!syncFileName)
        #        return retMap;
        #
        #    if ( _syncParameters.parmForce())
        #    {
        #        commandStr = #SDSyncForced;
        #    }
        #    else
        #    {
        #        commandStr = #SDSync;
        #    }
        #
        #    sdResult = this.executeStructuredCommand(commandStr, arg, false, _syncParameters.parmSilent());
        #
        #    if (sdResult)
        #    {
        #        lastLine = infologLine();
        #        warningText = infolog.text(lastLine);
        #
        #        if (lastLine >= firstLine &&
        #            _syncParameters.parmSilent() &&
        #            strScan(warningText, #uptodate, 1, strLen(warningText)) &&
        #            strScan(warningText, syncFileName, 1, strLen(warningText)))
        #        {
        #            infolog.clear(firstLine);
        #        }
        #
        #        sdCommandOutputs = sdResult.infoOutput();
        #
        #        for ( i = 0; i < sdCommandOutputs.count(); i++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            message    = sdCommandOutput.message();
        #            commandStr = subStr(message, strScan(message,#delimiter,1,maxInt())+strLen(#delimiter),maxInt());
        #            commandStr = subStr(commandStr, 1, strScan(commandStr,#space,1,maxInt())-1);
        #
        #            switch(commandStr)
        #            {
        #                case #SDCommmandAdded:
        #                    command = SysVersionControlSynchronizeCommand::Add;
        #                    break;
        #
        #                case #SDCommmandUpdating:
        #                case #SDCommmandRefreshing:
        #                    command = SysVersionControlSynchronizeCommand::Update;
        #                    break;
        #
        #                case #SDCommmandDeleted:
        #                    command = SysVersionControlSynchronizeCommand::Delete;
        #                    break;
        #
        #                default:
        #                    //In case the command is something else
        #                    //skip the file
        #                    continue;
        #            }
        #
        #            retMap.insert(_filename, command);
        #        }
        #    }
        #
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #fileUndoCheckout
        #/// <summary>
        #///    Reverts the check-out of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file for which to undo check-out.
        #/// </param>
        #/// <returns>
        #///    A container with a Boolean value that indicates whether the check-out was successful and the name
        #///    of the file.
        #/// </returns>
        #public container fileUndoCheckout(Filename _filename)
        #{
        #    boolean reverted = false;
        #
        #    if (this.canRevert(_filename))
        #    {
        #        reverted = this.executeCommand(#SDRevert, _filename);
        #    }
        #    return [reverted, (reverted == true ? _filename : '')];
        #}
      ENDSOURCE
      SOURCE #fileUnlock
        #/// <summary>
        #///    Unlocks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to unlock.
        #/// </param>
        #/// <returns>
        #///    true if the file is unlocked successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked, other users cannot check-in changes to the file.
        #/// </remarks>
        #public boolean fileUnlock(Filename _filename)
        #{
        #    return this.executeCommand(#SDUnlock, _filename);
        #}
      ENDSOURCE
      SOURCE #folderChanges
        #/// <summary>
        #/// Returns all change lists for a folder.
        #/// </summary>
        #/// <param name="_folder">
        #/// The folder to retrieve information for.
        #/// </param>
        #/// <returns>
        #/// The change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each change list.
        #/// </remarks>
        #public SysVersionControlTmpChange folderChanges(FilePath _folder)
        #{
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDChanges, _folder));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #
        #    SysVersionControlTmpChange item;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for ( i = 0; i < sdCommandOutputs.count(); i++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            item.clear();
        #            item.User             = this.getVar(sdVariables, #SdVarUser);
        #            item.ComputerName     = this.getVar(sdVariables, #SdVarClient);
        #            item.ChangeNumber     = str2int(this.getVar(sdVariables, #SdVarChange));
        #            [item.vcsDate,
        #            item.vcsTime]         = this.int2DateTime(str2int(this.getVar(sdVariables, #SdVarTime)));
        #            item.Comment          = this.getVar(sdVariables, #SdVarDesc);
        #            item.StatusText       = this.getVar(sdVariables, #SdVarStatus);
        #            item.insert();
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #folderSetSynchronize
        #/// <summary>
        #///    Gets the latest version of one or more folders.
        #/// </summary>
        #/// <param name="_folderSet">
        #///    A set that contains the folders to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contians the file name and the action performed on the file for each modified file.
        #/// </returns>
        #public Map folderSetSynchronize(
        #    Set _folderSet,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    SetEnumerator folderSetEnum;
        #    str syncFolders;
        #
        #    str commandStr;
        #    str message;
        #    int i;
        #    str filename;
        #
        #    SysVersionControlSynchronizeCommand command;
        #
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #
        #    Map retMap = new Map(Types::String, Types::Enum);
        #
        #    if (_folderSet)
        #    {
        #        folderSetEnum = _folderSet.getEnumerator();
        #
        #        while( folderSetEnum.moveNext() )
        #        {
        #            syncFolders += strFmt(' "%1"\\...', folderSetEnum.current());
        #        }
        #
        #        sdResult = this.executeStructuredCommand(strFmt(_syncParameters.parmForce() ? #SDSyncAllForced : #SDSyncAll, syncFolders), '', false);
        #
        #        if ( sdResult)
        #        {
        #            sdCommandOutputs = sdResult.infoOutput();
        #            for ( i = 0;  i < sdCommandOutputs.count(); i++)
        #            {
        #                sdCommandOutput  = sdCommandOutputs.item(i);
        #                message    = sdCommandOutput.message();
        #                commandStr = subStr(message, strScan(message,#delimiter,1,maxInt())+strLen(#delimiter),maxInt());
        #                commandStr = subStr(commandStr, 1, strScan(commandStr,#space,1,maxInt())-1);
        #
        #                switch(commandStr)
        #                {
        #                    case #SDCommmandAdded:
        #                        command = SysVersionControlSynchronizeCommand::Add;
        #                        break;
        #
        #                    case #SDCommmandUpdating:
        #                    case #SDCommmandRefreshing:
        #                        command = SysVersionControlSynchronizeCommand::Update;
        #                        break;
        #
        #                    case #SDCommmandDeleted:
        #                        command = SysVersionControlSynchronizeCommand::Delete;
        #                        break;
        #
        #                    default:
        #                        //In case the command is something else
        #                        //skip the file
        #                        continue;
        #                }
        #
        #                filename = subStr(message, strScan(message, folder, 1, maxInt()), maxInt());
        #
        #                retMap.insert(filename, command);
        #            }
        #        }
        #
        #    }
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #getDepotFilename
        #private Filename getDepotFilename(Filename _clientFilename, boolean _silent = true)
        #{
        #    COM sdResult;
        #    COM sdVariables;
        #    COM commandOutput;
        #    COM commandOutputs;
        #
        #    Filename depotFilename = '';
        #
        #    sdResult = this.executeStructuredCommandSilent(#SDFstat, _clientFilename);
        #
        #    commandOutputs = sdResult.allOutput();
        #    if (commandOutputs.count() == 1)
        #    {
        #        commandOutput = commandOutputs.item(0);
        #
        #        sdVariables = commandOutput.variables();
        #        depotFilename = this.getVar(sdVariables, #SDVarDepotFile);
        #
        #        if (!_silent)
        #            this.errorHandling(sdResult);
        #    }
        #
        #    return depotFilename;
        #}
      ENDSOURCE
      SOURCE #getFileNameHistory
        #private SysVersionControlTmpItem getFileNameHistory(
        #    Filename                    _filename,
        #    SysVersionControlTmpItem    _item = null)
        #{
        #    int lines = infologLine();
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDFilelog, _filename), '', true);
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #    int j;
        #    SysVersionControlTmpItem item;
        #
        #    item.setTmpData(_item);
        #
        #    if (sdResult)
        #    {
        #        //Remove info about the files retrieved
        #        infolog.clear(lines);
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for (j=0; j< sdCommandOutputs.count(); j++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(j);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            i = 0;
        #            while (this.getVarX(sdVariables, #SdVarRev, i))
        #            {
        #                this.buildHistoryItem(sdVariables, item, i);
        #                if (j==0)
        #                    item.InternalFilename = this.getVar(sdVariables, #SDVarDepotFile);
        #                else
        #                    item.InternalFilename = this.getVar(sdVariables, #SDVarBranchFile);
        #
        #                item.insert();
        #                i++;
        #            }
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getPendingChangeList
        #private SysVersionControlTmpItem getPendingChangeList(
        #    SysVersionControlTmpItem _item,
        #    str _depotCommand,
        #    boolean _silent = false)
        #{
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #    SysVersionControlTmpItem item;
        #    str warningText;
        #
        #    #define.notopened('not opened on this client.')
        #
        #    item.setTmpData(_item);
        #
        #    sdResult = this.executeStructuredCommand(_depotCommand);
        #
        #    if (sdResult)
        #    {
        #        if (_silent)
        #        {
        #            warningText = infolog.text(infologLine());
        #            if (strScan(warningText, #notopened, 1, strLen(warningText)))
        #            {
        #                infolog.clear(infologLine()-1);
        #            }
        #        }
        #
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for ( i = 0; i < sdCommandOutputs.count(); i++ )
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            this.buildHistoryItem(sdVariables, item);
        #
        #            item.Filename         = this.getVar(sdVariables, #SdVarClientFile);
        #            item.InternalFilename = this.getVar(sdVariables, #SdVarDepotFile);
        #
        #            item.insert();
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getSpecData
        #protected COM getSpecData(str _command)
        #{
        #    COM sdResult = this.executeStructuredCommand(_command);
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        sdCommandOutput  = sdCommandOutputs.item(0);
        #        sdVariables      = sdCommandOutput.variables();
        #        return sdVariables.specData();
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getVar
        #protected str getVar(COM _sdVariables, str _s)
        #{
        #    COM sdVariable = _sdVariables.variable(_s);
        #    if (sdVariable)
        #        return sdVariable.value();
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getVarX
        #protected str getVarX(COM _sdVariables, str _s, int _i)
        #{
        #    COM sdVariable = _sdVariables.variableX(_s, _i);
        #    if (sdVariable)
        #        return sdVariable.value();
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getVarXY
        #private str getVarXY(COM _sdVariables, str _s, int _i, int _j)
        #{
        #    COM sdVariable = _sdVariables.variableXY(_s, _i, _j);
        #
        #    if (sdVariable)
        #    {
        #        return sdVariable.value();
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #init
        #/// <summary>
        #/// Initializes the version control system back end.
        #/// </summary>
        #/// <param name="_parameters">
        #/// The parameters of the version control system back end.
        #/// </param>
        #/// <returns>
        #/// The connection status of the version control system back end.
        #/// </returns>
        #/// <remarks>
        #/// This method returns <c>SysVersionControlSystemStatus::WorkingOffline</c> when the back end is unavailable,
        #/// and version control in MorphX should be enabled, but limited to offline capabilities.
        #/// </remarks>
        #public SysVersionControlSystemStatus init(SysVersionControlParameters _parameters)
        #{
        #    int lines;
        #    boolean retCommand;
        #
        #    #define.iniFile('SD.INI')
        #
        #    folder = _parameters.RepositoryFolder;
        #    try
        #    {
        #        //
        #        // Create a connection to SDApi
        #        //
        #        lines = infologLine();
        #        sdConnection = new COM(#SDProgramId);
        #
        #        //
        #        // Load SD.INI file. If file is not found in this path, it will search parent path until in root.
        #        // This is done automatically by SDAPI.
        #        //
        #        lines = infologLine();
        #        try
        #        {
        #            sdConnection.loadIniFile(_parameters.RepositoryFolder, true);
        #        }
        #        catch
        #        {
        #            setPrefix(_parameters.RepositoryFolder);
        #            warning(strFmt("@SYS76826", #iniFile));
        #            infolog.clear(lines);
        #        }
        #
        #        //
        #        // Call a command to make sure we are connected.
        #        // SDInfo only prints to the infolog, the text printed is removed, so the user won't notice.
        #        //
        #        lines = infologLine();
        #        retCommand = this.executeCommand(#SDInfo);
        #        infolog.clear(lines);
        #
        #        if (retCommand == false)
        #        {
        #            return SysVersionControlSystemStatus::WorkingOffline;
        #        }
        #    }
        #    catch
        #    {
        #        infolog.clear(lines);
        #        error(strFmt("@SYS113228"));
        #        //
        #        // SDAPI not installed
        #        //
        #        return SysVersionControlSystemStatus::NotConnected;
        #    }
        #
        #    return SysVersionControlSystemStatus::Connected;
        #}
      ENDSOURCE
      SOURCE #int2DateTime
        #/*
        #    Returns a date and timeofday in the localtime zone based on an int representing the
        #    utc time in seconds since January first 1970.
        #*/
        #protected container int2DateTime(int _time)
        #{
        #    #TimeConstants
        #    #Define.OffsetDate(1\1\1970)
        #    Binary systemTime;
        #    Binary localTime;
        #
        #    timeOfDay time = _time mod #secondsperday;
        #    int         dd = _time div #secondsperday;
        #    date         d = #OffsetDate + dd;
        #
        #    systemTime = WinAPI::dateTime2SystemTime(d, time);
        #    localTime  = WinAPI::systemTimeToTzSpecificLocalTime(systemTime);
        #
        #    return [WinAPI::systemTimeToDate(localTime), WinAPI::systemTimeToTimeOfDay(localTime)];
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #/// <summary>
        #///    Extracts parameter settings from an XML element.
        #/// </summary>
        #/// <param name="_topNode">
        #///    The <c>XmlElement</c> class that contains the parameters.
        #/// </param>
        #public void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #    SysVersionControlRepositoryFolder repFolder = folder;
        #
        #    // Check that we have a VCS system.
        #    if (versioncontrol.parmSysVersionControlSystem())
        #    {
        #        branch = versioncontrol.parmSysVersionControlSystem().getXMLParameterValue(#XMLBranch, _topNode);
        #
        #        if (branch)
        #        {
        #            if (subStr(repFolder, strLen(repFolder),1) == #FilePathDelimiter)
        #            {
        #                repFolder = repFolder+branch;
        #            }
        #            else
        #            {
        #                repFolder = repFolder+#FilePathDelimiter+branch;
        #            }
        #            folder = repFolder;
        #
        #            versioncontrol.parmSysVersionControlSystem().parmFolder(folder);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    useCheckInWizard = true;
        #}
      ENDSOURCE
      SOURCE #parmBranch
        #public SysVersionControlBranch parmBranch(SysVersionControlBranch _branch = branch)
        #{
        #    branch = _branch;
        #
        #    return branch;
        #}
      ENDSOURCE
      SOURCE #parmUseCheckInWizard
        #public boolean parmUseCheckInWizard(boolean _useCheckInWizard = useCheckInWizard)
        #{
        #    useCheckInWizard = _useCheckInWizard;
        #
        #    return useCheckInWizard;
        #}
      ENDSOURCE
      SOURCE #processOutput
        #private void processOutput(COM _commandOutputs, Exception _exception)
        #{
        #    COM commandOutput;
        #    int i;
        #
        #    for ( i = 0; i <_commandOutputs.count(); i++ )
        #    {
        #        commandOutput = _commandOutputs.item(i);
        #        switch (_exception)
        #        {
        #            case Exception::Info:
        #                info(commandOutput.message());
        #                break;
        #
        #            case Exception::Warning:
        #                warning(commandOutput.message());
        #                break;
        #
        #            case Exception::Error:
        #                error(commandOutput.message());
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #requireSyncBeforeCheckOut
        #public boolean requireSyncBeforeCheckOut()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #/// <summary>
        #///    Returns the file name filter for the lookup dialog box.
        #/// </summary>
        #/// <returns>
        #///    The file name filter for the lookup dialog box.
        #/// </returns>
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    return [WinAPI::fileType(#dpk), #allfilesName + #dpk, #allFilesType, #allFiles];
        #}
      ENDSOURCE
      SOURCE #reviewFileSet
        #/// <summary>
        #/// Creates a review file from a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to review.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the review.
        #/// </param>
        #/// <param name="_fileNameOfReviewPackage">
        #/// The file name of the review file.
        #/// </param>
        #/// <param name="_folder">
        #/// The repository folder.
        #/// </param>
        #public void reviewFileSet(
        #    Set _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave _fileNameOfReviewPackage,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    str filenames;
        #    SetEnumerator filesEnumerator;
        #
        #    #define.allowedChars('abcdefghijklmnopqrstuvwxyz01234567890-+:;.,_!?')
        #
        #    if (_setOfFiles)
        #    {
        #        filesEnumerator = _setOfFiles.getEnumerator();
        #        filesEnumerator.reset();
        #
        #        while (filesEnumerator.moveNext())
        #        {
        #            filenames += strFmt(' "%1"', filesEnumerator.current());
        #        }
        #
        #        if (filenames)
        #        {
        #            _comment = strReplace(_comment, ' ', '_');
        #            _comment = strKeep(_comment, #allowedChars);
        #
        #            WinAPI::shellExecute(#sdp, strFmt(#sdpCmdLine, _comment, _fileNameOfReviewPackage, filenames), _folder, #ShellExeOpen, #SW_SHOWNORMAL, true );
        #            if (WinAPI::fileExists(_fileNameOfReviewPackage))
        #            {
        #                WinAPI::shellExecute(_fileNameOfReviewPackage);
        #            }
        #            else
        #            {
        #                throw error(strFmt("@SYS18678", _fileNameOfReviewPackage));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #showInfo
        #/// <summary>
        #///    Shows the connection information about the back end.
        #/// </summary>
        #public void showInfo()
        #{
        #    this.executeCommand(#SDInfo);
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #/// <summary>
        #///    Implements change version functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports change version number; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports change version, MorphX will show version number both in
        #///    Pending objects and History forms.
        #/// </remarks>
        #public boolean supportChangeVersion()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #/// <summary>
        #///    Checks whether a check-in wizard is used by the back end.
        #/// </summary>
        #/// <returns>
        #///    true if the back end has a check-in wizard; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the back end uses a check-in wizard, MorphX will not ask for check-in comments, because they are
        #///    provided in the check-in wizard.
        #/// </remarks>
        #public boolean supportCheckInWizard()
        #{
        #    return true & this.parmUseCheckInWizard();
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #/// <summary>
        #/// Supports check-out of the same file by several users at the same time.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports multiple check-outs; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end does not support multiple check-outs, MorphX will verify that a
        #/// file hasn't been checked out remotely before it tries a check-out.
        #/// </remarks>
        #public boolean supportMultipleCheckout()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports pending change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportPendingChangeLists()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #/// <summary>
        #/// Supports review of a set of changed files.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports review; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end support reviews, the Review button is shown on the Pending Objects form.
        #/// When the Review button is clicked the <c>reviewFileSet</c> method on this interface will be invoked.
        #/// </remarks>
        #public boolean supportReviews()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports submitted change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportSubmittedChangeLists()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #/// <summary>
        #///    Implements delete local files synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports delete local files synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports delete local files synchronization, MorphX will show a
        #///    delete files field in the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #/// <summary>
        #///    Implements label synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the system supports label synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control system supports label synchronization, MorphX will show a label field in the
        #///    synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncLabel()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #verifyOwner
        #//
        #// Validate an owner of the new element exists
        #//
        #private boolean verifyOwner(Filename _filename)
        #{
        #    SysVersionControlTmpItem tmpItem;
        #    identifierName elementName;
        #    TreeNode treeNode;
        #    UtilElementType recordType;
        #
        #    if (SysVersionControlTmpItem::isValidXPOFile(_filename))
        #    {
        #        treeNode = tmpItem.getVirtualTreenode(_filename);
        #
        #        //
        #        // Validate it is a type that must follow naming conventions.
        #        //
        #        if (treeNode &&
        #            treeNode.treeNodeType().isUtilElement())
        #        {
        #            recordType = treeNode.utilElement().RecordType;
        #
        #            if (recordType != UtilElementType::ExtendedType &&
        #                recordType != UtilElementType::Enum &&
        #                recordType != UtilElementType::LicenseCode)
        #            {
        #                elementName = treeNode.treeNodeName();
        #                return this.verifyOwnerPrefix(elementName);
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains a valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false.
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    int infologLine;
        #    str owner;
        #    infologLine = infologLine();
        #    try
        #    {
        #        owner = SysVersionControlFileBasedBackEndSD::getOwner(elementName);
        #
        #        if (!owner)
        #        {
        #            //
        #            // Clear cache and reread the potentially updated list
        #            //
        #            infolog.globalCache().clear(funcName());
        #            owner = SysVersionControlFileBasedBackEndSD::getOwner(elementName);
        #        }
        #
        #        if (owner)
        #        {
        #            info(strFmt("@SYS121677", elementName, owner));
        #        }
        #        else
        #        {
        #            error(strFmt("@SYS121678", elementName));
        #            return false;
        #        }
        #    }
        #    catch
        #    {
        #        //
        #        // Accept no owner, if the file doesn't exist.
        #        //
        #        infolog.clear(infologLine);
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #waitUntilFinished
        #protected void waitUntilFinished(COM _sdResult, str _command)
        #{
        #    Object formRun;
        #    HWND workspaceHwnd;
        #
        #    try
        #    {
        #        formRun = versioncontrol.parmUserInterfaceProvider().notificationForm();
        #
        #        if (formRun)
        #        {
        #            formRun.runCommand('sd.exe '+_command, _sdResult);
        #        }
        #        else
        #        {
        #            //
        #            // During wait for SD, the COM dispatches messages to AX
        #            // Disabling AX's main window will queue these messages until
        #            // AX is ready to receive them.
        #            //
        #            workspaceHwnd = versioncontrol.parmUserInterfaceProvider().getProcessWindowHandle();
        #            WinAPI::enableWindow(workspaceHwnd, false);
        #            _sdResult.waitUntilFinished();
        #            WinAPI::enableWindow(workspaceHwnd, true);
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #        if (workspaceHwnd)
        #        {
        #            WinAPI::enableWindow(workspaceHwnd, true);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized instance of the <c>SysVersionControlWorkItemProvider</c> class.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlFileBasedBackEndSD construct()
        #{
        #    return new SysVersionControlFileBasedBackEndSD();
        #}
        #
      ENDSOURCE
      SOURCE #getOwner
        #static public str getOwner(identifierName _objectName)
        #{
        #    Map prefixTeamMap = infolog.globalCache().get(funcname(), 0, null);
        #    Map suffixTeamMap = infolog.globalCache().get(funcname(), 1, null);
        #    Map baseMap;
        #    MapEnumerator enum;
        #    identifierName prefix;
        #    int i;
        #    str key;
        #    boolean cont;
        #    #AOT
        #
        #    if (!prefixTeamMap)
        #    {
        #        prefixTeamMap = SysVersionControlFileBasedBackEndSD::readExcelWorkbook();
        #        baseMap = Map::create(prefixTeamMap.pack());
        #        enum = baseMap.getEnumerator();
        #        suffixTeamMap = new Map(Types::String, Types::String);
        #
        #        cont = enum.moveNext();
        #        while (cont)
        #        {
        #            key = enum.currentKey();
        #
        #            if (substr(key, 1, 1) == '*') //It's a suffix
        #            {
        #                suffixTeamMap.insert(substr(key, 2, #IdentifierNameLen), enum.currentValue());
        #
        #                cont = enum.moveNext();
        #
        #                //Remove the suffix from the prefix map
        #                prefixTeamMap.remove(key);
        #            }
        #            else
        #            {
        #                cont = enum.moveNext();
        #            }
        #        }
        #
        #        infolog.globalCache().set(funcname(), 0, prefixTeamMap);
        #        infolog.globalCache().set(funcname(), 1, suffixTeamMap);
        #    }
        #
        #    // if the full object name exists in the prefix list
        #    if (prefixTeamMap.exists(_objectName))
        #    {
        #        return prefixTeamMap.lookup(_objectName);
        #    }
        #
        #    enum = suffixTeamMap.getEnumerator();
        #    while (enum.moveNext())
        #    {
        #        i = strlen(enum.currentKey());
        #        //Case sensitive compare
        #        if (strcmp(enum.currentKey(), substr(_objectName, strlen(_objectName)-i+1,i)) == 0)
        #            return enum.currentValue();
        #    }
        #
        #    for (i = strlen(_objectName); i; i--)
        #    {
        #        prefix = substr(_objectName, 1, i);
        #        if (prefixTeamMap.exists(prefix))
        #            return prefixTeamMap.lookup(prefix);
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #nextBuildNo
        #static public SysBuildNo nextBuildNo()
        #{
        #    #aot
        #    SysVersionControlTmpItem latestItem;
        #    SysTreeNode treenode = SysTreeNode::newTreeNodePath(#ClassesPath+'\\'+classStr(ApplicationVersion));
        #    TreeNode headRevision;
        #    TreeNode method;
        #    Filename filename;
        #    SysBuildNo buildNo;
        #    str delimiter;
        #    int pos, major, minor;
        #
        #    if (treenode &&
        #        versioncontrol.parmSysVersionControlSystem() &&
        #        !versioncontrol.allowCreate(treenode.parmTreeNode()))
        #    {
        #        latestItem.InternalFilename = versioncontrol.parmSysVersionControlSystem().fileName(treenode);
        #        filename = versioncontrol.parmSysVersionControlSystem().getItemVersion(treenode, latestItem);
        #
        #        headRevision = latestItem.getVirtualTreenode(filename);
        #        if (headRevision)
        #        {
        #            method = headRevision.AOTfindChild(staticMethodStr(ApplicationVersion, applBuildNo));
        #            if (method)
        #            {
        #                // Only a developer may execute this method.
        #                // The code is taken from SD reposiroty.
        #                //BP deviation documented
        #                buildNo = runbuf(method.AOTgetSource());
        #                delimiter = strRem(buildNo, '0123456789');
        #                if (strLen(delimiter) == 1)
        #                {
        #                    pos = strFind(buildNo, delimiter, 1, strLen(buildNo));
        #                    if (pos)
        #                    {
        #                        major = str2int(subStr(buildNo, 1, pos-1));
        #                        minor = str2int(subStr(buildNo, pos+1, strLen(buildNo)-pos));
        #                        switch (currentAOLayer())
        #                        {
        #                            case UtilEntryLevel::sys:
        #                                major++;
        #                                break;
        #
        #                            case UtilEntryLevel::syp:
        #                                minor++;
        #                                break;
        #                        }
        #                        return strFmt('%1%2%3', major, delimiter, minor);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #readExcelWorkbook
        #static client private Map readExcelWorkbook(Filename _filename = '')
        #{
        #    #File
        #    #define.ExcelTokenTotal('Total')
        #    #define.ExcelTokenGrandTotal('Grand Total')
        #    #define.ExcelTokenFeatureTeam('Feature Team')
        #
        #    Filename            filename    = _filename;
        #    SysExcelApplication application = SysExcelApplication::construct();
        #    SysExcelWorkbooks   workbooks   = application.workbooks();
        #    SysExcelWorkbook    workbook;
        #    SysExcelWorksheets  workSheets;
        #    SysExcelWorksheet   workSheet;
        #    SysExcelCells       cells;
        #    SysExcelCell        cell;
        #    str                 team;
        #    identifierName      prefix;
        #    boolean             inData;
        #    int                 i;
        #    Map                 prefixTeamMap  = new Map(Types::String, Types::String);
        #    Set                 ignorePrefixes = new Set(Types::String);
        #    SetEnumerator       setEnum;
        #    ;
        #    startLengthyOperation();
        #
        #    //If no filename argument was passed, default to X++ Ownership document in source depot
        #    if (prmisDefault(_filename))
        #    {
        #        filename = versioncontrol.parmSysVersionControlSystem().parmFolder();
        #        if (!filename)
        #            throw error(strFmt("@SYS50104", "@SYS16423"));
        #
        #        if (subStr(filename, strLen(filename), 1) != #FilePathDelimiter)
        #            filename += #FilePathDelimiter;
        #
        #        filename += @'Def\X++ Ownership.xls';
        #    }
        #
        #    filename = strReplace(filename, '%20', ' ');
        #    if (!WinAPI::fileExists(filename))
        #        throw error(strFmt("@SYS109820", filename));
        #
        #    if (workbooks.open(filename, false /*Update links*/, true /*Read only*/))
        #    {
        #        workbook   = workbooks.item(1);
        #        workSheets = workbook.worksheets();
        #        workSheet  = workSheets.itemFromName('IgnorePrefixes');
        #
        #        if (workSheet)
        #        {
        #            cells = workSheet.cells();
        #            do
        #            {
        #                i++;
        #                cell = cells.item(i, 1);
        #                prefix = cell.value().bStr();
        #                if (prefix)
        #                {
        #                    ignorePrefixes.add(prefix);
        #                }
        #            }
        #            while (prefix);
        #        }
        #
        #        workSheet = workSheets.itemFromName('Data');
        #        cells     = workSheet.cells();
        #        i         = 0;
        #
        #        while (true)
        #        {
        #            i++;
        #            cell = cells.item(i, 1);
        #            team = cell.value().bStr();
        #            if (team == #ExcelTokenGrandTotal)
        #            {
        #                inData = false;
        #                break;
        #            }
        #            if (inData && team && !strScan(team,#ExcelTokenTotal,1,maxInt()))
        #            {
        #                cell   = cells.item(i, 2);
        #                prefix = strRTrim(cell.value().bStr());
        #                prefixTeamMap.insert(prefix, team);
        #
        #                if (!strStartsWith(prefix, '*'))
        #                {
        #                    setEnum = ignorePrefixes.getEnumerator();
        #                    while (setEnum.moveNext())
        #                    {
        #                        //Do not overwrite if called out explicitly
        #                        if (!prefixTeamMap.exists(setEnum.current()+prefix))
        #                        {
        #                            prefixTeamMap.insert(setEnum.current()+prefix, team);
        #                        }
        #                    }
        #                }
        #            }
        #            if (team == #ExcelTokenFeatureTeam)
        #            {
        #                inData = true;
        #            }
        #        }
        #
        #        application.displayAlerts(false);
        #        application.quit();
        #        application.displayAlerts(true);
        #    }
        #    return prefixTeamMap;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFilebasedBackEndTfs unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlFilebasedBackEndTfs
    PROPERTIES
      Name                #SysVersionControlFilebasedBackEndTfs
      RunOn               #Client
      Origin              #{2D2438A1-0000-1000-9F05-2AF321EA33D0}
      LegacyId            #14497
    ENDPROPERTIES
    
    METHODS
      SOURCE #actionText
        #public str actionText(SysVersionControlSystemFileAction _action)
        #{
        #    str actionText;
        #    switch (_action)
        #    {
        #        case SysVersionControlSystemFileAction::Delete:
        #            actionText = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy::ActionTextForChangeType(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.AXChangeType::Delete);
        #            break;
        #        case SysVersionControlSystemFileAction::Add:
        #            actionText = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy::ActionTextForChangeType(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.AXChangeType::Add);
        #            break;
        #        case SysVersionControlSystemFileAction::Branch:
        #            actionText = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy::ActionTextForChangeType(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.AXChangeType::Branch);
        #            break;
        #        case SysVersionControlSystemFileAction::Edit:
        #            actionText = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy::ActionTextForChangeType(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.AXChangeType::Edit);
        #            break;
        #        case SysVersionControlSystemFileAction::Rename:
        #            actionText = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy::ActionTextForChangeType(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.AXChangeType::Rename);
        #            break;
        #    }
        #
        #    return actionText;
        #}
      ENDSOURCE
      SOURCE #actionTextForCheckedOutFile
        #public str actionTextForCheckedOutFile(Filename _filename)
        #{
        #    str actionText = '';
        #
        #    try
        #    {
        #        actionText = tfsWorkspaceProxy.ActionTextForPendingChange(_filename);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #    return actionText;
        #}
      ENDSOURCE
      SOURCE #changeListContents
        #public SysVersionControlTmpItem changeListContents(SysVersionControlChangeNumber _number)
        #{
        #    SysVersionControlTmpItem item;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList changeList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change change;
        #    int cnt;
        #    int i;
        #
        #    try
        #    {
        #        changeList = tfsWorkspaceProxy.GetByChangeSet(int642int(_number, true));
        #        cnt = changeList.get_Count();
        #        for (i = 0; i < cnt; i++)
        #        {
        #            change = changeList.get_Item(i);
        #            if (change.get_ItemType() ==  Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ItemType::File)
        #            {
        #                item.clear();
        #                this.constructLocalItemFromTfsChange(change, item);
        #                item.insert();
        #            }
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #changeListsPending
        #public SysVersionControlPendingChangeList changeListsPending()
        #{
        #//    System.Collections.ArrayList shelveSets;
        #//    Object tmpObj;
        #//    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Shelve shelveset;
        #//    SysVersionControlPendingChangeList changeList;
        #//    int cnt;
        #//    int i;
        #//    str name;
        #//    str comment;
        #//
        #//    try
        #//    {
        #//        shelveSets = tfsProxy.GetPendingShelvesets();
        #//        cnt = shelveSets.get_Count();
        #//        for (i = 0; i < cnt; i++)
        #//        {
        #//            tmpObj = shelveSets.get_Item(i);
        #//            shelveSet = tmpObj;
        #//            name = shelveSet.get_Name();
        #//            comment = shelveSet.get_Comment();
        #//            changeList.clear();
        #//            changeList.Id = name;
        #//            changeList.Description = comment;
        #//            changeList.insert();
        #//        }
        #//    }
        #//    catch (Exception::Error)
        #//    {
        #//        this.processTfsException();
        #//    }
        #//
        #//    return changeList;
        #
        #    //Tfs doesn't support pre-checkin changelist, the closest is shelveset
        #    return null;
        #
        #}
      ENDSOURCE
      SOURCE #checkWorkItemState
        #private void checkWorkItemState(SysVersionControlTmpWorkItems _workItems)
        #{
        #    SysVersionControlTmpWorkItems updatedWorkItem;
        #    boolean mainWarningIsDisplayed;
        #
        #    workItemProvider.flushCache();
        #
        #    while select _workItems
        #        order by _workItems.ID
        #        where _workItems.Selected == NoYes::Yes
        #        && _workItems.CheckInAction == SysVersionControlWorkItemAction::Resolve
        #    {
        #        updatedWorkItem = workItemProvider.getItemById(_workItems.ID);
        #        if (updatedWorkItem)
        #        {
        #            if (updatedWorkItem.State == _workItems.State)
        #            {
        #                if (!mainWarningIsDisplayed)
        #                {
        #                    mainWarningIsDisplayed = true;
        #                    warning(strFmt("@SYS4004748"));
        #                }
        #
        #                warning(strFmt("@SYS4004749", updatedWorkItem.Type, updatedWorkItem.ID, updatedWorkItem.Title));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlFilebasedBackEndTfs
        #implements SysVersionControlFilebasedBackEnd, SysVersionControlBackendDirSupport
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy tfsWorkspaceProxy;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConnectionManagerProxy tfsConnectionManagerProxy;
        #    SysVersionControlWorkItemProviderTFS workItemProvider;
        #
        #    SysVersionControlRepositoryFolder repositoryFolder;
        #
        #    #define.TfsActionGet         ('get')
        #
        #    #define.TfsGetStatusGetting     ('Getting')
        #    #define.TfsGetStatusReplacing   ('Replacing')
        #    #define.TfsGetStatusDelete      ('Deleting')
        #
        #    #define.TfsSeverityError    ('Error')
        #    #define.TfsSeverityWarning  ('Warning')
        #}
      ENDSOURCE
      SOURCE #constructLocalItemFromTfsChange
        #private void constructLocalItemFromTfsChange(
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change _change,
        #    SysVersionControlTmpItem item
        #)
        #{
        #    int changeNumber;
        #
        #    item.User = _change.get_User();
        #    item.ComputerName = _change.get_Computer();
        #    item.ActionText = _change.get_ActionText();
        #    item.Comment = _change.get_Comment();
        #
        #    //Tfs doesn't support version number, here use changeset number as version number
        #    changeNumber = _change.get_ChangeSetId();
        #    item.ChangeNumber = changeNumber;
        #    item.Version = changeNumber;
        #
        #    [item.vcsDate,
        #    item.vcsTime] = this.parseDateTime(_change.get_CreationDate());
        #
        #    item.InternalFilename = _change.get_InternalFileName();
        #    //item.FileName shouldn't be set in order to support Compare
        #    //item.ItemPath, item.item.ImageRes and item.FileName are set by SysVersionControlSystemFileBased class
        #}
      ENDSOURCE
      SOURCE #constructTfsChangeFromLocalItem
        #private Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change constructTfsChangeFromLocalItem(Filename _filename)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change pendingChange;
        #
        #    try
        #    {
        #        pendingChange = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change();
        #        pendingChange.set_LocalItem(_filename);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return pendingChange;
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    Map checkinFiles = new Map(Types::String, Types::Class);
        #    SysVersionControlTmpItem items;
        #    SysVersionControllable controllable;
        #    Filename filename;
        #
        #    items = this.filesPending('', repositoryFolder);
        #    while select items
        #    {
        #        controllable = items.getControllable();
        #        filename = items.InternalFilename;
        #        checkinFiles.insert(filename, controllable);
        #    }
        #
        #    this.fileSetCheckin(checkinFiles, _comment);
        #}
      ENDSOURCE
      SOURCE #createSyncResultMap
        #protected Map createSyncResultMap(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.GetCommandResult _result, boolean _silentOnSuccess = false)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.GetCommandOutput output;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.GetCommandOutputList outputs;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ItemType itemType;
        #    int numOfOutputs;
        #    int i;
        #    str status;
        #    str message;
        #    Filename filename;
        #    SysVersionControlSynchronizeCommand command;
        #    Map map = new Map(Types::String, Types::Enum);
        #
        #    outputs = _result.get_CommandOutputs();
        #    numOfOutputs = outputs.get_Count();
        #
        #    for (i = 0; i < numOfOutputs; i++)
        #    {
        #        output = outputs.get_Item(i);
        #        itemType = output.get_ItemType();
        #        //only file artifact should be processed
        #        if (itemType == Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ItemType::File)
        #        {
        #            //for vcsdef.xml retrieving at AX startup time no message will be shown
        #            if (!_silentOnSuccess)
        #            {
        #                message = output.ToString();
        #                info(message);
        #            }
        #
        #            status = output.get_Status();
        #            switch (status)
        #            {
        #                case #TfsGetStatusGetting:
        #                    command = SysVersionControlSynchronizeCommand::Add;
        #                    break;
        #
        #                case #TfsGetStatusReplacing:
        #                    command = SysVersionControlSynchronizeCommand::Update;
        #                    break;
        #
        #                case #TfsGetStatusDelete:
        #                    command = SysVersionControlSynchronizeCommand::Delete;
        #                    break;
        #
        #                default:
        #                   //In case the command is something else skip the file
        #                   //Tfs defined status
        #                   //case "Conflict":
        #                   //case "SourceDirectoryNotEmpty":
        #                   //case "SourceWritable":
        #                   //case "TargetIsDirectory":
        #                   //case "TargetLocalPending":
        #                   //case "TargetWritable":
        #                   //case "UnableToRefresh":
        #                    continue;
        #            }
        #
        #            //in case of renamed file the original element in AOT should be removed
        #            if (output.get_IsRename())
        #            {
        #                filename = output.get_SourceLocalItem();
        #                map.insert(filename, SysVersionControlSynchronizeCommand::Delete);
        #            }
        #
        #            //in case of deleted file only server item is available from GetCommandOutput
        #            if (output.get_IsDelete())
        #            {
        #                filename = this.serverItem2LocalItem(output.get_ServerItem());
        #
        #            }
        #            else
        #            {
        #                //normal sync
        #                filename = output.get_TargetLocalItem();
        #
        #            }
        #
        #            map.insert(filename, command);
        #
        #        }
        #    }
        #
        #    return map;
        #}
      ENDSOURCE
      SOURCE #description
        #public ClassDescription description()
        #{
        #    return "@SYS117839";
        #}
      ENDSOURCE
      SOURCE #directoryGetVersion
        #/// <summary>
        #/// Gets the directory of the specified version.
        #/// </summary>
        #/// <param name="_localDirectoryPath">
        #/// The local directory path.
        #/// </param>
        #/// <param name="_item">
        #/// The instance of the source control item.
        #/// </param>
        #/// <returns>
        #/// The path where the directory was extracted.
        #/// </returns>
        #public FilePath directoryGetVersion(FilePath _localDirectoryPath, SysVersionControlTmpItem _item)
        #{
        #    FilePath tmpDirectry;
        #
        #    #WinApi;
        #    try
        #    {
        #        tmpDirectry = strFmt('%1\\%2',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), WinAPI::createGUID() );
        #
        #        if (!WinAPI::folderExists(tmpDirectry))
        #        {
        #            WinAPI::createDirectoryPath(tmpDirectry);
        #            tfsWorkspaceProxy.DownloadDirectory(_localDirectoryPath, _item.Version, tmpDirectry);
        #        }
        #
        #        return tmpDirectry;
        #    }
        #
        #    catch (Exception::CLRError)
        #    {
        #        //silent this error since in case of new added file this method call will fail
        #        return '';
        #    }
        #
        #    return '';
        #}
        #
      ENDSOURCE
      SOURCE #directoryHistory
        #/// <summary>
        #/// Gets the history for the directory path.
        #/// </summary>
        #/// <param name="_localDirectoryPath">
        #/// The local path to the directory.
        #/// </param>
        #/// <returns>
        #/// The instance of the version control item that describes the history.
        #/// </returns>
        #public SysVersionControlTmpItem directoryHistory(FilePath _localDirectoryPath)
        #{
        #    SysVersionControlTmpItem item;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList changeList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change change;
        #    int i;
        #    int cnt;
        #
        #    try
        #    {
        #        changeList = tfsWorkspaceProxy.GetDirectoryHistory(_localDirectoryPath);
        #
        #        if (changeList)
        #        {
        #            cnt = changeList.get_Count();
        #            for (i = 0; i < cnt; i++)
        #            {
        #                change = changeList.get_Item(i);
        #                this.constructLocalItemFromTfsChange(change, item);
        #                item.insert();
        #            }
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileAddToVersionControl
        #public boolean fileAddToVersionControl(Filename _filename, SysVersionControlItemComment _comment = '')
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change pendingChange;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendOperationCommandResult commandResult;
        #    int numberOfAdds;
        #
        #    try
        #    {
        #        pendingChange = this.constructTfsChangeFromLocalItem(_filename);
        #        commandResult = tfsWorkspaceProxy.Add(pendingChange);
        #        numberOfAdds = commandResult.get_NumberOfOperations();
        #
        #        if (numberOfAdds > 0)
        #        {
        #            this.processPendingChangeResult(commandResult);
        #            return true;
        #        }
        #        else
        #        {
        #            this.processNonFatalError(commandResult.get_NonFatalErrorOutputList());
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileCheckedOutTo
        #public str fileCheckedOutTo(Filename _filename)
        #{
        #    str user = '';
        #
        #    try
        #    {
        #        user = tfsWorkspaceProxy.CheckedOutTo(_filename);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return user;
        #}
      ENDSOURCE
      SOURCE #fileCheckout
        #public boolean fileCheckout(Filename _filename)
        #{
        #    int numberOfFilesCheckedOut;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendOperationCommandResult commandResult;
        #
        #    try
        #    {
        #        commandResult = tfsWorkspaceProxy.CheckOut(_filename);
        #        numberOfFilesCheckedOut = commandResult.get_NumberOfOperations();
        #        if(numberOfFilesCheckedOut > 0)
        #        {
        #            this.processPendingChangeResult(commandResult);
        #            return true;
        #        }
        #        else
        #        {
        #            this.processNonFatalError(commandResult.get_NonFatalErrorOutputList());
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileDelete
        #public boolean fileDelete(Filename _filename)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendOperationCommandResult commandResult;
        #    int numOfDeletes;
        #
        #    try
        #    {
        #        commandResult = tfsWorkspaceProxy.Delete(_filename);
        #        numOfDeletes = commandResult.get_NumberOfOperations();
        #        if (numOfDeletes > 0)
        #        {
        #            this.processPendingChangeResult(commandResult);
        #            return true;
        #        }
        #        else
        #        {
        #            this.processNonFatalError(commandResult.get_NonFatalErrorOutputList());
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileExists
        #public boolean fileExists(Filename _filename)
        #{
        #    try
        #    {
        #        return tfsWorkspaceProxy.ServerItemExists(_filename);
        #    }
        #    catch(Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileGetVersion
        #//_version = -1 is not supported
        #public Filename fileGetVersion(Filename _filename, SysVersionControlTmpItem _item)
        #{
        #    Filename tmpfilename;
        #
        #    #WinApi
        #;
        #    try
        #    {
        #        tmpfilename = strFmt('%1\\%2',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), WinAPI::createGUID() );
        #
        #        if (!WinAPI::fileExists(tmpfilename))
        #        {
        #            tfsWorkspaceProxy.DownloadFile(_filename, _item.Version, tmpfilename);
        #        }
        #
        #        if (WinAPI::fileExists(tmpfilename))
        #        {
        #            return tmpfilename;
        #        }
        #    }
        #
        #    catch (Exception::CLRError)
        #    {
        #        //silent this error since in case of new added file this method call will fail
        #        return '';
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileHistory
        #public SysVersionControlTmpItem fileHistory(
        #    Filename                    _filename)
        #{
        #    SysVersionControlTmpItem item;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList changeList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change change;
        #    int i;
        #    int cnt;
        #
        #    try
        #    {
        #        changeList = tfsWorkspaceProxy.GetItemHistory(_filename);
        #
        #        if (changeList)
        #        {
        #            cnt = changeList.get_Count();
        #            for (i = 0; i < cnt; i++)
        #            {
        #                change = changeList.get_Item(i);
        #                this.constructLocalItemFromTfsChange(change, item);
        #                item.insert();
        #            }
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileLock
        #public boolean fileLock(Filename _filename)
        #{
        #    int numOfLocksSet;
        #
        #    try
        #    {
        #        numOfLocksSet = tfsWorkspaceProxy.SetLock(_filename);
        #        if (numOfLocksSet > 0)
        #        {
        #            return true;
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileRename
        #public boolean fileRename(Filename _oldFilename, Filename _newFilename)
        #{
        #    int numberOfFilesRenamed;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendOperationCommandResult commandResult;
        #    #WinApi
        #
        #    try
        #    {
        #        commandResult = tfsWorkspaceProxy.Rename(_oldFilename, _newFilename);
        #        numberOfFilesRenamed = commandResult.get_NumberOfOperations();
        #        if(numberOfFilesRenamed > 0)
        #        {
        #            //rename in TFS keeps new file in readonly mode
        #            //in order to align with AX's vcs state controlling, calling check out to make it writtable
        #            commandResult = tfsWorkspaceProxy.CheckOut(_newFilename);
        #            this.processPendingChangeResult(commandResult);
        #            return true;
        #        }
        #        else
        #        {
        #            this.processNonFatalError(commandResult.get_NonFatalErrorOutputList());
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileSetCheckin
        #public boolean fileSetCheckin(
        #    Map _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList changeList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change change;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.CheckInCommandResult result;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.CommitCheckInOutput commitCheckIn;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList commitChanges;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList undoneChanges;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemCheckInInfoProxyCollection workItemsCheckIn;
        #    int cnt;
        #    int i;
        #    Filename internalFileName;
        #    MapEnumerator enum;
        #    Filename filename;
        #    int changeSet;
        #    boolean checkinSucceeded;
        #
        #    try
        #    {
        #        changeList = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList();
        #
        #        enum = _setOfFiles.getEnumerator();
        #        while (enum.moveNext())
        #        {
        #            filename = enum.currentKey();
        #            change = this.constructTfsChangeFromLocalItem(filename);
        #            changeList.Add(change);
        #        }
        #
        #        workItemsCheckIn = workItemProvider.getCheckInItems(_workItems);
        #
        #        //TFS also provide EvaluateCheckIn() method
        #        //that Evaluates a set of pending changes to see whether they are ready to check in
        #        //we assume in AX most of the check-will doesn't encounter conflicts
        #        result = tfsWorkspaceProxy.CheckIn(changeList, _comment, workItemsCheckIn);
        #
        #        changeSet = result.get_ChangeSet();
        #        if(changeSet == 0)
        #        {
        #            info("@SYS118199");
        #            checkinSucceeded = true;
        #        }
        #        else
        #        {
        #            checkinSucceeded = true;
        #
        #            //CommitCheckIn
        #            commitCheckIn = result.get_CommitCheckInOutput();
        #            commitChanges = commitCheckIn.get_Changes();
        #            undoneChanges = commitCheckIn.get_UndoneChanges();
        #            cnt = commitChanges.get_Count();
        #            for (i = 0; i < cnt; i++)
        #            {
        #                change = commitChanges.get_Item(i);
        #                internalFileName = change.get_InternalFileName();
        #                info(strFmt("@SYS96136", internalFileName));
        #            }
        #            cnt = undoneChanges.get_Count();
        #            for (i = 0; i < cnt; i++)
        #            {
        #                change = undoneChanges.get_Item(i);
        #                internalFileName = change.get_InternalFileName();
        #                info(strFmt("@SYS118200", internalFileName));
        #            }
        #        }
        #
        #        this.checkWorkItemState(_workItems);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        checkinSucceeded = false;
        #        //in case of check in fail we supress conflict error and try to resolve it
        #    }
        #
        #    return checkinSucceeded;
        #}
      ENDSOURCE
      SOURCE #fileSetResolve
        #public boolean fileSetResolve(Map _setOfFiles)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.CheckInError checkInError;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictOutputList conflictList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictOutput conflict;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution conflictResolution;
        #    int cnt;
        #    int i;
        #    boolean allConflictResolved = true;
        #    str conflictMessage;
        #    boolean isResolvable;
        #    boolean conflictResolved;
        #    str serverItem;
        #    boolean isLabelFile;
        #    Filename localItem;
        #    SysVersionControlResolution resolution;
        #    SysVersionControllable controllable;
        #    SysVersionControlUserInterfaceProvider uiProvider = versioncontrol.parmUserInterfaceProvider();
        #
        #    try
        #    {
        #        checkInError = tfsWorkspaceProxy.get_LastCheckInError();
        #
        #        //Conflict
        #        conflictList = checkInError.get_ConflictOutputList();
        #        cnt = conflictList.get_Count();
        #        //for now any conflicts means fail to checkin
        #        for (i = 0; i < cnt; i++)
        #        {
        #            conflict = conflictList.get_Item(i);
        #            conflictMessage = conflict.ToString();
        #            //indicate here we have a conflict
        #            warning(conflictMessage);
        #            isResolvable = conflict.get_Resolvable();
        #            serverItem = conflict.get_ServerItem();
        #            if (isResolvable)
        #            {
        #                //Resolution logic: Label File - AcceptYours | Others - AcceptMerge
        #                localItem = this.serverItem2LocalItem(serverItem);
        #                controllable = _setOfFiles.lookup(localItem);
        #                isLabelFile = controllable is SysLabelFile;
        #                resolution = isLabelFile ? SysVersionControlResolution::AcceptYours :
        #                                           SysVersionControlResolution::AcceptMerge;
        #
        #                conflictResolution = this.parseResolution(resolution);
        #                conflictResolved = tfsWorkspaceProxy.Resolve(serverItem, conflictResolution);
        #                //in case of any resolve failure we record the failure and continue
        #                if (!conflictResolved)
        #                {
        #                    error(strFmt("@SYS118206", serverItem));
        #                    allConflictResolved = false;
        #                }
        #                else
        #                {
        #                    // get the resolved item back in the AOT.
        #                    controllable.fromFile(localItem);
        #                    info(strFmt("@SYS122947", serverItem));
        #                }
        #            }
        #            else
        #            {
        #                //error like file that can't be updated on disk due to the file being locked
        #                error(strFmt("@SYS118207", serverItem));
        #                allConflictResolved = false;
        #            }
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #        allConflictResolved = false;
        #    }
        #
        #    return allConflictResolved;
        #}
      ENDSOURCE
      SOURCE #filesPending
        #public SysVersionControlTmpItem filesPending(
        #    SysVersionControlChangeListId _changeListId,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    SysVersionControlTmpItem item;
        #    int i;
        #    int itemCounts;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeList changeList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.Change change;
        #
        #    try
        #    {
        #        //Tfs doesn't support pre-checkin changelist, the closest is shelveset
        #        //_folder parameter is not necessary unless this input value can give another folder than repository folder that tfsProxy map to
        #        //get all pending changes
        #        changeList = tfsWorkspaceProxy.GetCheckedOutItems();
        #        itemCounts = changeList.get_Count();
        #
        #        for(i = 0; i < itemCounts; i++)
        #        {
        #            change = changeList.get_Item(i);
        #            this.constructLocalItemFromTfsChange(change, item);
        #
        #            item.insert();
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileSynchronize
        #public Map fileSynchronize(
        #    Filename _filename,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.GetCommandResult result;
        #
        #    try
        #    {
        #        //_version doesn't support in Tfs, here it means changeset number
        #        //on single file case we delete local file
        #        result = tfsWorkspaceProxy.Get(_filename, _syncParameters.parmVersion(), _syncParameters.parmForce());
        #        if (this.processGetCommandResult(result, _syncParameters.parmSilent()))
        #        {
        #            return this.createSyncResultMap(result, _syncParameters.parmSilent());
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #fileUndoCheckout
        #public container fileUndoCheckout(Filename _filename)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendOperationCommandResult result;
        #    int numberOfChanges;
        #    str undoLocalItem;
        #
        #    try
        #    {
        #        //this method also takes care of undo add, undo delete and undo rename
        #        result = tfsWorkspaceProxy.UndoCheckOut(_filename);
        #        undoLocalItem = this.processPendingChangeResult(result);
        #        numberofChanges = result.get_NumberOfOperations();
        #        if (numberOfChanges > 0 && undoLocalItem)
        #        {
        #            //in case of undo rename, file in local repository left as writable
        #            //SysVersionControlSystemFileBased.commandUndoCheckOut will replace the writable file with latest from server
        #            return [true, undoLocalItem];
        #        }
        #        else
        #        {
        #            this.processNonFatalError(result.get_NonFatalErrorOutputList());
        #        }
        #
        #    }
        #    catch(Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return [false, ''];
        #}
      ENDSOURCE
      SOURCE #fileUnlock
        #public boolean fileUnlock(Filename _filename)
        #{
        #    int numOfUnlocks;
        #
        #    try
        #    {
        #        numOfUnlocks = tfsWorkspaceProxy.Unlock(_filename);
        #        if (numOfUnlocks > 0)
        #        {
        #            return true;
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #folderChanges
        #public SysVersionControlTmpChange folderChanges(FilePath _folder)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeSetList list;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ChangeSet changeset;
        #    int cnt;
        #    int i;
        #    SysVersionControlTmpChange item;
        #    int changesetId;
        #    try
        #    {
        #        list = tfsWorkspaceProxy.GetChangeSets(_folder);
        #        cnt = list.get_Count();
        #        for (i = 0; i < cnt; i++)
        #        {
        #            changeset = list.get_Item(i);
        #            item.clear();
        #            item.User = changeset.get_User();
        #            item.ComputerName = changeset.get_ComputerName();
        #            changesetId = changeset.get_Id();
        #            item.ChangeNumber = changesetId;
        #            item.Comment = changeset.get_Comment();
        #            item.StatusText = changeset.get_Status();
        #            [item.vcsDate,
        #            item.vcsTime] = this.parseDateTime(changeset.get_CreationDate());
        #            item.insert();
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #folderSetSynchronize
        #public Map folderSetSynchronize(
        #    Set _folderSet,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    SetEnumerator folderSetEnum = _folderSet.getEnumerator();
        #    str syncFolders;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.GetCommandResult result;
        #    #define.folderDelimiter(';')
        #
        #    while(folderSetEnum.moveNext())
        #    {
        #        syncFolders += strFmt('\%1\\\%2', folderSetEnum.current(), #folderDelimiter);
        #    }
        #
        #    try
        #    {
        #
        #        result = tfsWorkspaceProxy.Get(syncFolders, Global::enum2int(_syncParameters.parmChangeListNumber()),_syncParameters.parmForce());
        #        if (this.processGetCommandResult(result))
        #        {
        #            return this.createSyncResultMap(result);
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #init
        #public SysVersionControlSystemStatus init(SysVersionControlParameters _parameters)
        #{
        #    int infologLine = infologLine();
        #    SysVersionControlTfsServer tfsServer = _parameters.TfsServer;
        #    SysVersionControlTfsProject tfsProject = _parameters.TfsProject;
        #    SysVersionControlTfsBranch tfsBranch = _parameters.TfsBranch;
        #    repositoryFolder = _parameters.getTargetRepositoryFolder();
        #
        #    try
        #    {
        #        tfsConnectionManagerProxy = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConnectionManagerProxy(tfsServer, tfsProject);
        #        tfsWorkspaceProxy = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkspaceProxy();
        #        tfsWorkspaceProxy.Init(tfsConnectionManagerProxy, _parameters.RepositoryFolder, tfsBranch);
        #        workItemProvider = new SysVersionControlWorkItemProviderTFS(tfsConnectionManagerProxy);
        #
        #        return SysVersionControlSystemStatus::Connected;
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processTfsException();
        #    }
        #    catch (Exception::Internal)
        #    {
        #        infolog.clear(infologLine);
        #        this.processTfsException();
        #    }
        #    catch
        #    {
        #        error(strFmt("@SYS343139", tfsServer));
        #    }
        #
        #    //for future enhancement tfs should support offline scenario
        #    return SysVersionControlSystemStatus::NotConnected;
        #
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #public void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #}
      ENDSOURCE
      SOURCE #parseDateTime
        #//parse .NET's System.DateTime to Ax's Date and Time
        #private container parseDateTime(System.DateTime _dateTime)
        #{
        #    utcdatetime utc_vcsDateTime = Global::clrSystemDateTime2UtcDateTime(_dateTime);
        #
        #    return [DateTimeUtil::date(utc_vcsDateTime), DateTimeUtil::time(utc_vcsDateTime)];
        #}
      ENDSOURCE
      SOURCE #parseResolution
        #private Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution parseResolution(SysVersionControlResolution _resolution)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution conflictResolution;
        #
        #    switch (_resolution)
        #    {
        #        case SysVersionControlResolution::None:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::None;
        #            break;
        #        case SysVersionControlResolution::AcceptMerge:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::AcceptMerge;
        #            break;
        #        case SysVersionControlResolution::AcceptYours:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::AcceptYours;
        #            break;
        #        case SysVersionControlResolution::AcceptTheirs:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::AcceptTheirs;
        #            break;
        #        case SysVersionControlResolution::DeleteConflict:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::DeleteConflict;
        #            break;
        #        case SysVersionControlResolution::AcceptYoursRenameTheirs:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::AcceptYoursRenameTheirs;
        #            break;
        #        case SysVersionControlResolution::OverwriteLocal:
        #            conflictResolution = Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConflictResolution::OverwriteLocal;
        #            break;
        #    }
        #
        #    return conflictResolution;
        #}
      ENDSOURCE
      SOURCE #processGetCommandResult
        #private boolean processGetCommandResult(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.GetCommandResult _commandResult, boolean _noInfo=false)
        #{
        #    int numOfFailures;
        #    System.Collections.ArrayList failures;
        #    System.Object object;
        #    str severity;
        #    str message;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.FailureOrWarning failure;
        #    int indexOfFailures;
        #    int numOfWarnings;
        #    SysVersionControlUserInterfaceProvider uiProvider = versioncontrol.parmUserInterfaceProvider();
        #
        #    numOfFailures = _commandResult.get_NumFailures();
        #    numOfWarnings = _commandResult.get_NumWarnings();
        #
        #    if (numOfFailures == 0 &&
        #        numOfWarnings == 0 &&
        #        _noInfo == true)
        #        return true;
        #
        #    setPrefix(#TfsActionGet);
        #
        #    //Write general information to infolog
        #    info(_commandResult.ToString());
        #
        #    //Write specific errors and warnings to infolog
        #    if (numOfFailures > 0)
        #    {
        #        failures = _commandResult.get_Failures();
        #
        #        for (indexOfFailures = 0; indexOfFailures < numOfFailures; indexOfFailures++)
        #        {
        #            object = failures.get_Item(indexOfFailures);
        #            failure = object;
        #            severity = failure.get_Severity();
        #            message = failure.get_Message();
        #            switch (severity)
        #            {
        #                case #TfsSeverityError:
        #                error(message);
        #                break;
        #                case #TfsSeverityWarning:
        #                warning(message);
        #                break;
        #                default:
        #                info(message);
        #                break;
        #            }
        #        }
        #
        #        return false;
        #    }
        #
        #    return this.processNonFatalError(_commandResult.get_NonFatalErrorOutputList());
        #}
      ENDSOURCE
      SOURCE #processNonFatalError
        #private boolean processNonFatalError(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.NonFatalErrorOutputList _nonFatalErrorList)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.NonFatalErrorOutput nonFatalError;
        #    int cnt;
        #    int i;
        #    boolean isException;
        #    str failureMessage;
        #    boolean isError;
        #    SysVersionControlUserInterfaceProvider uiProvider = versioncontrol.parmUserInterfaceProvider();
        #
        #    cnt = _nonFatalErrorList.get_Count();
        #
        #    if (cnt > 0)
        #    {
        #        setPrefix(versioncontrol.parmSysVersionControlSystem().parmFolder());
        #        error("@SYS118209");
        #        for (i = 0; i < cnt; i++)
        #        {
        #            nonFatalError = _nonFatalErrorList.get_Item(i);
        #            isException = nonFatalError.get_IsException();
        #            failureMessage = nonFatalError.ToString();
        #            if (isException)
        #            {
        #                error(failureMessage);
        #                isError = true;
        #            }
        #            else
        #            {
        #                warning(failureMessage);
        #            }
        #        }
        #    }
        #
        #    //if non-fatal error contains exception, this operation is treated as failure
        #    return !isError;
        #}
      ENDSOURCE
      SOURCE #processPendingChangeResult
        #private str processPendingChangeResult(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendOperationCommandResult _result)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendingChangeOutputList outputList;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.PendingChangeOutput output;
        #    int cnt;
        #    int i;
        #    str message;
        #    str localItem;
        #    SysVersionControlUserInterfaceProvider uiProvider = versioncontrol.parmUserInterfaceProvider();
        #
        #    outputList = _result.get_PendingChangeList();
        #    cnt = outputList.get_Count();
        #    for (i = 0; i < cnt; i++)
        #    {
        #        output = outputList.get_Item(i);
        #        message = output.ToString();
        #        info(message);
        #        localItem = output.get_LocalItem();
        #    }
        #
        #    //the latest local item from pending change result should contain correct value
        #    return localItem;
        #}
      ENDSOURCE
      SOURCE #processTfsException
        #private void processTfsException()
        #{
        #    System.Exception exception;
        #    str errorMessage;
        #    SysVersionControlUserInterfaceProvider uiProvider = versioncontrol.parmUserInterfaceProvider();
        #
        #    setPrefix(repositoryFolder);
        #    error("@SYS117840");
        #
        #    exception = CLRInterop::getLastException();
        #    if (exception)
        #    {
        #        //first error always show clrinterop error, ignore
        #        exception = exception.get_InnerException();
        #        while (exception != null)
        #        {
        #            errorMessage = exception.get_Message();
        #            error(errorMessage);
        #            exception = exception.get_InnerException();
        #        }
        #
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #requireSyncBeforeCheckOut
        #public boolean requireSyncBeforeCheckOut()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    //not supported
        #    return [''];
        #}
      ENDSOURCE
      SOURCE #reviewFileSet
        #public void reviewFileSet(
        #    Set _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave _fileNameOfReviewPackage,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    //not supported
        #}
      ENDSOURCE
      SOURCE #serverItem2LocalItem
        #private Filename serverItem2LocalItem(
        #    Filename        _serverItem)
        #{
        #    SysVersionControlSystemFileBased vcs = versioncontrol.parmSysVersionControlSystem() as SysVersionControlSystemFileBased;
        #    Filename filename = _serverItem;
        #    SysVersionControlItemPath itemPath;
        #    SysVersionControllable controllable;
        #
        #    if (vcs)
        #    {
        #        // Prefer using TFS Backend to map the server item to a local item
        #        filename = tfsWorkspaceProxy.GetLocalItemForServerItem(_serverItem);
        #
        #        if (!filename)
        #        {
        #            itemPath = vcs.filename2ItemPath(_serverItem);
        #            controllable = SysVersionControlTmpItem::newControllable(itemPath, '' /*We don't have a filename*/);
        #            if (controllable)
        #            {
        #                filename = vcs.fileName(controllable);
        #            }
        #        }
        #    }
        #
        #    return filename;
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #    str instanceInfo;
        #
        #    instanceInfo = tfsWorkspaceProxy.GetInstanceInfo(repositoryFolder);
        #    info(instanceInfo);
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #public boolean supportChangeVersion()
        #{
        #    //Tfs doesn't support change version number
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #public boolean supportCheckInWizard()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #public boolean supportMultipleCheckout()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #public boolean supportPendingChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #public boolean supportReviews()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #public boolean supportSubmittedChangeLists()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #public boolean supportSyncLabel()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains a valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized <c>SysVersionControlWorkItemProvider</c> object.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return workItemProvider;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlFilebasedBackEndTfs construct()
        #{
        #    return new SysVersionControlFilebasedBackEndTfs();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFileBasedBackEndVSS unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlFileBasedBackEndVSS
    PROPERTIES
      Name                #SysVersionControlFileBasedBackEndVSS
      RunOn               #Client
      Origin              #{2D240000-0000-1000-9F3B-77AC3B8550CB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #actionText
        #/// <summary>
        #/// Converts an action to the description of the back end of the action.
        #/// </summary>
        #/// <param name="_action">
        #/// The action to convert.
        #/// </param>
        #/// <returns>
        #/// The description of the back end of the action.
        #/// </returns>
        #/// <remarks>
        #/// The description of the back end of the action must match the populated values in the <c>SysVersionControlTmpItem.ActionText</c> table field.
        #/// </remarks>
        #public str actionText(SysVersionControlSystemFileAction _action)
        #{
        #    switch (_action)
        #    {
        #        case SysVersionControlSystemFileAction::Add:
        #            return #VSSActionAdd;
        #        case SysVersionControlSystemFileAction::Delete:
        #            return #VSSActionDelete;
        #        case SysVersionControlSystemFileAction::Edit:
        #            return #VSSActionCheckedOut;
        #        case SysVersionControlSystemFileAction::Rename:
        #            return #VSSActionRename;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #actionTextForCheckedOutFile
        #/// <summary>
        #///    Gets the action text for a checked out file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file for which to retrieve the action text.
        #/// </param>
        #/// <returns>
        #///    The action text for this file.
        #/// </returns>
        #public str actionTextForCheckedOutFile(Filename _filename)
        #{
        #    VSSItem vssItem = this.constructVSSItem(_filename);
        #    str actionString;
        #
        #    if (vssItem)
        #    {
        #        actionString = vssItem.getActionText();
        #
        #        if (strStartsWith(actionString ,#VSSActionAdd))
        #        {
        #            return #VSSActionAdd;
        #        }
        #        else if (strStartsWith(actionString, #VSSActionCheckedOut))
        #        {
        #            return #VSSActionCheckedOut;
        #        }
        #        else if (strStartsWith(actionString, #VSSActionDelete))
        #        {
        #            return #VSSActionDelete;
        #        }
        #        else if (strStartsWith(actionString, #VSSActionRename))
        #        {
        #            return #VSSActionRename;
        #        }
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #changeListContents
        #/// <summary>
        #///    Gets the contents of a checked-in change list.
        #/// </summary>
        #/// <param name="_number">
        #///    The specified number of the change list of which to retrieve the contents.
        #/// </param>
        #/// <returns>
        #///    The contents of the change list.
        #/// </returns>
        #/// <remarks>
        #///    Not supported for Visual SourceSafe.
        #/// </remarks>
        #public SysVersionControlTmpItem changeListContents(SysVersionControlChangeNumber _number)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #changeListsPending
        #/// <summary>
        #/// Gets the pending change lists.
        #/// </summary>
        #/// <returns>
        #/// The pending change lists.
        #/// </returns>
        #/// <remarks>
        #/// Not supported for Visual Source Safe.
        #/// </remarks>
        #public SysVersionControlPendingChangeList changeListsPending()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysVersionControlFileBasedBackEnd</c> class controls a file based version control system for
        #///    Microsoft Visual SourceSafe.
        #/// </summary>
        #/// <remarks>
        #///    All operations on this class are based on files and folders.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlFileBasedBackendVSS
        #implements SysVersionControlFilebasedBackEnd
        #{
        #    #define.VSSActionAdd('Created')
        #    #define.VSSActionCheckedOut('Checked out')
        #    #define.VSSActionDelete('Deleted')
        #    #define.VSSActionRename('Renamed')
        #
        #    #WinAPI
        #
        #    VSS vssDb;
        #
        #    SysVersionControlRepositoryFolder folder;
        #    Filename vssProjectRoot;
        #    Filename vssIni;
        #}
      ENDSOURCE
      SOURCE #constructVSSItem
        #private VSSItem constructVSSItem(Filename _filename, boolean _project = false)
        #{
        #    Filename vcsPath;
        #    VSSItem vssItem;
        #    #File
        #
        #    if ( _project )
        #    {
        #        [vcsPath] = fileNameSplit(_filename);
        #    }
        #    else
        #    {
        #        vcsPath = _filename;
        #    }
        #
        #    vcsPath = this.convertPathtoVSSPath(vcsPath);
        #    vssItem = vssDb.getVSSItem(vcsPath, _filename, false, 0);
        #
        #    if ( !vssItem && _project )
        #    {
        #        // Get rid of the File or project not found error message
        #        infolog.clear(infologLine()-1);
        #
        #        vssItem = vssDb.newSubProject(vcsPath, _filename);
        #    }
        #    else if ( !vssItem && !_project && strEndsWith(_filename, #ald))
        #    {
        #        // Get rid of the File or project not found error message
        #        infolog.clear(infologLine()-1);
        #    }
        #
        #    return vssItem;
        #}
        #
      ENDSOURCE
      SOURCE #convertFolderSetToVSSFolderSet
        #private Set convertFolderSetToVSSFolderSet(Set _folderSet)
        #{
        #    Set vssFolderSet = new Set(Types::String);
        #    SetEnumerator enumerator;
        #
        #    if (_folderSet)
        #    {
        #        enumerator = _folderSet.getEnumerator();
        #        while (enumerator.moveNext())
        #        {
        #            vssFolderSet.add(this.convertPathtoVSSPath(enumerator.current()));
        #        }
        #    }
        #    return vssFolderSet;
        #}
      ENDSOURCE
      SOURCE #convertPathtoVSSPath
        #private str convertPathtoVSSPath(Filename _filename)
        #{
        #    int  pos;
        #    str vssPath = _filename;
        #
        #    pos = strscan( vssPath, folder, 1, strlen( vssPath ));
        #
        #    if( pos )
        #    {
        #        vssPath = substr( vssPath, pos + strlen( folder ), strlen( vssPath ));
        #    }
        #
        #    vssPath = strReplace(vssPath, '\\', '/');
        #    return vssPath;
        #}
      ENDSOURCE
      SOURCE #convertVSSPathToPath
        #private str convertVSSPathToPath(SysVersionControlItemPath _vssPath)
        #{
        #    Filename filename = _vssPath;
        #
        #    if (filename)
        #    {
        #        // Delete VSSProject root from path
        #        if (strStartsWith(filename, vssProjectRoot))
        #        {
        #            filename = strdel(filename, 1, strlen(vssProjectRoot));
        #        }
        #
        #        if (!strStartsWith(filename, '/'))
        #        {
        #            filename = '/' + filename;
        #        }
        #
        #        // Flip slash to backslash
        #        filename = strReplace(filename, '/', '\\');
        #
        #        // Prefix with repository folder
        #        if (strEndsWith(folder, '\\'))
        #        {
        #            filename = strdel(folder, strlen(folder), - 1) + filename;
        #        }
        #        else
        #        {
        #            filename = folder + filename;
        #        }
        #    }
        #
        #    return filename;
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #/// <summary>
        #/// Checks in the repository.
        #/// </summary>
        #/// <param name="_comment">
        #/// The comment to use for the check-in.
        #/// </param>
        #/// <remarks>
        #/// This method is invoked at the end of the create repository operation.
        #/// </remarks>
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    Map checkinFiles = new Map(Types::String, Types::Class);
        #    SysVersionControllable controllable;
        #    Filename filename;
        #    SysVersionControlTmpItem items = this.filesPending('', '');
        #
        #    items = this.filesPending('', '');
        #    while select items
        #    {
        #        controllable = items.getControllable();
        #        filename = items.Filename;
        #        checkinFiles.insert(filename, controllable);
        #    }
        #
        #    this.fileSetCheckin(checkinFiles, _comment);
        #}
      ENDSOURCE
      SOURCE #description
        #/// <summary>
        #/// Provides a description of the class.
        #/// </summary>
        #/// <returns>
        #/// The class description.
        #/// </returns>
        #public ClassDescription description()
        #{
        #    return "@SYS94374";
        #}
      ENDSOURCE
      SOURCE #fileAddToVersionControl
        #/// <summary>
        #///    Adds a file to the version control system.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to add.
        #/// </param>
        #/// <param name="_comment">
        #///    A comment that is associated with the added file; optional.
        #/// </param>
        #/// <returns>
        #///    true if the file was added successfully; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file will be available to other users after a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileAddToVersionControl(Filename _filename, SysVersionControlItemComment _comment = '')
        #{
        #    VSSItem vssItem;
        #
        #    vssItem = this.constructVSSItem(_filename, true);
        #    if (vssItem)
        #    {
        #        // Add the item to VSS and leave the item checked out. Check in will either be made by user or create repository.
        #        if(vssItem.add(true, _comment))
        #        {
        #            vssItem = this.constructVSSItem(_filename);
        #            if(vssItem)
        #            {
        #                info(strfmt("@SYS96135", vssItem.getVSSPath()));
        #                return true;
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileCheckedOutTo
        #/// <summary>
        #/// Returns a list of users to whom a file is checked out to.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// A comma separated list of users; otherwise, an empty string.
        #/// </returns>
        #public str fileCheckedOutTo(Filename _filename)
        #{
        #    VSSItem vssItem = this.constructVSSItem(_filename);
        #
        #    return vssItem != null ? con2Str( vssItem.getCheckedOutTo(), ',' ) : '';
        #}
      ENDSOURCE
      SOURCE #fileCheckout
        #/// <summary>
        #///    Checks out a file to be edited.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to check out.
        #/// </param>
        #/// <returns>
        #///    true if the file is checked out; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the revision that is checked out is not the most current, MorphX will try a merge operation for
        #///    certain file types.
        #/// </remarks>
        #public boolean fileCheckout(Filename _filename)
        #{
        #    VSSItem vssItem;
        #
        #    vssItem = this.constructVSSItem(_filename);
        #    if (vssItem)
        #    {
        #        if (vssItem.checkout())
        #        {
        #            info(strfmt("@SYS96137", vssItem.getVSSPath()));
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileDelete
        #/// <summary>
        #///    Checks out a file for deletion.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to delete.
        #/// </param>
        #/// <returns>
        #///    true if the file was deleted successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file is deleted in the system by a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileDelete(Filename _filename)
        #{
        #    VSSItem vssItem = this.constructVSSItem(_filename);
        #
        #    if ( vssItem && vssItem.delete() )
        #    {
        #        info( strfmt("@SYS96138", vssItem.getVSSPath() ) );
        #        return true;
        #    }
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #fileExists
        #/// <summary>
        #///    Verifies whether a file exists in the system.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to verify.
        #/// </param>
        #/// <returns>
        #///    true if the file exists in the system; otherwise, false.
        #/// </returns>
        #public boolean fileExists(Filename _filename)
        #{
        #    VSSItem vssItem = this.constructVSSItem(_filename);
        #
        #    return ( vssItem != null );
        #}
      ENDSOURCE
      SOURCE #fileGetVersion
        #/// <summary>
        #///    Retrieves a version of a file from the storage in the back end.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve a version of.
        #/// </param>
        #/// <param name="_item">
        #///    The corresponding temporary record of the version control item in the requested version.
        #/// </param>
        #/// <returns>
        #///    A fully qualified file name to a temporary location where the version of the file has been saved.
        #/// </returns>
        #/// <remarks>
        #///    If _version is 0 (zero), the latest version of the file is requested.If _version is -1 (minus-one),
        #///    the back end copy of the local version is requested. That is the version that the user received the
        #///    last time that they synchronized.
        #/// </remarks>
        #public Filename fileGetVersion(Filename _filename, SysVersionControlTmpItem _item)
        #{
        #    #WinApi
        #    SysVersionControllable controllable;
        #
        #    Filename tmpfilename;
        #    VSSItem  vssItem = this.constructVSSItem(_filename);
        #    int      version = _item.Version;
        #
        #    if (vssItem)
        #    {
        #        // VSS does not support getting the version of the last sync, so get the head version
        #        if ( version == -1 )
        #        {
        #            version = 1;
        #        }
        #        controllable = _item.getControllable();
        #
        #        tmpfilename = strfmt('%1\\%2#%3%4',
        #            xApplication::getFolderPath(#CSIDL_INTERNET_CACHE),
        #            strReplace(controllable.versionControlItemPath(), '\\', '_'),
        #            version,
        #            controllable.fileExtension());
        #
        #        vssItem.get(true, version, _item.Label, tmpfilename);
        #
        #        if (WinAPI::fileExists(tmpfilename))
        #        {
        #            return tmpfilename;
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileHistory
        #/// <summary>
        #///    Retrieves a list of all revisions of a file from the systems storage.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve information for.
        #/// </param>
        #/// <returns>
        #///    A temporary table that contains a record that describes each revision.
        #/// </returns>
        #public SysVersionControlTmpItem fileHistory(
        #    Filename                    _filename)
        #{
        #    return this.getFileNameHistory(_filename);
        #}
      ENDSOURCE
      SOURCE #fileLock
        #public boolean fileLock(Filename _filename)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileRename
        #/// <summary>
        #/// Renames a file.
        #/// </summary>
        #/// <param name="_oldFilename">
        #/// The file to rename.
        #/// </param>
        #/// <param name="_newFilename">
        #/// The new name of the file.
        #/// </param>
        #/// <returns>
        #/// true if the renaming is successful; otherwise, false.
        #/// </returns>
        #public boolean fileRename(Filename _oldFilename, Filename _newFilename)
        #{
        #    VSSItem     vssItem = this.constructVSSItem(_oldFilename);
        #    VSSItem     vssItemMove;
        #    str         oldVSSPath;
        #    Filename    newName, oldName;
        #    str         newFileExt, oldFileExt;
        #    FilePath    newFilePath, oldFilePath;
        #    int         newFileHandle;
        #    #WinApi
        #
        #    if (vssItem)
        #    {
        #        if (vssItem.isRenamed())
        #            return true;
        #
        #        oldVSSPath = vssItem.getVSSPath();
        #
        #        [newFilePath, newName, newFileExt] = fileNameSplit(_newFilename);
        #        [oldFilePath, oldName, oldFileExt] = fileNameSplit(_oldFilename);
        #
        #        // if new and old filename are the same and paths are different, it's a move.
        #        if (newName == oldName && newFilePath != oldFilePath)
        #        {
        #            vssItemMove = this.constructVSSItem(_newFilename, true);
        #            if (vssItemMove)
        #            {
        #                // Create the new file as vssItemMove.add expect its' existence. FilebasedVCS will export the object.
        #                WinAPI::createDirectoryPath(newFilePath);
        #                newFileHandle = WinAPI::createFile(_newFilename, #CREATE_NEW, #CREATE_ALWAYS);
        #
        #                if (newFileHandle)
        #                {
        #                    WinAPI::closeHandle(newFileHandle);
        #                }
        #
        #                if(vssItemMove.add(true))
        #                {
        #                    vssItemMove = this.constructVSSItem(_newFilename);
        #
        #                    if(vssItemMove && vssItem.delete())
        #                    {
        #                        info(strfmt("@SYS96138", vssItem.getVSSPath()));
        #                        info(strfmt("@SYS96135", vssItemMove.getVSSPath()));
        #                        WinAPI::deleteFile(_oldFilename);
        #                        return true;
        #                    }
        #                }
        #            }
        #        }
        #        else
        #        {
        #            // Else rename
        #            if (vssItem.rename(newName + newFileExt))
        #            {
        #                info( strfmt("@SYS96139", oldVSSPath, newName + newFileExt) );
        #                return true;
        #            }
        #        }
        #
        #        // Something went wrong doing rename
        #        // Clean up the duplicated file if created
        #        if (WinAPI::fileExists(_newFilename) && !WinAPI::deleteFile(_newFilename))
        #        {
        #            // Give error message if the file could not be deleted.
        #            error(strfmt("@SYS72726", _newFilename));
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileSetCheckin
        #/// <summary>
        #/// Checks in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to check in.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the check-in.
        #/// </param>
        #/// <param name="_changeList">
        #/// The changelist to check-in.
        #/// </param>
        #/// <param name="_workItems">
        #/// The work items associated with the files to check-in.
        #/// </param>
        #/// <returns>
        #/// true if the check-in is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Any file that is successfully checked in is also unlocked.
        #/// </remarks>
        #public boolean fileSetCheckin(
        #    Map _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    MapEnumerator enumerator;
        #    SysVersionControllable controllable;
        #
        #    VSSItem vssItem;
        #    boolean repeatCheckIn;
        #    boolean firstRepeat;
        #    boolean checkinSucceeded = false;
        #
        #    #define.autoMergeErrorMessage('An automatic merge has occurred')
        #
        #    if (_setOfFiles)
        #    {
        #        enumerator = _setOfFiles.getEnumerator();
        #        enumerator.reset();
        #
        #        while (enumerator.moveNext())
        #        {
        #            checkinSucceeded = false;
        #            firstRepeat = false;
        #
        #            do
        #            {
        #                repeatCheckIn = false;
        #
        #                vssItem = this.constructVSSItem(enumerator.currentKey());
        #                if (vssItem)
        #                {
        #                    if (vssItem.checkin(_comment))
        #                    {
        #                        info(strfmt("@SYS96136", vssItem.getVSSPath()));
        #                        checkinSucceeded = true;
        #                    }
        #                    else
        #                    {
        #                        //
        #                        // In case of a label file, where VSS autoresolve has failed
        #                        // then attempt to re-checkin once.
        #                        //
        #                        // The label file is automatically merged by AX,
        #                        // so the file is OK, but has to be:
        #                        //    1. Rewritten (as VSS writes a marked up file for manual merge), and
        #                        //    2. Checked in again.
        #                        //
        #                        if (controllable is SysLabelFile &&
        #                            strscan(infolog.text(infologLine()), #autoMergeErrorMessage, 1, maxint()))
        #                        {
        #                            if (firstRepeat)
        #                            {
        #                                // Repeat checkin already attemped
        #                                repeatCheckIn = false;
        #                                firstRepeat = false;
        #                            }
        #                            else
        #                            {
        #                                // Try one more time
        #                                infolog.clear(infologLine()-1);
        #                                repeatCheckIn = true;
        #                                firstRepeat = true;
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #
        #            while (repeatCheckIn);
        #        }
        #    }
        #    return checkinSucceeded;
        #}
      ENDSOURCE
      SOURCE #fileSetResolve
        #/// <summary>
        #/// Resolves conflicts in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to resolve.
        #/// </param>
        #/// <returns>
        #/// true if the set of files are resolved successful; otherwise, false.
        #/// </returns>
        #public boolean fileSetResolve(Map _setOfFiles)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #filesPending
        #/// <summary>
        #///    Gets the pending files.
        #/// </summary>
        #/// <param name="_changeListId">
        #///    The ID of the pending change list of which to retrieve the contents.
        #/// </param>
        #/// <param name="_folder">
        #///    The repository folder.
        #/// </param>
        #/// <returns>
        #///    The pending files.
        #/// </returns>
        #/// <remarks>
        #///    The returned table contains one record for each pending file.If the <c>changeListId</c> value is
        #///    blank, the contents of the default change list is returned.
        #/// </remarks>
        #public SysVersionControlTmpItem filesPending(
        #    SysVersionControlChangeListId _changeListId,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    SysVersionControlTmpItem item;
        #    container allCheckouts, checkoutInfo;
        #    str computerName;
        #    str userName;
        #    str projectPath;
        #    str localFilePath;
        #    str action;
        #    int versionNo;
        #    int i;
        #
        #    allCheckouts = vssDb.getCheckedoutFiles();
        #
        #    for(i = 1; i <= conlen(allCheckouts); i++)
        #    {
        #        checkoutInfo = conpeek(allCheckouts, i);
        #
        #        [localFilePath, projectPath, versionNo, userName, computerName, action] = checkoutInfo;
        #
        #        item.clear();
        #
        #        item.User             = userName;
        #        item.ComputerName     = computerName;
        #        item.Version          = versionNo;
        #
        #        if (strStartsWith(action, #VSSActionAdd))
        #            action = #VSSActionAdd;
        #        else if (strStartsWith(action, #VSSActionCheckedOut))
        #            action = #VSSActionCheckedOut;
        #        else if (strStartsWith(action, #VSSActionDelete))
        #            action = #VSSActionDelete;
        #        else if (strStartsWith(action, #VSSActionRename))
        #            action = #VSSActionRename;
        #
        #        item.ActionText       = action;
        #        item.InternalFilename = projectPath;
        #        item.Filename         = localFilePath;
        #
        #        item.insert();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileSynchronize
        #/// <summary>
        #///    Gets a specific version of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class specifying the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contains the file name and the action performed on the file.
        #/// </returns>
        #/// <remarks>
        #///    When version in <c>_syncParameters</c> parameter is not specified the latest version of the file
        #///    will be retrieved.
        #/// </remarks>
        #public Map fileSynchronize(
        #    Filename _filename,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #
        #    Map retMap = new Map(Types::String, Types::Enum); // Filename, Synchronization-command
        #    Map affectedObjects;
        #    MapEnumerator mapEnumerator;
        #
        #    Filename filename;
        #
        #    VSSItem vssItem;
        #
        #    vssItem = this.constructVSSItem(_filename);
        #    if (vssItem)
        #    {
        #        if (_syncParameters.parmForce())
        #        {
        #            affectedObjects = vssItem.get(true, _syncParameters.parmVersion(), _syncParameters.parmLabel());
        #        }
        #        else
        #        {
        #            affectedObjects = vssItem.get(false, _syncParameters.parmVersion(), _syncParameters.parmLabel());
        #        }
        #    }
        #    else
        #    {
        #        return retMap;
        #    }
        #
        #    if (affectedObjects)
        #    {
        #        mapEnumerator = affectedObjects.getEnumerator();
        #        while(mapEnumerator.moveNext())
        #        {
        #            filename = mapEnumerator.currentKey();
        #            switch(mapEnumerator.currentValue())
        #            {
        #                case SysVersionControlSynchronizeCommand::Add:
        #                    retMap.insert(filename, SysVersionControlSynchronizeCommand::Add);
        #                    break;
        #                case SysVersionControlSynchronizeCommand::Update:
        #                    retMap.insert(filename, SysVersionControlSynchronizeCommand::Update);
        #                    break;
        #                case SysVersionControlSynchronizeCommand::Delete:
        #                    retMap.insert(filename, SysVersionControlSynchronizeCommand::Delete);
        #                    break;
        #            }
        #        }
        #    }
        #
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #fileUndoCheckout
        #/// <summary>
        #///    Reverts the check-out of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file for which to undo check-out.
        #/// </param>
        #/// <returns>
        #///    A container with a Boolean value that indicates whether the check-out was successful and the name
        #///    of the file.
        #/// </returns>
        #public container fileUndoCheckout(Filename _filename)
        #{
        #    VSSItem vssItem;
        #    str action;
        #    boolean reverted = false;
        #    str vssPath;
        #
        #    vssItem = this.constructVSSItem(_filename);
        #    if (vssItem)
        #    {
        #        action = this.actionTextForCheckedOutFile(_filename);
        #        vssPath = vssItem.getVSSPath();
        #
        #        reverted = vssItem.undoCheckout();
        #
        #        switch (action)
        #        {
        #            case #VSSActionAdd:
        #                if(vssItem.destroy())
        #                {
        #                    this.removeReadOnlyFlagFromFile(_filename);
        #                    info(strfmt("@SYS96140", vssPath));
        #                }
        #                break;
        #            case #VSSActionDelete:
        #                if (!WinAPI::fileExists(_filename))
        #                {
        #                    vssItem.get(true, 0, '', _filename);
        #                }
        #                info(strfmt("@SYS99499", vssPath));
        #                break;
        #            case #VSSActionRename:
        #                info(strfmt("@SYS128530", vssPath));
        #                // Set vss path to renamed from by calling getVSSpath again.
        #                vssPath = this.convertVSSPathToPath(vssItem.getVSSPath());
        #                break;
        #        }
        #    }
        #    return [reverted, (reverted == true ? vssPath : '')];
        #}
      ENDSOURCE
      SOURCE #fileUnlock
        #/// <summary>
        #///    Unlocks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to unlock.
        #/// </param>
        #/// <returns>
        #///    true if the file is unlocked successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked other users cannot check-in changes to the file.
        #/// </remarks>
        #public boolean fileUnlock(Filename _filename)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #folderChanges
        #/// <summary>
        #/// Returns all change lists for a folder.
        #/// </summary>
        #/// <param name="_folder">
        #/// The folder to retrieve information for.
        #/// </param>
        #/// <returns>
        #/// The change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each change list.
        #/// </remarks>
        #public SysVersionControlTmpChange folderChanges(FilePath _folder)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #folderSetSynchronize
        #/// <summary>
        #///    Gets the latest version of one or more folders.
        #/// </summary>
        #/// <param name="_folderSet">
        #///    A set that contains the folders to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contains the file name and the action performed on the file for each modified file.
        #/// </returns>
        #public Map folderSetSynchronize(
        #    Set _folderSet,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    Map retMap = new Map(Types::String, Types::Enum);
        #    Map affectedObjects;
        #    MapEnumerator enumerator;
        #    Filename filename;
        #    Set vssFolderSet = this.convertFolderSetToVSSFolderSet(_folderSet);
        #
        #    //if _label is given, only objects binding to _label will be synced
        #    affectedObjects = vssDb.synchronizeProjects(
        #        vssFolderSet,
        #        _syncParameters.parmForce(),
        #        _syncParameters.parmDeleteLocalObjects(),
        #        _syncParameters.parmLabel());
        #
        #    if (affectedObjects)
        #    {
        #        enumerator = affectedObjects.getEnumerator();
        #        enumerator.reset();
        #
        #        while(enumerator.moveNext())
        #        {
        #            filename = enumerator.currentKey();
        #            switch (enumerator.currentValue())
        #            {
        #                case SysVersionControlSynchronizeCommand::Add:
        #                    info(strfmt("@SYS96135", filename));
        #                    break;
        #                case SysVersionControlSynchronizeCommand::Update:
        #                    info(strfmt("@SYS96141", filename));
        #                    break;
        #                case SysVersionControlSynchronizeCommand::Delete:
        #                    info(strfmt("@SYS96138", filename));
        #                    break;
        #            }
        #
        #            retMap.insert(filename, enumerator.currentValue());
        #        }
        #    }
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #getFileNameHistory
        #private SysVersionControlTmpItem getFileNameHistory(Filename _filename)
        #{
        #    int i;
        #    SysVersionControlTmpItem item;
        #    container historyCont, versionCont;
        #    VSSItem vssItem;
        #
        #    vssItem = this.constructVSSItem(_filename);
        #    if (vssItem)
        #    {
        #        historyCont = vssItem.getHistory();
        #        for(i = 1; i <= conlen(historyCont); i++)
        #        {
        #            versionCont = conpeek(historyCont, i);
        #            item.ItemPath          = vssItem.getVSSPath(); // substr(_filename, strlen(folder), strlen( _filename ) );
        #            item.User              = conpeek(versionCont, 1);
        #            item.ComputerName      = conpeek(versionCont, 2);
        #            item.Version           = conpeek(versionCont, 3);
        #            item.vcsDate           = conpeek(versionCont, 4);
        #            item.vcsTime           = conpeek(versionCont, 5);
        #            item.Comment           = conpeek(versionCont, 6);
        #            item.ActionText        = conpeek(versionCont, 7);
        #            item.Label             = conpeek(versionCont, 8);
        #            item.InternalFilename  = _filename;
        #            item.insert();
        #        }
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getNetworkUserName
        #private SysVersionControlUser getNetworkUserName()
        #{
        #    UserInfo userInfo;
        #    select firstonly NetworkAlias from userInfo where userInfo.Id == curuserid();
        #
        #    return str2Capital(userInfo.NetworkAlias);
        #}
      ENDSOURCE
      SOURCE #init
        #public SysVersionControlSystemStatus init(SysVersionControlParameters _parameters)
        #{
        #    SysVersionControlSystemStatus retStatus = SysVersionControlSystemStatus::NotConnected;
        #
        #    if(_parameters)
        #    {
        #        vssIni = _parameters.vssIniFile;
        #        vssProjectRoot = _parameters.vssProjectRoot;
        #        folder = _parameters.RepositoryFolder;
        #
        #        try
        #        {
        #            // Validates the existence of the vss ini file
        #            if (!WinAPI::fileExists(vssIni))
        #            {
        #               error(strfmt("@SYS120743", vssIni));
        #            }
        #            else
        #            {
        #                //
        #                // Instantiate the VSS
        #                //
        #                vssDb = new VSS();
        #
        #                if (!vssDb.init(vssIni, vssProjectRoot, folder, this.getNetworkUserName(), ''))
        #                {
        #                    // VSS is not installed
        #                    error("@SYS95483");
        #                }
        #                else
        #                {
        #                    if (!vssDb.connect())
        #                    {
        #                        setprefix(folder);
        #                        warning("@SYS95484");
        #                    }
        #                    else
        #                    {
        #                        retStatus = SysVersionControlSystemStatus::Connected;
        #                    }
        #                }
        #            }
        #        }
        #        catch
        #        {
        #            error("@SYS128650");
        #        }
        #    }
        #
        #    return retStatus;
        #}
        #
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #/// <summary>
        #///    Extracts parameter settings from an xml element.
        #/// </summary>
        #/// <param name="_topNode">
        #///    The <c>XmlElement</c> class that contains the parameters.
        #/// </param>
        #public void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #}
      ENDSOURCE
      SOURCE #removeReadOnlyFlagFromFile
        #private void removeReadOnlyFlagFromFile(Filename _filename)
        #{
        #    int attr;
        #
        #    if (WinAPI::fileExists(_filename))
        #    {
        #        attr = WinAPI::getFileAttributes(_filename);
        #        if (bitTest(#FILE_ATTRIBUTE_READONLY, attr))
        #        {
        #            attr -= #FILE_ATTRIBUTE_READONLY;
        #            WinAPI::setFileAttributes(_filename, attr);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #requireSyncBeforeCheckOut
        #public boolean requireSyncBeforeCheckOut()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #/// <summary>
        #///    Returns the file name filter for the lookup dialog box.
        #/// </summary>
        #/// <returns>
        #///    The file name filter for the lookup dialog box.
        #/// </returns>
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    //not supported
        #    return [''];
        #}
      ENDSOURCE
      SOURCE #reviewFileSet
        #/// <summary>
        #/// Creates a review file from a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to review.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the review.
        #/// </param>
        #/// <param name="_fileNameOfReviewPackage">
        #/// The file name of the review file.
        #/// </param>
        #/// <param name="_folder">
        #/// The repository folder.
        #/// </param>
        #public void reviewFileSet(
        #    Set _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave _fileNameOfReviewPackage,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #}
      ENDSOURCE
      SOURCE #showInfo
        #/// <summary>
        #///    Shows the connection information about the back end.
        #/// </summary>
        #public void showInfo()
        #{
        #    container coninfo = vssDb.getConnectionInfo();
        #
        #    info(strfmt("@SYS99272",conpeek(coninfo,2)));
        #    info(strfmt("@SYS99271",conpeek(coninfo,3)));
        #    info(strfmt("@SYS99273",conpeek(coninfo,4)));
        #    info(strfmt("@SYS99274",conpeek(coninfo,5)));
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #/// <summary>
        #/// Implements change version functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports change version number; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change version, Morphx will show version number both in pending objects and history form.
        #/// </remarks>
        #public boolean supportChangeVersion()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #/// <summary>
        #///    Checks whether a check-in wizard is used by the back end.
        #/// </summary>
        #/// <returns>
        #///    true if the back end has a check-in wizard; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the back end uses a check-in wizard, MorphX will not ask for check-in comments, because they are
        #///    provided in the check-in wizard.
        #/// </remarks>
        #public boolean supportCheckInWizard()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #/// <summary>
        #/// Supports check-out of the same file by several users at the same time.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports multiple check-outs; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end does not support multiple check-outs, MorphX will verify that a
        #/// file has not been checked out remotely before it tries a check-out.
        #/// </remarks>
        #public boolean supportMultipleCheckout()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports pending change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportPendingChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #/// <summary>
        #///    Supports review of a set of changed files.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports review; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports reviews, the Review button is shown on the Pending objects
        #///    form.When the Review button is clicked the <c>reviewFileSet</c> method on this interface will be
        #///    invoked.
        #/// </remarks>
        #public boolean supportReviews()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports submitted change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportSubmittedChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #/// <summary>
        #///    Implements delete local files synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports delete local files synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports delete local files synchronization, Morphx will show a
        #///    delete files field in the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #/// <summary>
        #///    Implements label synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports label synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports label synchronization, Morphx will show a label field in
        #///    the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncLabel()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized instance of the <c>SysVersionControlWorkItemProvider</c> class.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlFileBasedBackEndVSS construct()
        #{
        #    return new SysVersionControlFileBasedBackEndVSS();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlInfo unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlInfo
    PROPERTIES
      Name                #SysVersionControlInfo
      RunOn               #Client
      Origin              #{2D150358-0000-1000-6C3A-34F35891539A}
      LegacyId            #856
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlInfo
        #{
        ##define.xxx('xxx')
        #}
      ENDSOURCE
      SOURCE #method1
        #private void method1()
        #{
        #    info('haha');
        #}
      ENDSOURCE
      SOURCE #method2
        #private void method2()
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #;
        #    versioncontrol.showInfo();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlInfo construct()
        #{
        #    return new SysVersionControlInfo();
        #}
        #
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    SysVersionControlInfo sysVersionControlInfo = SysVersionControlInfo::construct();
        #
        #    if (!SysVersionControlParameters::isVCSEnabled())
        #    {
        #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
        #    }
        #
        #    sysVersionControlInfo.run();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControllable unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControllable
    PROPERTIES
      Name                #SysVersionControllable
      Origin              #{2D160359-0000-1000-6CEB-2D9069C2C0A9}
      LegacyId            #857
    ENDPROPERTIES
    
    METHODS
      SOURCE #addNewFile
        #/// <summary>
        #/// Creates a new file that is associated with this object.
        #/// </summary>
        #/// <param name="fileName">
        #/// The file name that is associated to this object.
        #/// </param>
        #/// <returns>
        #/// true if the file was successfully created; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called during <c>SysVersionControlSystem.commandAdd</c> method.
        #/// </remarks>
        #public boolean addNewFile(str fileName)
        #{
        #}
      ENDSOURCE
      SOURCE #allowCheckIn
        #public boolean allowCheckIn(SysVersionControlSettings _settings)
        #{
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControlSettings _settings)
        #{
        #}
      ENDSOURCE
      SOURCE #allowLockDuringCheckIn
        #public boolean allowLockDuringCheckIn(SysVersionControlSettings _settings)
        #{
        #}
      ENDSOURCE
      SOURCE #allowMultipleCheckout
        #public boolean allowMultipleCheckout(SysVersionControlSettings _settings)
        #{
        #}
      ENDSOURCE
      SOURCE #canCreate
        #/// <summary>
        #/// Indicates whether an item can be created in the source control.
        #/// </summary>
        #/// <returns>
        #/// true if item can be created in source control; otherwise, false.
        #/// </returns>
        #public boolean canCreate()
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #interface SysVersionControllable
        #{
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #}
      ENDSOURCE
      SOURCE #deleteFile
        #/// <summary>
        #/// Deletes the file that is associated with this object.
        #/// </summary>
        #/// <param name="fileName">
        #/// The file name that is associated to this object.
        #/// </param>
        #public void deleteFile(str fileName)
        #{
        #}
      ENDSOURCE
      SOURCE #fileExtension
        #public Filename fileExtension()
        #{
        #}
      ENDSOURCE
      SOURCE #forceSynchronize
        #public boolean forceSynchronize()
        #{
        #}
      ENDSOURCE
      SOURCE #fromFile
        #public void fromFile(FilenameOpen _filename)
        #{
        #}
      ENDSOURCE
      SOURCE #isNewNameValid
        #/// <summary>
        #/// Indicates whether the new name of the element is valid.
        #/// </summary>
        #/// <param name="_newName">
        #/// The new name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the new name is valid; otherwise, false
        #/// </returns>
        #/// <remarks>
        #/// This method is called before renaming the element.
        #/// </remarks>
        #public boolean isNewNameValid(str _newName)
        #{
        #}
      ENDSOURCE
      SOURCE #onCheckOut
        #public void onCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #onUndoCheckOut
        #public void onUndoCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #preAddAction
        #/// <summary>
        #/// Executes an action before the add operation.
        #/// </summary>
        #public void preAddAction()
        #{
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #public boolean preCheckInUpdate(Filename _filname, SysVersionControlSettings _settings)
        #{
        #}
      ENDSOURCE
      SOURCE #toFile
        #public boolean toFile(FilenameSave _filename, boolean _creating = false)
        #{
        #}
      ENDSOURCE
      SOURCE #versionControlFilePath
        #public Filename versionControlFilePath(boolean _currentLayer = true)
        #{
        #}
      ENDSOURCE
      SOURCE #versionControlItemPath
        #public SysVersionControlItemPath versionControlItemPath()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControllableBase unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControllableBase
    PROPERTIES
      Name                #SysVersionControllableBase
      Origin              #{6254D253-32F5-43B6-97A7-8CEF75A4D61C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #addNewFile
        #/// <summary>
        #/// Creates a new file that is associated with this object.
        #/// </summary>
        #/// <param name="fileName">
        #/// The file name that is associated with this object.
        #/// </param>
        #/// <returns>
        #/// true if the file was successfully created; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called during by the <c>SysVersionControlSystem.commandAdd</c> method.
        #/// </remarks>
        #public boolean addNewFile(str fileName)
        #{
        #    FilePath    path;
        #    Filename    name;
        #
        #    [path, name] = fileNameSplit(filename);
        #
        #    if (!WinAPI::folderExists(path))
        #    {
        #        WinAPI::createDirectoryPath(path);
        #    }
        #
        #    if (WinAPI::fileExists(filename))
        #    {
        #        throw error(strfmt("@SYS18625",filename));
        #    }
        #
        #    if (!this.preCheckInUpdate(filename, VersionControl.parmSysVersionControlSystem().parmSettings()))
        #    {
        #        throw error(strfmt("@SYS85685", filename));
        #    }
        #
        #    if (!this.toFile(filename, true))
        #    {
        #        throw error(strfmt("@SYS26666", filename));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowCheckIn
        #public abstract boolean allowCheckIn(SysVersionControlSettings _settings){}
      ENDSOURCE
      SOURCE #allowCreate
        #public abstract boolean allowCreate(SysVersionControlSettings _settings){}
      ENDSOURCE
      SOURCE #allowLockDuringCheckIn
        #public abstract boolean allowLockDuringCheckIn(SysVersionControlSettings _settings){}
      ENDSOURCE
      SOURCE #allowMultipleCheckout
        #public abstract boolean allowMultipleCheckout(SysVersionControlSettings _settings){}
      ENDSOURCE
      SOURCE #canCreate
        #/// <summary>
        #/// Checks whether an item can be created in the source control.
        #/// </summary>
        #/// <returns>
        #/// true if item can be created in source control; otherwise, false.
        #/// </returns>
        #public boolean canCreate()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public abstract class SysVersionControllableBase implements SysVersionControllable
        #{
        #}
      ENDSOURCE
      SOURCE #delete
        #public abstract void delete(){}
      ENDSOURCE
      SOURCE #deleteFile
        #/// <summary>
        #/// Deletes the file that is associated with this object.
        #/// </summary>
        #/// <param name="fileName">
        #/// The file name that is associated with this object.
        #/// </param>
        #public void deleteFile(str fileName)
        #{
        #    WinAPI::deleteFile(fileName);
        #}
      ENDSOURCE
      SOURCE #fileExtension
        #public abstract Filename fileExtension(){}
      ENDSOURCE
      SOURCE #forceSynchronize
        #public abstract boolean forceSynchronize(){}
      ENDSOURCE
      SOURCE #fromFile
        #public abstract void fromFile(FilenameOpen _filename){}
      ENDSOURCE
      SOURCE #isNewNameValid
        #/// <summary>
        #/// Checks whether the new name of the element is valid.
        #/// </summary>
        #/// <param name="_newName">
        #/// The new name of the element to check.
        #/// </param>
        #/// <returns>
        #/// true if the new name is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called before renaming the element.
        #/// </remarks>
        #public boolean isNewNameValid(str _newName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #onCheckOut
        #public abstract void onCheckOut(){}
      ENDSOURCE
      SOURCE #onUndoCheckOut
        #public abstract void onUndoCheckOut(){}
      ENDSOURCE
      SOURCE #preAddAction
        #/// <summary>
        #/// Executes an action prior to the add operation.
        #/// </summary>
        #public abstract void preAddAction(){}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #boolean preCheckInUpdate(Filename _filename, SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #toFile
        #public boolean toFile(FilenameSave _filename, boolean _creating = false)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #versionControlFilePath
        #public abstract Filename versionControlFilePath(boolean _currentLayer = true){}
      ENDSOURCE
      SOURCE #versionControlItemPath
        #public abstract SysVersionControlItemPath versionControlItemPath(){}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlModelFile unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlModelFile
    PROPERTIES
      Name                #SysVersionControlModelFile
      Extends             #SysVersionControlFile
      RunOn               #Client
      Origin              #{7920F1B3-60DC-4BD7-A936-364FEC4E801C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #addToDefinitionFile
        #/// <summary>
        #/// Adds the model to the definition file.
        #/// </summary>
        #public void addToDefinitionFile()
        #{
        #    SysVersionControlDefFile defFile;
        #
        #    XmlDocument defDoc;
        #    XmlElement modelsNode;
        #    XmlElement modelNode;
        #
        #    if (versioncontrol.parmSysVersionControlSystem() && versioncontrol.parmSysVersionControlSystem() as SysVersionControlSystemFileBased)
        #    {
        #        // CheckOut the definition file
        #        defFile = SysVersionControlDefFile::newVCSDefFile();
        #
        #        if (versioncontrol.parmSysVersionControlSystem().commandCheckOut(defFile))
        #        {
        #            // Add the modelFolder entry in the definition file
        #            defDoc = XmlDocument::newFile(defFile.versionControlFilePath());
        #            if (defDoc)
        #            {
        #                modelsNode = defDoc.documentElement().selectSingleNode(#XMLModels);
        #
        #                if (!modelsNode)
        #                {
        #                    modelsNode = defDoc.documentElement().appendChild(defDoc.createElement(#XMLModels));
        #                }
        #
        #                modelNode = modelsNode.appendChild(defDoc.createElement(#XMLModel));
        #                modelNode.setAttribute(#XMLModelFolder, this.parmRelativeModelFolder());
        #                modelNode.setAttribute(#XMLDescription, this.parmDisplayName() ? this.parmDisplayName() : this.parmName());
        #
        #                defDoc.save(defFile.versionControlFilePath());
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #allowCheckIn
        #/// <summary>
        #/// Checks whether check-in is allowed.
        #/// </summary>
        #/// <param name="_settings">
        #/// The version control settings that are specified in the system settings form.
        #/// </param>
        #/// <returns>
        #/// Always return true.
        #/// </returns>
        #public boolean allowCheckIn(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #/// <summary>
        #/// Checks whether a element can be created.
        #/// </summary>
        #/// <param name="_settings">
        #/// The version control settings that are specified in the system settings form.
        #/// </param>
        #/// <returns>
        #/// Always return true.
        #/// </returns>
        #public boolean allowCreate(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowMultipleCheckout
        #/// <summary>
        #/// Checks whether multiple users can have a element checked out.
        #/// </summary>
        #/// <param name="_settings">
        #/// The version control settings that are specified in the system settings form.
        #/// </param>
        #/// <returns>
        #/// Always return true.
        #/// </returns>
        #public boolean allowMultipleCheckout(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlModelFile</c> class is used for handling models that are tracked in version
        #/// control.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlModelFile extends SysVersionControlFile
        #{
        #    #File
        #    #SysVersionControl
        #
        #    #define.xPathModelName('/ModelManifest/Name')
        #    #define.xPathModelPublisher('/ModelManifest/Publisher')
        #    #define.xPathModelDisplayName('/ModelManifest/DisplayName')
        #    #define.xPathModelLayer('/ModelManifest/Layer')
        #
        #    XmlDocument modelXml;
        #    FilePath modelFolder;
        #    FilePath relativeModelFolder;
        #
        #    modelName name;
        #    modelPublisher publisher;
        #    modelDisplayName displayName;
        #    modelId modelId;
        #    UtilEntryLevel layer;
        #    boolean layerReadFromFile;
        #}
      ENDSOURCE
      SOURCE #deleteFile
        #public void deleteFile(str _fileName)
        #{
        #    // Makes sure the model is removed from the current session.
        #    versioncontrol.parmSysVersionControlSystem().removeModelFolder(this);
        #    super(_fileName);
        #}
      ENDSOURCE
      SOURCE #fileExtension
        #public Filename fileExtension()
        #{
        #    return #xml;
        #}
      ENDSOURCE
      SOURCE #forceSynchronize
        #public boolean forceSynchronize()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fromFile
        #/// <summary>
        #/// Reads the model file into the current session.
        #/// </summary>
        #/// <param name="_filename">
        #/// The specified filename of the model.
        #/// </param>
        #public void fromFile(FilenameOpen _filename)
        #{
        #    str fileContent;
        #    str modelContent;
        #    int cmp;
        #    if (System.IO.File::Exists(_filename))
        #    {
        #        modelXml = XmlDocument::newFile(_filename);
        #
        #        try
        #        {
        #            this.readXmlContent();
        #
        #            if (!this.parmName() && !this.parmPublisher())
        #            {
        #                error(strfmt("@SYS327409", _filename));
        #            }
        #
        #            this.setRelativeModelFolder(_filename);
        #
        #            // Check if we need to create the model in the model store.
        #            modelId = SysModelStore::getModelId(this.parmName(), this.parmPublisher());
        #
        #            if (!modelId)
        #            {
        #                if (layerReadFromFile)
        #                {
        #                    SysModelStore::createModelFromXML(this.parmModelXml().innerXml(), layer);
        #                }
        #                else
        #                {
        #                    SysModelStore::createModelFromXML(this.parmModelXml().innerXml());
        #                }
        #
        #                modelId = SysModelStore::getModelId(this.parmName(), this.parmPublisher());
        #                versionControl.parmSysVersionControlSystem().addModelFolder(this);
        #            }
        #            else
        #            {
        #                fileContent = modelXml.innerXml();
        #                modelContent = XmlDocument::newXml(SysModelStore::getModelManifest(modelId)).innerXml();
        #                cmp = strCmp(fileContent, modelContent);
        #
        #                // Compare if file content is different than the model store content, if so do an edit of the model.
        #                if (cmp != 0)
        #                {
        #                    SysModelStore::editModelFromXML(fileContent);
        #                }
        #            }
        #        }
        #        catch
        #        {
        #            error(strfmt("@SYS327409", _filename));
        #        }
        #    }
        #    else
        #    {
        #        error(strfmt("@SYS18678", _filename));
        #    }
        #}
      ENDSOURCE
      SOURCE #parmDisplayName
        #public modelDisplayName parmDisplayName(modelDisplayName _displayName = displayName)
        #{
        #    displayName = _displayName;
        #
        #    return displayName;
        #}
      ENDSOURCE
      SOURCE #parmModelFolder
        #public FilePath parmModelFolder(FilePath _modelFolder = modelFolder)
        #{
        #    if (!prmisDefault(_modelFolder))
        #    {
        #        this.setRelativeModelFolder(_modelFolder);
        #    }
        #
        #    return modelFolder;
        #}
      ENDSOURCE
      SOURCE #parmModelId
        #public modelId parmModelId()
        #{
        #    return modelId;
        #}
      ENDSOURCE
      SOURCE #parmModelXml
        #public XmlDocument parmModelXml(XmlDocument _modelXml = modelXml)
        #{
        #    if (!prmisDefault(_modelXml))
        #    {
        #        modelXml = _modelXml;
        #        this.readXmlContent();
        #    }
        #    return modelXml;
        #}
        #
      ENDSOURCE
      SOURCE #parmName
        #public modelName parmName(modelName _name = name)
        #{
        #    name = _name;
        #    return name;
        #}
      ENDSOURCE
      SOURCE #parmPublisher
        #public modelPublisher parmPublisher(modelPublisher _publisher = publisher)
        #{
        #    publisher = _publisher;
        #    return publisher;
        #}
      ENDSOURCE
      SOURCE #parmRelativeModelFolder
        #public FilePath parmRelativeModelFolder()
        #{
        #    return relativeModelFolder;
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #/// <summary>
        #/// Updates the check in operation for the specified file.
        #/// </summary>
        #/// <param name="_filname">
        #/// The specified file name.
        #/// </param>
        #/// <param name="_settings">
        #/// The specified version control settings.
        #/// </param>
        #/// <returns>
        #/// Always returns true.
        #/// </returns>
        #public boolean preCheckInUpdate(Filename _filname, SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #readXmlContent
        #private void readXmlContent()
        #{
        #    XmlNode currentNode;
        #    modelId modelExistsId;
        #
        #    // Get the name and publisher from the model file
        #    currentNode = modelXml.selectSingleNode(#xPathModelName);
        #    if (currentNode)
        #    {
        #        name = currentNode.innerText();
        #    }
        #
        #    currentNode = modelXml.selectSingleNode(#xPathModelPublisher);
        #    if (currentNode)
        #    {
        #        publisher = currentNode.innerText();
        #    }
        #
        #    currentNode = modelXml.selectSingleNode(#xPathModelDisplayName);
        #    if (currentNode)
        #    {
        #        displayName = currentNode.innerText();
        #    }
        #
        #    // Get the layer from the model file.
        #    layerReadFromFile = false;
        #    currentNode = modelXml.selectSingleNode(#xPathModelLayer);
        #    if (currentNode)
        #    {
        #        layer = str2enum(layer, currentNode.innerText());
        #        layerReadFromFile = true;
        #    }
        #
        #    modelExistsId = SysModelStore::getModelId(this.parmName(), this.parmPublisher());
        #    if (modelExistsId)
        #    {
        #        modelId = modelExistsId;
        #    }
        #}
      ENDSOURCE
      SOURCE #setRelativeModelFolder
        #private void setRelativeModelFolder(FilePath _filePath)
        #{
        #    #File
        #    FilePath vcsRepositoryPath;
        #
        #    // Use managed API!
        #    boolean isAFile = strEndsWith(_filePath, #xml) || System.IO.File::Exists(_filePath);
        #
        #    // Extract the folder.
        #    if (isAFile)
        #    {
        #        [modelFolder] = fileNameSplit(_filePath);
        #    }
        #    else
        #    {
        #        modelFolder = _filePath;
        #    }
        #
        #    if (strEndsWith(modelFolder, #FilePathDelimiter))
        #    {
        #        // Remove potential backslash at end.
        #        modelFolder = subStr(modelFolder, 1, strLen(modelFolder) - 1);
        #    }
        #
        #    vcsRepositoryPath = versioncontrol.parmSysVersionControlSystem().parmFolder();
        #
        #    if (modelFolder && strStartsWith(modelFolder, vcsRepositoryPath) && strLen(modelFolder) > strLen(vcsRepositoryPath))
        #    {
        #        // Get the relative path
        #        relativeModelFolder = subStr(modelFolder, strLen(vcsRepositoryPath) + 1, maxInt());
        #
        #        if (strStartsWith(relativeModelFolder, #FilePathDelimiter))
        #        {
        #            relativeModelFolder = subStr(relativeModelFolder, 2, maxInt());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #toFile
        #/// <summary>
        #/// Saves the element to the disk by using the specified file name.
        #/// </summary>
        #/// <param name="_filename">
        #/// The specified file name.
        #/// </param>
        #/// <param name="_creating">
        #/// A Boolean value that indicates if the save operation is executed when the element is created.
        #/// </param>
        #/// <returns>
        #/// true if the file is saved successfully; otherwise, false.
        #/// </returns>
        #public boolean toFile(FilenameSave _filename, boolean _creating = false)
        #{
        #    boolean ret = true; // default true, prove otherwise.
        #    XmlNode currentNode;
        #
        #    if (modelXml)
        #    {
        #        try
        #        {
        #            // Set the name and publisher, in case they've been changed.
        #            currentNode = modelXml.selectSingleNode(#xPathModelName);
        #
        #            if (currentNode)
        #            {
        #                if (name)
        #                {
        #                    currentNode.innerText(name);
        #                }
        #            }
        #
        #            currentNode = modelXml.selectSingleNode(#xPathModelPublisher);
        #
        #            if (currentNode)
        #            {
        #                if (publisher)
        #                {
        #                    currentNode.innerText(publisher);
        #                }
        #            }
        #
        #            currentNode = modelXml.selectSingleNode(#xPathModelDisplayName);
        #
        #            if (currentNode)
        #            {
        #                if (displayName)
        #                {
        #                    currentNode.innerText(displayName);
        #                }
        #            }
        #
        #            // BP deviation documented
        #            modelXml.save(_filename);
        #        }
        #        catch
        #        {
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #versionControlFilePath
        #public Filename versionControlFilePath(boolean _currentLayer = true)
        #{
        #    return strFmt(@'%1\%2', modelFolder, #ModelFileName);
        #}
      ENDSOURCE
      SOURCE #versionControlItemPath
        #public SysVersionControlItemPath versionControlItemPath()
        #{
        #    return strFmt(@'\%1\%2', relativeModelFolder, #ModelFileName);
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlModelFile construct()
        #{
        #    return new SysVersionControlModelFile();
        #}
      ENDSOURCE
      SOURCE #newItemPath
        #/// <summary>
        #/// Initializes a new instance of the <c>SysVersionControlModelFile</c> class by using the specified
        #/// file without loading the content.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// The specified item path of the model file.
        #/// </param>
        #/// <returns>
        #/// A new instance of the <c>SysVersionControlModelFile</c> class.
        #/// </returns>
        #public static SysVersionControlModelFile newItemPath(SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlItemPath path = _itemPath;
        #    SysVersionControlModelFile vcsModelFile = new SysVersionControlModelFile();
        #
        #    if (!strEndsWith(path, #xml))
        #    {
        #        path += #xml;
        #    }
        #
        #    vcsModelFile.parmModelFolder(versioncontrol.parmSysVersionControlSystem().parmFolder() + path);
        #
        #    return vcsModelFile;
        #}
      ENDSOURCE
      SOURCE #newModelFile
        #/// <summary>
        #/// Initializes a new instance of the <c>SysVersionControlModelFile</c> class from the specified file without loading the content.
        #/// </summary>
        #/// <param name="_filename">
        #/// The specified file name.
        #/// </param>
        #/// <returns>
        #/// A new instance of the <c>SysVersionControlModelFile</c> class.
        #/// </returns>
        #public static SysVersionControlModelFile newModelFile(Filename _filename)
        #{
        #    SysVersionControlModelFile vcsModelFile = new SysVersionControlModelFile();
        #    vcsModelFile.parmModelFolder(_filename);
        #
        #    return vcsModelFile;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlMorphXClaimLock unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlMorphXClaimLock
    PROPERTIES
      Name                #SysVersionControlMorphXClaimLock
      Extends             #SysInfoAction
      Origin              #{2D203A81-0000-1000-D060-E0F60314F0A5}
      LegacyId            #14977
    ENDPROPERTIES
    
    METHODS
      SOURCE #claimOwnership
        #public void claimOwnership(SysVersionControlItemPath _itemPath, userId _userId)
        #{
        #    SysVersionControlMorphXItemTable item;
        #
        #    ttsbegin;
        #
        #    SysVersionControlMorphXLockTable::remove(_itemPath, _userId);
        #
        #    item = SysVersionControlMorphXItemTable::find(_itemPath);
        #
        #    if (item)
        #    {
        #        item.checkOut();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysVersionControlMorphXClaimLock</c> class enables the user to claim ownership of another
        #///    user's lock in the MorphX version control system.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlMorphXClaimLock extends SysInfoAction
        #{
        #    userId userId;
        #    SysVersionControlItemPath itemPath;
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        userId,
        #        itemPath
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #description
        #public str description()
        #{
        #    return "@SYS119111";
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion, #CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmItempath
        #public SysVersionControlItemPath parmItempath(SysVersionControlItemPath _itempath = itempath)
        #{
        #    ;
        #    itempath = _itempath;
        #
        #    return itempath;
        #}
        #
      ENDSOURCE
      SOURCE #parmUserId
        #public userId parmUserId(userId _userId = userId)
        #{
        #    ;
        #    userId = _userId;
        #
        #    return userId;
        #}
        #
      ENDSOURCE
      SOURCE #run
        #/// <summary>
        #///    Claims a set of locks selected by the user.
        #/// </summary>
        #/// <remarks>
        #///    This method is invoked when the user clicks the Claim button in the Infolog form.
        #/// </remarks>
        #public void run()
        #{
        #    container choices;
        #    boolean prompt;
        #    int i;
        #    SysVersionControlMorphXLockTable lock;
        #    SysVersionControlItemPath itemPathChosen;
        #    Map idMap = new Map(Types::Integer, Types::String);
        #
        #    while select lock
        #        where lock.CreatedBy == userId
        #    {
        #        choices += [[lock.ItemPath, idMap.elements(), itempath == lock.ItemPath]];
        #        idMap.insert(idMap.elements(), lock.ItemPath);
        #    }
        #
        #    [prompt, choices] = selectMultiple("@SYS119112", strfmt("@SYS119113", userId), choices, ["@SYS7406"]);
        #
        #    if (prompt)
        #    {
        #        for (i=conlen(choices); i; i--)
        #        {
        #            itemPathChosen = idMap.lookup(conpeek(choices, i));
        #            this.claimOwnership(itemPathChosen, userId);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass, Object object = null)
        #{
        #    Version version     = RunBase::getVersion(packedClass);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = packedClass;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #construct
        #protected static SysVersionControlMorphXClaimLock construct()
        #{
        #    return new SysVersionControlMorphXClaimLock();
        #}
        #
      ENDSOURCE
      SOURCE #newUserId
        #/// <summary>
        #///    Initializes a new instance of the <see cref="T:SysVersionControlMorphXClaimLock" />.
        #/// </summary>
        #/// <param name="_userId">
        #///    The ID of the user.
        #/// </param>
        #/// <returns>
        #///    The instance of the class.
        #/// </returns>
        #static public SysVersionControlMorphXClaimLock newUserId(userId _userId)
        #{
        #    SysVersionControlMorphXClaimLock action = SysVersionControlMorphXClaimLock::construct();
        #
        #    ;
        #    action.parmUserId(_userId);
        #    return action;
        #}
      ENDSOURCE
      SOURCE #newUserIdItemPath
        #/// <summary>
        #/// Initializes a new instance of the <c>SysVersionControlMorphXClaimLock</c> class.
        #/// </summary>
        #/// <param name="_userId">
        #/// The ID of the user.
        #/// </param>
        #/// <param name="_itemPath">
        #/// The path of the item.
        #/// </param>
        #/// <returns>
        #/// The instance of the class.
        #/// </returns>
        #static public SysVersionControlMorphXClaimLock newUserIdItemPath(userId _userId, SysVersionControlItemPath _itemPath)
        #{
        #    SysVersionControlMorphXClaimLock action = SysVersionControlMorphXClaimLock::construct();
        #
        #    ;
        #    action.parmUserId(_userId);
        #    action.parmItempath(_itemPath);
        #    return action;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlReviews unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControlReviews
    PROPERTIES
      Name                #SysVersionControlReviews
      Extends             #SysVersionControlChangeLists
      Origin              #{2D180B8F-0000-1000-6C2D-A14427504DF8}
      LegacyId            #2959
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #interface SysVersionControlReviews extends SysVersionControlChangeLists
        #{
        #}
      ENDSOURCE
      SOURCE #reviewChangeList
        #public void reviewChangeList(
        #    SysVersionControlTmpItem     _items,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave                 _fileName)
        #{
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #FilenameFilter reviewFilenameLookupFilter()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSettings unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSettings
    PROPERTIES
      Name                #SysVersionControlSettings
      Origin              #{2D191788-0000-1000-8DD9-D90E026AF854}
      LegacyId            #6024
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlSettings
        #{
        #    SysVersionControlGateSetting gateCompileErrors;
        #    SysVersionControlGateSetting gateCompileWarnings;
        #    SysVersionControlGateSetting gateCompileToDos;
        #    SysVersionControlGateSetting gateBestPracticeErrors;
        #    boolean  runTitleCaseUpdate;
        #
        #    LabelModuleId defaultLabelFile;
        #    LabelIntervalFrom labelIntervalMin;
        #    LabelIntervalTo labelIntervalMax;
        #}
      ENDSOURCE
      SOURCE #parmDefaultLabelFile
        #public LabelModuleId parmDefaultLabelFile(LabelModuleId _defaultLabelFile = defaultLabelFile)
        #{
        #    defaultLabelFile = _defaultLabelFile;
        #
        #    return defaultLabelFile;
        #}
      ENDSOURCE
      SOURCE #parmGateBestPracticeErrors
        #public SysVersionControlGateSetting parmGateBestPracticeErrors(SysVersionControlGateSetting _gateBestPracticeErrors = gateBestPracticeErrors)
        #{
        #    gateBestPracticeErrors = _gateBestPracticeErrors;
        #
        #    return gateBestPracticeErrors;
        #}
        #
      ENDSOURCE
      SOURCE #parmGateCompileErrors
        #public SysVersionControlGateSetting parmGateCompileErrors(SysVersionControlGateSetting _gateCompileErrors = gateCompileErrors)
        #{
        #    gateCompileErrors = _gateCompileErrors;
        #
        #    return gateCompileErrors;
        #}
        #
      ENDSOURCE
      SOURCE #parmGateCompileToDos
        #public SysVersionControlGateSetting parmGateCompileToDos(SysVersionControlGateSetting _gateCompileToDos = gateCompileToDos)
        #{
        #    gateCompileToDos = _gateCompileToDos;
        #
        #    return gateCompileToDos;
        #}
        #
      ENDSOURCE
      SOURCE #parmGateCompileWarnings
        #public SysVersionControlGateSetting parmGateCompileWarnings(SysVersionControlGateSetting _gateCompileWarnings = gateCompileWarnings)
        #{
        #    gateCompileWarnings = _gateCompileWarnings;
        #
        #    return gateCompileWarnings;
        #}
        #
      ENDSOURCE
      SOURCE #parmLabelIntervalMax
        #public LabelIntervalTo parmLabelIntervalMax(LabelIntervalTo _labelIntervalMax = labelIntervalMax)
        #{
        #    labelIntervalMax = _labelIntervalMax;
        #
        #    return labelIntervalMax;
        #}
      ENDSOURCE
      SOURCE #parmLabelIntervalMin
        #public LabelIntervalFrom parmLabelIntervalMin(LabelIntervalFrom _labelIntervalMin = labelIntervalMin)
        #{
        #    labelIntervalMin = _labelIntervalMin;
        #
        #    return labelIntervalMin;
        #}
      ENDSOURCE
      SOURCE #parmRunTitleCaseUpdate
        #public boolean parmRunTitleCaseUpdate(boolean _runTitleCaseUpdate = runTitleCaseUpdate)
        #{
        #    ;
        #    runTitleCaseUpdate = _runTitleCaseUpdate;
        #
        #    return runTitleCaseUpdate;
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlSettings construct()
        #{
        #    return new SysVersionControlSettings();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSynchronization unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSynchronization
    PROPERTIES
      Name                #SysVersionControlSynchronization
      Extends             #RunBase
      RunOn               #Client
      Origin              #{2D20035B-0000-1000-0629-DD686F8F0B68}
      LegacyId            #859
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlSynchronization extends RunBase
        #{
        #    boolean force;
        #    DialogField dialogForce;
        #    boolean delLocalFiles;
        #    DialogField dialogDelLocalFiles;
        #    DialogField dialogSyncType;
        #    SysVersionControlSynchronizeType syncType;
        #    DialogField dialogSyncLabel;
        #    SysVersionControlLabel syncLabel;
        #
        #    #DEFINE.CurrentVersion(2)
        #    #localmacro.CurrentList
        #        force,
        #        delLocalFiles,
        #        syncType,
        #        syncLabel
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #dialog
        #/// <summary>
        #/// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
        #/// interface.
        #/// </summary>
        #/// <returns>
        #/// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
        #/// </returns>
        #/// <remarks>
        #/// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
        #/// in the Application Object Tree (AOT).
        #/// </remarks>
        #public Object dialog()
        #{
        #    DialogRunbase dialog = super();
        #    DialogGroup   dialogGroup = dialog.addGroup();
        #    DialogText    dialogText;
        #
        #    #define.NumOfColumns(2)
        #    #define.DisplayHeight(6)
        #    #define.DisplayLength(100)
        #
        #    dialogGroup.columns(#NumOfColumns);
        #    dialogGroup.frameType(FormFrameType::None);
        #    dialog.addInfoImage();
        #    dialogText = dialog.addText("@SYS85706"+'\n\n' +
        #        strFmt("@SYS85707","@SYS85708"));
        #    dialogText.displayHeight(#DisplayHeight);
        #    dialogText.displayLengthValue(#DisplayLength);
        #
        #    //only add label field if vcs support sync label
        #    if (versioncontrol &&
        #        versioncontrol.parmSysVersionControlSystem() &&
        #        versioncontrol.parmSysVersionControlSystem().supportSyncLabel())
        #    {
        #        dialogGroup = dialog.addGroup();
        #        dialogGroup.frameType(FormFrameType::None);
        #
        #        dialogSyncType = dialog.addField(enumStr(SysVersionControlSynchronizeType),"@SYS120846");
        #        dialogSyncType.value(syncType);
        #
        #        dialogSyncLabel = dialog.addField(extendedTypeStr(SysVersionControlLabel), "@SYS120844");
        #        dialogSyncLabel.value(syncLabel);
        #
        #        dialogText.text("@SYS85706"+'\n\n' +
        #            strFmt("@SYS85707","@SYS85708")+'\n\n' +
        #            strFmt("@SYS96128","@SYS96127"));
        #
        #        dialogText.displayHeight(#DisplayHeight+2);
        #    }
        #
        #    dialogGroup = dialog.addGroup();
        #    dialogGroup.frameType(FormFrameType::None);
        #
        #    dialogForce = dialog.addField(extendedTypeStr(NoYesId), "@SYS85708");
        #    dialogForce.value(force);
        #
        #    //only add delete local files field if vcs support sync delete local file
        #    if (versioncontrol &&
        #        versioncontrol.parmSysVersionControlSystem() &&
        #        versioncontrol.parmSysVersionControlSystem().supportSyncDeleteLocalFiles())
        #    {
        #        dialogDelLocalFiles = dialog.addField(extendedTypeStr(NoYesId), "@SYS96127");
        #        // Always default to deleting local files.
        #        dialogDelLocalFiles.value(true);
        #    }
        #
        #    dialog.allowUpdateOnSelectCtrl(true);
        #
        #    //Make dialog MDI
        #    dialog.windowType(FormWindowType::Workspace);
        #
        #    return dialog;
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    super();
        #    force  = dialogForce.value();
        #
        #    if (versioncontrol &&
        #        versioncontrol.parmSysVersionControlSystem())
        #    {
        #        //label field only visible if vcs support sync label
        #        if (versioncontrol.parmSysVersionControlSystem().supportSyncLabel())
        #        {
        #            syncLabel = dialogSyncLabel.value();
        #            syncType = dialogSyncType.value();
        #        }
        #        else
        #        {
        #            syncType = SysVersionControlSynchronizeType::LatestVersion;
        #        }
        #
        #        // Delete local files field only visible if vcs support sync delete local files
        #        if (versioncontrol.parmSysVersionControlSystem().supportSyncDeleteLocalFiles())
        #        {
        #            delLocalFiles = dialogDelLocalFiles.value();
        #        }
        #        else
        #        {
        #            delLocalFiles = false;
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #initParmDefault
        #/// <summary>
        #/// Initializes the internal variables.
        #/// </summary>
        #/// <remarks>
        #/// This method is called when the <c>SysLastValue</c> record cannot be found when it calls the
        #/// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
        #/// </remarks>
        #public void initParmDefault()
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    super();
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion, #CurrentList];
        #}
      ENDSOURCE
      SOURCE #run
        #/// <summary>
        #/// Contains the code that does the actual job of the class.
        #/// </summary>
        #public void run()
        #{
        #    TreeNode nodeToSync = null;
        #
        #    startLengthyOperation();
        #
        #    //force sync apply to entire tree node
        #    if (force)
        #    {
        #        nodeToSync = TreeNode::rootNode();
        #    }
        #
        #    switch (syncType)
        #    {
        #        case SysVersionControlSynchronizeType::Label:
        #            //empty label has no effect to sync
        #            if (syncLabel)
        #                versioncontrol.getLabelVersion(nodeToSync, syncLabel);
        #            break;
        #
        #        case SysVersionControlSynchronizeType::LatestVersion:
        #            //Fallthrough
        #
        #        default:
        #            versioncontrol.getLatestVersion(nodeToSync, delLocalFiles);
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Integer     version        = conPeek(packedClass, 1);
        #
        #    switch (version)
        #    {
        #
        #        case #CurrentVersion:
        #            [version] = packedClass;
        #            break;
        #
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlSynchronization construct()
        #{
        #    return new SysVersionControlSynchronization();
        #}
        #
      ENDSOURCE
      SOURCE #description
        #static public ClassDescription description()
        #{
        #    return "@SYS80058";
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    SysVersionControlSynchronization sysVersionControlSynchronization = SysVersionControlSynchronization::construct();
        #
        #    if (!SysVersionControlParameters::isVCSEnabled())
        #    {
        #        throw error("@SYS135983" + ' ' + strFmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formStr(SysVersionControlParametersDev)));
        #    }
        #
        #    if (versioncontrol &&
        #        versioncontrol.parmSysVersionControlSystem() &&
        #        !versioncontrol.parmSysVersionControlSystem().supportSynchronization())
        #    {
        #        throw error("@SYS112528");
        #    }
        #
        #    if (sysVersionControlSynchronization.prompt())
        #    {
        #        // When client synchronizes the VCSDef must be synchronized as well for getting latest
        #        // updates of models.
        #        versioncontrol.init();
        #
        #        sysVersionControlSynchronization.run();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSyncParameters unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSyncParameters
    PROPERTIES
      Name                #SysVersionControlSyncParameters
      Origin              #{2D1F0000-0000-1000-A798-4035BEB25F20}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlSyncParameters
        #{
        #    boolean force;
        #    boolean deleteLocalObjects;
        #    boolean silent;
        #    boolean skipImport;
        #    str syncSpecificDir;
        #
        #    SysVersionControlLabel label;
        #
        #    SysVersionControlItemVersion version;
        #    SysVersionControlChangeNumber changeListNumber;
        #    SysVersionControlSynchronizeBatchNum batchNumber;
        #
        #    boolean syncAll;
        #
        #    utcdatetime dateTime;
        #}
      ENDSOURCE
      SOURCE #parmBatchNumber
        #public SysVersionControlSynchronizeBatchNum parmBatchNumber(SysVersionControlSynchronizeBatchNum _batchNumber = batchNumber)
        #{
        #    batchNumber = _batchNumber;
        #
        #    return batchNumber;
        #}
      ENDSOURCE
      SOURCE #parmChangeListNumber
        #public SysVersionControlChangeNumber parmChangeListNumber(SysVersionControlChangeNumber _changeListNumber = changeListNumber)
        #{
        #    changeListNumber = _changeListNumber;
        #
        #    return changeListNumber;
        #}
      ENDSOURCE
      SOURCE #parmDateTime
        #public utcdatetime parmDateTime(utcdatetime _dateTime = dateTime)
        #{
        #    dateTime = _dateTime;
        #    return dateTime;
        #}
      ENDSOURCE
      SOURCE #parmDeleteLocalObjects
        #public boolean parmDeleteLocalObjects(boolean _deleteLocalObjects = deleteLocalObjects)
        #{
        #    deleteLocalObjects = _deleteLocalObjects;
        #
        #    return deleteLocalObjects;
        #}
      ENDSOURCE
      SOURCE #parmForce
        #public boolean parmForce(boolean _force = force)
        #{
        #    force = _force;
        #
        #    return force;
        #}
      ENDSOURCE
      SOURCE #parmLabel
        #public SysVersionControlLabel parmLabel(SysVersionControlLabel _label = label)
        #{
        #    label = _label;
        #
        #    return label;
        #}
      ENDSOURCE
      SOURCE #parmSilent
        #public boolean parmSilent(boolean _silent = silent)
        #{
        #    silent = _silent;
        #
        #    return silent;
        #}
      ENDSOURCE
      SOURCE #parmSkipImport
        #public boolean parmSkipImport(boolean _skipImport = skipImport)
        #{
        #    skipImport = _skipImport;
        #
        #    return skipImport;
        #}
        #
      ENDSOURCE
      SOURCE #parmSyncAll
        #public boolean parmSyncAll(boolean _syncAll = syncAll)
        #{
        #    syncAll = _syncAll;
        #
        #    return syncAll;
        #}
      ENDSOURCE
      SOURCE #parmSyncSpecificDirectory
        #public str parmSyncSpecificDirectory(str _syncSpecificDir = syncSpecificDir)
        #{
        #    syncSpecificDir = _syncSpecificDir;
        #    return syncSpecificDir;
        #}
      ENDSOURCE
      SOURCE #parmVersion
        #public SysVersionControlItemVersion parmVersion(SysVersionControlItemVersion _version = version)
        #{
        #    version = _version;
        #
        #    return version;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlSyncParameters construct()
        #{
        #    return new SysVersionControlSyncParameters();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSystem unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSystem
    PROPERTIES
      Name                #SysVersionControlSystem
      RunOn               #Client
      Origin              #{2D17035C-0000-1000-6C48-E401DEFD4050}
      LegacyId            #860
    ENDPROPERTIES
    
    METHODS
      SOURCE #addModelFolder
        #/// <summary>
        #/// Adds a model to the current session.
        #/// </summary>
        #/// <param name="_model">
        #/// The specified model to add.
        #/// </param>
        #public void addModelFolder(SysVersionControlModelFile _model)
        #{
        #    if (_model)
        #    {
        #        // Only add to the modelFolders map if it doesn't exists, as these entries are added from the vcsdef.xml file.
        #        // An model entry in the vcsdef.xml file is a relative path. The folder in _model is absolute.
        #        if (!modelFolders.exists(_model.parmRelativeModelFolder()))
        #        {
        #            modelFolders.insert(_model.parmRelativeModelFolder(), ''); // Empty description
        #        }
        #
        #        models.insert(_model.parmModelId(), _model);
        #    }
        #}
      ENDSOURCE
      SOURCE #addXMLParameter
        #protected void addXMLParameter(XmlDocument _xmL, XmlNode _parentNode, str _name, str _value)
        #{
        #    XmlElement node = _xmL.createNode(XmlNodeType::Element, _name, '');
        #
        #    node.setAttribute(#XMLValue, _value);
        #    _parentNode.appendChild(node);
        #}
      ENDSOURCE
      SOURCE #aldLocationFromFolder
        #/// <summary>
        #/// Retrieves the relative path for the ald files for a given model.
        #/// </summary>
        #/// <param name="_folder">
        #/// The folder that contains the model files.
        #/// </param>
        #/// <returns>
        #/// The relative file path for the ald files.
        #/// </returns>
        #public FilePath aldLocationFromFolder(FilePath _folder)
        #{
        #    if (aldLocationsFromXML.exists(_folder))
        #    {
        #        return aldLocationsFromXML.lookup(_folder);
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #aldLocationFromModelId
        #/// <summary>
        #/// Retrieves the relative path for the ald files for a given model.
        #/// </summary>
        #/// <param name="_modelId">
        #/// The ID for the model.
        #/// </param>
        #/// <returns>
        #/// The relative file path for the ald files.
        #/// </returns>
        #public FilePath aldLocationFromModelId(modelId _modelId)
        #{
        #    if (aldLocations.exists(_modelId))
        #    {
        #        return aldLocations.lookup(_modelId);
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #allowCheckIn
        #public boolean allowCheckIn(SysVersionControllable _controllable)
        #{
        #    if (_controllable)
        #        return _controllable.allowCheckIn(settings);
        #
        #    //Allow check in of objects not in the AOT,
        #    //in order to support rename and delete
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowCheckOut
        #public boolean allowCheckOut(SysVersionControllable _controllable, boolean _checkMultipleCheckout = true)
        #{
        #    return SysVersionControlSynchronizeLog::validateFile(this.fileName(_controllable));
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControllable _controllable)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowDelete
        #public boolean allowDelete(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowEdit
        #public boolean allowEdit(SysVersionControllable _controllable)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowMoveToModel
        #/// <summary>
        #/// Evaluates whether the <c>SysVersionControllable</c> interface can be moved to a model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface.
        #/// </param>
        #/// <param name="_modelId">
        #/// The ID of the model.
        #/// </param>
        #/// <returns>
        #/// true if the move is enabled; otherwise, false.
        #/// </returns>
        #public boolean allowMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    if (this.supportModels())
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        error("@SYS327408");
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowRename
        #public boolean allowRename(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #applyGlobalSettings
        #/// <summary>
        #/// Applies the definition file into the version control system.
        #/// </summary>
        #/// <returns>
        #/// true if the definition file is applied successfully; otherwise, false.
        #/// </returns>
        #public boolean applyGlobalSettings()
        #{
        #    XmlDocument                     xml;
        #    XmlElement                      topNode;
        #    int                             line = infologLine();
        #    SysVersionControlDefFile        defFile;
        #    Filename                        defFileName;
        #    SysVersionControlTmpItem        defFileHistory;
        #    TextBuffer                      textBuffer;
        #    XmlDocument                     xmlDoc;
        #    SysVersionControlSyncParameters syncParm;
        #    #WinApi
        #
        #    //
        #    // Construct definition file
        #    //
        #    defFile = SysVersionControlDefFile::newVCSDefFile();
        #    defFileName = this.fileName(defFile);
        #
        #    //
        #    // If a local file exist, it may not be from the server
        #    //
        #    if (WinAPI::fileExists(defFileName))
        #    {
        #        //
        #        // Does the file exist on the server?
        #        //
        #        defFileHistory = this.getItemHistory(defFile);
        #        infolog.clear(line);
        #        select firstonly defFileHistory;
        #
        #        if (!defFileHistory)
        #        {
        #            //
        #            // The local file does not exist on the server -> add it!
        #            //
        #            textBuffer = new TextBuffer();
        #            textBuffer.fromFile(defFileName);
        #            xmlDoc = XmlDocument::newXml(textBuffer.getText());
        #            defFile.parmXML(xmlDoc);
        #            WinAPI::setFileAttributes(defFileName, #FILE_ATTRIBUTE_ARCHIVE);
        #            WinAPI::deleteFile(defFileName);
        #
        #            info(strFmt("@SYS18625", defFileName));
        #            this.commandAdd(defFile);
        #        }
        #    }
        #    else
        #    {
        #        //
        #        // In case the file is in the VCS but not locally, force sync it
        #        //
        #        syncParm = SysVersionControlSyncParameters::construct();
        #        syncParm.parmSilent(true);
        #        syncParm.parmForce(true);
        #
        #        this.commandSynchronize(defFile, syncParm);
        #        infolog.clear(line);
        #    }
        #
        #    //
        #    // Add definition file to repository if it does not exists
        #    //
        #    if (!WinAPI::fileExists(defFileName))
        #    {
        #        this.createDefinitionFile(defFile);
        #        this.commandAdd(defFile);
        #    }
        #    else
        #    {
        #        //
        #        // Get lastest def file, if it is not checked out
        #        //
        #        if (!this.allowEdit(defFile))
        #        {
        #            this.getLatestDefFile();
        #        }
        #    }
        #
        #    //
        #    // Apply the definition file to the version control system.
        #    //
        #    try
        #    {
        #        xml         = XmlDocument::newFile(defFileName);
        #        topNode     = xml.documentElement();
        #
        #        this.interpretXMLParameters(topNode);
        #    }
        #    catch
        #    {
        #        warning(strFmt("@SYS19312", defFileName));
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canImport
        #/// <summary>
        #///    Validates whether the file can be imported without conflicting with an existing ID of the same
        #///    object type.
        #/// </summary>
        #/// <param name="controllable">
        #///    The instance of <c>SysVersionControllable</c> class.
        #/// </param>
        #/// <param name="filename">
        #///    The name of the file to validate.
        #/// </param>
        #/// <returns>
        #///    true if no conflict with an existing ID was found or  the object does not contain an ID; otherwise,
        #///    false.
        #/// </returns>
        #/// <remarks>
        #///    The validation is checking for one object only in the file. If the file contains more than one
        #///    object, the method will throw an exception. If the file does not exist, an error will added to the
        #///    Infolog. If the file conflicts with an existing ID, an error will be added to the Infolog. The
        #///    method does not import the file.
        #/// </remarks>
        #/// <exception cref="M:Exception::Error">
        #///    The file contains more than one object.
        #/// </exception>
        #public boolean canImport(SysVersionControllable controllable, Filename filename)
        #{
        #    SysImportElements       checkIDImportElement;
        #    TmpAotImport            tmpImportAot;
        #    TmpAotImport            checkNoOfObjects;
        #    UtilIdElements          element;
        #
        #    if (!WinAPI::fileExists(filename))
        #    {
        #        error(strFmt("@SYS18678", filename));
        #        return false;
        #    }
        #
        #    // VSItems cannot conflict with other controllables.
        #    if ((controllable is SysTreeNodeVirtualVSItemDeleted) ||
        #        (controllable is SysTreeNodeVSItem))
        #    {
        #        return true;
        #    }
        #
        #    checkIDImportElement = new SysImportElements();
        #
        #    // Set the filename.
        #    checkIDImportElement.newFile(filename);
        #
        #    // Get info from the file
        #    tmpImportAot = checkIDImportElement.getTmpImportAot();
        #
        #    // Check that the file only contains one object
        #    checkNoOfObjects.setTmpData(tmpImportAot);
        #    select count (RecId) from checkNoOfObjects;
        #    if (checkNoOfObjects.RecId > 1)
        #    {
        #        throw error("@SYS112907");
        #    }
        #
        #    // Does the file contain ID
        #    if (tmpImportAot.UtilElementId)
        #    {
        #        // Get name of possible existing object name
        #        select firstonly Name from element where element.Id == tmpImportAot.UtilElementId
        #                                              && element.ParentId == 0
        #                                              && element.RecordType == tmpImportAot.UtilElementType;
        #
        #        // Check if the ID is already used in the AOD with a different name
        #        if (element.Name && element.Name != tmpImportAot.TreeNodeName)
        #        {
        #            error(strFmtLB(strFmt("@SYS112908",
        #                tmpImportAot.UtilElementId,
        #                tmpImportAot.UtilElementType,
        #                element.Name,
        #                tmpImportAot.TreeNodePath)));
        #
        #            return false;
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInChangelist
        #public void checkInChangelist(
        #    SysVersionControlTmpItem _items,
        #    SysVersionControlItemComment _comment = '',
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public abstract class SysVersionControlSystem
        #{
        #    #AOTExport
        #    #file
        #    #Properties
        #    #SysVersionControl
        #
        #    SysVersionControlRepositoryFolder   folder;
        #    SysVersionControlProject            project;
        #    SysVersionControlTestProject        testProject;
        #
        #    SysVersionControlSettings settings;
        #
        #    Set     unwantedObjectTypes;
        #    Set     unwantedObjectNames;
        #
        #    Map     additionalFolders;
        #    Map     modelFolders;
        #    Map     models;
        #    Map     aldLocations;
        #    Map     aldLocationsFromXML;
        #
        #    boolean aotColoring;
        #    boolean warnWhenReverting;
        #}
      ENDSOURCE
      SOURCE #commandAdd
        #public boolean commandAdd(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandCheckIn
        #public void commandCheckIn(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #}
      ENDSOURCE
      SOURCE #commandCheckOut
        #public boolean commandCheckOut(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    return _controllable != null;
        #}
      ENDSOURCE
      SOURCE #commandDelete
        #public boolean commandDelete(SysVersionControllable _controllable)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandMoveToModel
        #/// <summary>
        #/// Moves the <c>SysVersionControllable</c> interface to the model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface to move.
        #/// </param>
        #/// <param name="_modelId">
        #/// The model that the <c>SysVersionControllable</c> interface is moved to.
        #/// </param>
        #/// <returns>
        #/// true if the move was successful; otherwise, false.
        #/// </returns>
        #public boolean commandMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandOnAfterRename
        #/// <summary>
        #/// Invokes VCS rename on an AOT item.This method is called when the tree node and corresponding file
        #/// have been already renamed.
        #/// </summary>
        #/// <param name="oldControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the old node.
        #/// </param>
        #/// <param name="newControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the new renamed node.
        #/// </param>
        #/// <returns>
        #/// true if the renaming is successful; otherwise, false.
        #/// </returns>
        #public boolean commandOnAfterRename(SysVersionControllable oldControllable, SysVersionControllable newControllable)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandRename
        #public boolean commandRename(SysVersionControllable _controllable, identifierName _oldName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSave
        #public boolean commandSave(SysVersionControllable _controllable)
        #{
        #    Filename filename;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        treeNodeContainer.parmTreeNodeContainerDispatcher().save();
        #        return true;
        #    }
        #
        #    filename = this.fileName(_controllable);
        #
        #    if (!this.allowCreate(_controllable))
        #    {
        #        // Skip save operation during XPO import/Synchronization
        #        if (!versioncontrol.parmIsSynchronizing())
        #        {
        #            if (SysVersionControlSynchronizeLog::validateFile(filename))
        #            {
        #                if (!_controllable.toFile(filename, true))
        #                {
        #                    throw error(strFmt("@SYS26666", filename));
        #                }
        #            }
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandShowHistory
        #public void commandShowHistory(SysVersionControllable _controllable)
        #{
        #    versioncontrol.parmUserInterfaceProvider().showHistory(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandSynchronize
        #//
        #// Returns true if the controllable already was up-to-date
        #//
        #public boolean commandSynchronize(
        #    SysVersionControllable          _controllable,
        #    SysVersionControlSyncParameters _syncParm
        #    )
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSynchronizeAndCheckout
        #public boolean commandSynchronizeAndCheckout(SysVersionControllable _controllable)
        #{
        #    boolean synced;
        #    SysVersionControlSyncParameters syncParm = SysVersionControlSyncParameters::construct();
        #
        #    syncParm.parmSilent(true);
        #    syncParm.parmForce(true);
        #    do
        #    {
        #        //
        #        // Sync can take a few minutes (for label files)
        #        // Keep sync'ing as long as others change the file while this client is sync'ing.
        #        // The first sync uses force (for label files)
        #        //
        #        synced = this.commandSynchronize(_controllable, syncParm);
        #        syncParm.parmForce(false);
        #    }
        #    while (!synced);
        #
        #    //
        #    // In reality the file could be changed elsewhere
        #    // after exiting the loop above and before doing the checkout.
        #    //
        #
        #    return this.commandCheckOut(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandUndoCheckOut
        #public boolean commandUndoCheckOut(
        #    SysVersionControllable                   _controllable,
        #    boolean                                  _showDialog = false,
        #    SysVersionControlSynchronizeBatchNum     _batchNum = SysVersionControlSynchronizeLog::nextBatchNum()
        #    )
        #{
        #    return _controllable != null;
        #}
      ENDSOURCE
      SOURCE #createDefinitionFile
        #public XmlDocument createDefinitionFile(SysVersionControlDefFile _defFile)
        #{
        #    #define.DefFileTreenodePath('\\Resources\\SysVersionControlSystemMorphXDefFile')
        #
        #    XmlDocument     xmlDoc;
        #    XML             xml;
        #    XmlElement      topNode;
        #    FilePath        path;
        #    Filename        name;
        #    resourceNode    resourceNode = TreeNode::findNode(#DefFileTreenodePath);
        #
        #    [path, name] = fileNameSplit(this.fileName(_defFile));
        #    if (!WinAPI::folderExists(path))
        #    {
        #        WinAPI::createDirectoryPath(path);
        #    }
        #
        #    [xml] = SysResource::getResourceNodeData(resourceNode);
        #    xmlDoc = XmlDocument::newXml(xml);
        #    topNode = xmlDoc.documentElement();
        #
        #    return _defFile.parmXML(xmlDoc);
        #}
      ENDSOURCE
      SOURCE #createModelsMap
        #private void createModelsMap()
        #{
        #    MapEnumerator mapEnumerator;
        #    Filename modelFile;
        #    FilePath modelFilePath;
        #    FilePath modelFolder;
        #    SysVersionControlModelFile controllableModelFile;
        #    SysVersionControlSyncParameters syncParm;
        #    int line;
        #    boolean fileExists;
        #
        #    mapEnumerator = modelFolders.getEnumerator();
        #    models = new Map(Types::Integer, Types::Class);
        #    aldLocations = new Map(Types::Integer, Types::String);
        #
        #    // Iterate the folders
        #    while (mapEnumerator.moveNext())
        #    {
        #        modelFolder = mapEnumerator.currentKey();
        #        modelFilePath = strFmt(@'%1\%2', this.parmFolder(), modelFolder);
        #        modelFile = strFmt(@'%1\%2', modelFilePath, #ModelFileNameWithExtension);
        #
        #        fileExists = System.IO.File::Exists(modelFile);
        #
        #        // Read the model.xml file in each folder
        #        if (!fileExists)
        #        {
        #            // In case the file is in the VCS but not locally, force sync it
        #            line = infologLine();
        #
        #            syncParm = SysVersionControlSyncParameters::construct();
        #            syncParm.parmSilent(true);
        #            syncParm.parmForce(true);
        #
        #            controllableModelFile = SysVersionControlModelFile::construct();
        #            controllableModelFile.parmModelFolder(modelFile);
        #
        #            this.commandSynchronize(controllableModelFile, syncParm);
        #
        #            infolog.clear(line);
        #
        #            fileExists = System.IO.File::Exists(modelFile);
        #
        #            // Give warning if it still does not exists after a sync.
        #            if (!fileExists)
        #            {
        #                warning(strFmt("@SYS327410", modelFilePath));
        #            }
        #        }
        #
        #        if (fileExists)
        #        {
        #            controllableModelFile = SysVersionControlModelFile::construct();
        #            controllableModelFile.fromFile(modelFile);
        #            this.addModelFolder(controllableModelFile);
        #
        #            if (aldLocationsFromXML.exists(modelFolder))
        #            {
        #                aldLocations.insert(controllableModelFile.parmModelId(), aldLocationsFromXML.lookup(modelFolder));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #}
      ENDSOURCE
      SOURCE #description
        #public ClassDescription description()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #editDefFile
        #public boolean editDefFile(XmlDocument xml)
        #{
        #    SysVersionControlDefFile configFile;
        #    boolean                  ret = true;
        #    SysVersionControlSyncParameters syncParm;
        #
        #    configFile = SysVersionControlDefFile::newVCSDefFile();
        #    configFile.parmXML(xml);
        #
        #    try
        #    {
        #        //
        #        // In case the file is in the VCS but not locally, sync it
        #        //
        #        if (!WinAPI::fileExists(this.fileName(configFile)))
        #        {
        #            syncParm = SysVersionControlSyncParameters::construct();
        #            syncParm.parmSilent(true);
        #            this.commandSynchronize(configFile, syncParm);
        #        }
        #
        #        if (WinAPI::fileExists(this.fileName(configFile)))
        #        {
        #            //
        #            // Check the definition file out.
        #            //
        #
        #            if (!this.allowEdit(configFile))
        #            {
        #                if (!this.commandSynchronizeAndCheckout(configFile))
        #                {
        #                    throw error(strFmt("@SYS94398",this.fileName(configFile)));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            //
        #            // Add the definition file to version control.
        #            //
        #
        #            if (!this.allowCreate(configFile) || !this.commandAdd(configFile))
        #            {
        #                throw error(strFmt("@SYS94397",this.fileName(configFile)));
        #            }
        #        }
        #
        #        ret = configFile.toFile(this.fileName(configFile), true);
        #    }
        #    catch
        #    {
        #        throw error(strFmt("@SYS94396",this.fileName(configFile)));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fileName
        #/// <summary>
        #/// Gets the file name for the <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface of which to get the file name.
        #/// </param>
        #/// <param name="_currentLayer">
        #/// Use the current layer; optional.
        #/// </param>
        #/// <param name="_promptForFolder">
        #/// A Boolean value that indicates whether a prompt for folder must be performed; optional.
        #/// </param>
        #/// <returns>
        #/// The file name for the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #public Filename fileName(
        #    SysVersionControllable _controllable,
        #    boolean                _currentLayer = true,
        #    boolean                _promptForFolder = false)
        #{
        #    Filename filename    = _controllable.versionControlFilePath(_currentLayer)+_controllable.fileExtension();
        #
        #    return strFmt('%1\\%2', folder, filename);
        #}
      ENDSOURCE
      SOURCE #getActionText
        #/// <summary>
        #/// Gets the action text for the controllable item.
        #/// </summary>
        #/// <param name="controllable">
        #/// The instance of the controllable item.
        #/// </param>
        #/// <returns>
        #/// The value from <c>SysVersionControlItemStatus</c> that represents the checked-out action of the
        #/// controllable item.
        #/// </returns>
        #public SysVersionControlItemStatus getActionText(SysVersionControllable controllable)
        #{
        #    return SysVersionControlItemStatus::Uncontrolled;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #public SysVersionControlTmpItem getCheckedOutItems()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getControllable
        #public SysVersionControllable getControllable(
        #    SysVersionControlItemPath _itemPath,
        #    Filename                  _filename)
        #{
        #    return SysVersionControlTmpItem::newControllable(_itemPath, _filename);
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #public SysVersionControlTmpItem getItemHistory(SysVersionControllable _controllable)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getItemVersion
        #public Filename getItemVersion(SysVersionControllable _controllable, SysVersionControlTmpItem _version)
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getLatestDefFile
        #protected boolean getLatestDefFile()
        #{
        #    SysVersionControlDefFile        defFile;
        #    SysVersionControlSyncParameters syncParm;
        #
        #    defFile = SysVersionControlDefFile::newVCSDefFile();
        #
        #    try
        #    {
        #        syncParm = SysVersionControlSyncParameters::construct();
        #        syncParm.parmForce(true);
        #        syncParm.parmSilent(true);
        #        this.commandSynchronize(defFile, syncParm);
        #    }
        #    catch
        #    {
        #        error("@SYS94408");
        #        return false;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #getModelFolder
        #/// <summary>
        #/// Gets the folder for the model.
        #/// </summary>
        #/// <param name="_modelId">
        #/// The specified model ID of which to get the folder.
        #/// </param>
        #/// <returns>
        #/// A file path of a folder if found; otherwise, an empty string.
        #/// </returns>
        #public FilePath getModelFolder(modelId _modelId)
        #{
        #    SysVersionControlModelFile modelFile;
        #
        #    if (models.exists(_modelId))
        #    {
        #        modelFile = models.lookup(_modelId);
        #        return modelFile.parmModelFolder();
        #    }
        #
        #    //It is a system generated model, fall back to ax 2009 behavior.
        #    if (_modelId <= enumCnt(UtilEntryLevel))
        #    {
        #        return strFmt("%1\\%2", folder, enum2Symbol(enumNum(UtilEntryLevel), _modelId - 1));
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getModelFromFile
        #/// <summary>
        #/// Gets the model ID for the specified file name.
        #/// </summary>
        #/// <param name="_filename">
        #/// A file name.
        #/// </param>
        #/// <returns>
        #/// The ID of the model.
        #/// </returns>
        #/// <remarks>
        #/// <c>#ModelId_Undefined</c> is returned if no model is found.
        #/// </remarks>
        #public modelId getModelFromFile(Filename _filename)
        #{
        #    MapEnumerator modelsEnumerator;
        #    SysVersionControlModelFile modelFile;
        #    #File
        #    #SysModelStore
        #
        #    modelsEnumerator = models.getEnumerator();
        #    while (modelsEnumerator.moveNext())
        #    {
        #        modelFile = modelsEnumerator.currentValue();
        #
        #        if (strStartsWith(_filename, modelFile.parmModelFolder()+#FilePathDelimiter))
        #        {
        #            return modelFile.parmModelId();
        #        }
        #    }
        #
        #    return #ModelId_Undefined;
        #}
      ENDSOURCE
      SOURCE #getXMLParameterValue
        #public str getXMLParameterValue(str _name, XmlElement _topNode)
        #{
        #    XmlElement typeNode = _topNode.selectSingleNode(_name);
        #
        #    if (typeNode)
        #        return typeNode.getAttribute(#XMLValue);
        #    return '';
        #}
      ENDSOURCE
      SOURCE #ideIntegration
        #public boolean ideIntegration()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #importLocalItems
        #public void importLocalItems(SysVersionControlTmpItem _pendingItems)
        #{
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init(SysVersionControlParameters _parameters)
        #{
        #    boolean ret = true;
        #
        #    //init parameters
        #    if(_parameters.RepositoryFolder)
        #    {
        #        this.parmFolder(_parameters.getTargetRepositoryFolder());
        #
        #        if (!WinAPI::folderExists(folder))
        #        {
        #            ret = checkFailed(strFmt("@SYS72247", folder));
        #        }
        #    }
        #    else
        #    {
        #        ret = checkFailed("@SYS120742");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #interpretXMLParameters
        #protected void interpretXMLParameters(XmlElement _topNode)
        #{
        #    XmlElement bestPractice;
        #    XmlElement label;
        #    XmlElement unwObjectTypes;
        #    XmlElement unwObjectType;
        #    XmlElement unwObjectNames;
        #    XmlElement unwObjectName;
        #
        #    XmlElement foldersNode;
        #    XmlElement folderNode;
        #    XmlElement modelsNode;
        #    XmlElement modelNode;
        #
        #    XmlElement pluginSettings;
        #    SysDictEnum typesEnum   = new SysDictEnum(enumNum(UtilElementType));
        #    str unwantedTypeName;
        #    int unwantedTypeValue;
        #    SysLabelInterval sysLabelInterval;
        #
        #    project                  = this.getXMLParameterValue(#XMLProject, _topNode);
        #
        #    bestPractice             = _topNode.selectSingleNode(#XMLBestPractice);
        #    settings.parmGateCompileErrors(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLCompileErrors, bestPractice)));
        #    settings.parmGateCompileWarnings(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLCompileWarnings, bestPractice)));
        #    settings.parmGateCompileToDos(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLCompileToDos, bestPractice)));
        #    settings.parmGateBestPracticeErrors(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLBPErrors, bestPractice)));
        #    settings.parmRunTitleCaseUpdate(#PropertyValueYes == this.getXMLParameterValue(#XMLTitleCaseUpdate, bestPractice));
        #    testProject              = this.getXMLParameterValue(#XMLCheckInTestProject, bestPractice);
        #
        #    label = _topNode.selectSingleNode(#XMLLabel);
        #    if (label)
        #    {
        #        settings.parmDefaultLabelFile(this.getXMLParameterValue(#XMLLabelDefault, label));
        #        settings.parmLabelIntervalMin(str2int(this.getXMLParameterValue(#XMLLabelIntervalMin, label)));
        #        settings.parmLabelIntervalMax(str2int(this.getXMLParameterValue(#XMLLabelIntervalMax, label)));
        #
        #        if (settings.parmDefaultLabelFile())
        #        {
        #            delete_from sysLabelInterval;
        #
        #            if (settings.parmLabelIntervalMin() &&
        #                settings.parmLabelIntervalMax())
        #            {
        #                sysLabelInterval.LabelModuleId = settings.parmDefaultLabelFile();
        #                sysLabelInterval.LabelIntervalFrom = settings.parmLabelIntervalMin();
        #                sysLabelInterval.LabelIntervalTo = settings.parmLabelIntervalMax();
        #                sysLabelInterval.LabelIntervalStatus = LabelIntervalStatus::Free;
        #
        #                if (sysLabelInterval.validateWrite())
        #                {
        #                    sysLabelInterval.insert();
        #                }
        #            }
        #        }
        #    }
        #
        #    unwantedObjectTypes = new Set(Types::Enum);
        #    unwObjectTypes = _topNode.selectSingleNode(#XMLUnwantedObjectTypes);
        #    if (unwObjectTypes)
        #    {
        #        unwObjectType = unwObjectTypes.firstChild();
        #        while (unwObjectType)
        #        {
        #            unwantedTypeName = unwObjectType.getAttribute(#XMLValue);
        #            unwantedTypeValue = typesEnum.name2Value(unwantedTypeName);
        #            if(unwantedTypeValue < 250 )
        #            {
        #                unwantedObjectTypes.add(unwantedTypeValue);
        #            }
        #            else
        #            {
        #                warning(strFmt("@SYS94402",unwantedTypeName));
        #            }
        #            unwObjectType = unwObjectType.nextSibling();
        #        }
        #    }
        #
        #    unwantedObjectNames = new Set(Types::String);
        #    unwObjectNames = _topNode.selectSingleNode(#XMLUnwantedObjectNames);
        #    if (unwObjectNames)
        #    {
        #        unwObjectName = unwObjectNames.firstChild();
        #        while (unwObjectName)
        #        {
        #            unwantedObjectNames.add(unwObjectName.getAttribute(#XMLValue));
        #            unwObjectName = unwObjectName.nextSibling();
        #        }
        #    }
        #
        #    // ModelFolders
        #    modelFolders = new Map(Types::String, Types::String);
        #    modelsNode = _topNode.selectSingleNode(#XMLModels);
        #
        #    if (modelsNode)
        #    {
        #        modelNode = modelsNode.firstChild();
        #        while (modelNode)
        #        {
        #            modelFolders.insert(modelNode.getAttribute(#XMLModelFolder), modelNode.getAttribute(#XMLDescription));
        #
        #            if (modelNode.hasAttribute(#XMLModelAldLocation))
        #            {
        #                aldLocationsFromXML.insert(modelNode.getAttribute(#XMLModelFolder), modelNode.getAttribute(#XMLModelAldLocation));
        #            }
        #            modelNode = modelNode.nextSibling();
        #        }
        #    }
        #
        #    // Additional folders.
        #    additionalFolders = new Map(Types::String, Types::String);
        #    additionalFolders.insert(strFmt('%1', currentAOLayer()), "@SYS85919");
        #
        #    foldersNode = _topNode.selectSingleNode(#XMLAdditionalFolders);
        #    if (foldersNode)
        #    {
        #        folderNode = foldersNode.firstChild();
        #        while (folderNode)
        #        {
        #            additionalFolders.insert(folderNode.getAttribute(#XMLValue), folderNode.getAttribute(#XMLDescription));
        #            folderNode = folderNode.nextSibling();
        #        }
        #    }
        #
        #    pluginSettings = _topNode.selectSingleNode(#XMLPluginSettings);
        #    this.interpretXMLPluginParameters(pluginSettings);
        #
        #    this.createModelsMap();
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #protected void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #}
      ENDSOURCE
      SOURCE #isTmpItemOpenedForDelete
        #/// <summary>
        #/// Checks whether a version control object is opened for delete.
        #/// </summary>
        #/// <param name="_sysVersionControlTmpItem">
        #/// A temporary <c>SysVersionControlTmpItem</c> buffer to check.
        #/// </param>
        #/// <returns>
        #/// true if the version control object is opened for delete; otherwise, false.
        #/// </returns>
        #public abstract boolean isTmpItemOpenedForDelete(SysVersionControlTmpItem _sysVersionControlTmpItem)
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    settings = SysVersionControlSettings::construct();
        #    unwantedObjectTypes = new Set(Types::Enum);
        #    unwantedObjectNames = new Set(Types::String);
        #    additionalFolders = new Map(Types::String, Types::String);
        #    modelFolders = new Map(Types::String, Types::String);
        #    models = new Map(Types::Integer, Types::Class);
        #    aldLocationsFromXML = new Map(Types::String, Types::String);  //model folder, aldLocation
        #}
      ENDSOURCE
      SOURCE #parmAdditionalFolders
        #public Map parmAdditionalFolders(Map _additionalFolders = additionalFolders)
        #{
        #    additionalFolders = _additionalFolders;
        #
        #    return additionalFolders;
        #}
      ENDSOURCE
      SOURCE #parmAOTColoring
        #public boolean parmAOTColoring (boolean _aotColoring = aotColoring)
        #{
        #    aotColoring = _aotColoring;
        #    return aotColoring;
        #}
      ENDSOURCE
      SOURCE #parmFolder
        #public FilePath parmFolder(FilePath _folder = folder)
        #{
        #    folder = _folder;
        #
        #    return folder;
        #}
        #
      ENDSOURCE
      SOURCE #parmModelFolders
        #public Map parmModelFolders(Map _modelFolders = modelFolders)
        #{
        #    modelFolders = _modelFolders;
        #
        #    return modelFolders;
        #}
        #
      ENDSOURCE
      SOURCE #parmModels
        #public Map parmModels(Map _models = models)
        #{
        #    models = _models;
        #
        #    return models;
        #}
        #
      ENDSOURCE
      SOURCE #parmProject
        #public SysVersionControlProject parmProject(SysVersionControlProject _project = project)
        #{
        #    project = _project;
        #
        #    return project;
        #}
        #
      ENDSOURCE
      SOURCE #parmSettings
        #public SysVersionControlSettings parmSettings(SysVersionControlSettings _settings = settings)
        #{
        #    settings = _settings;
        #
        #    return settings;
        #}
        #
      ENDSOURCE
      SOURCE #parmTestProject
        #public SysVersionControlTestProject parmTestProject(SysVersionControlTestProject _testProject = testProject)
        #{
        #    testProject = _testProject;
        #
        #    return testProject;
        #}
        #
      ENDSOURCE
      SOURCE #parmUnwantedObjectNames
        #public Set parmUnwantedObjectNames()
        #{
        #    return unwantedObjectNames;
        #}
      ENDSOURCE
      SOURCE #parmUnwantedObjectTypes
        #public Set parmUnwantedObjectTypes()
        #{
        #    return unwantedObjectTypes;
        #}
      ENDSOURCE
      SOURCE #parmWarnWhenReverting
        #public boolean parmWarnWhenReverting (boolean _warnWhenReverting = warnWhenReverting)
        #{
        #    warnWhenReverting = _warnWhenReverting;
        #    return warnWhenReverting;
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #protected boolean preCheckInUpdate(Filename _filename, SysVersionControllable _controllable)
        #{
        #    return _controllable.preCheckInUpdate(_filename, settings);
        #}
      ENDSOURCE
      SOURCE #promptCheckin
        #protected boolean promptCheckin(SysVersionControlTmpItem _itemsToCheckIn)
        #{
        #    SysVersionControlTmpItem itemsCheckedOut = this.getCheckedOutItems();
        #
        #    return versioncontrol.parmUserInterfaceProvider().promptCheckin(_itemsToCheckIn, itemsCheckedOut);
        #}
      ENDSOURCE
      SOURCE #removeModelFolder
        #/// <summary>
        #/// Removes the model from the current session.
        #/// </summary>
        #/// <param name="_model">
        #/// The specified model.
        #/// </param>
        #public void removeModelFolder(SysVersionControlModelFile _model)
        #{
        #    if (_model)
        #    {
        #        if (modelFolders.exists(_model.parmRelativeModelFolder()))
        #        {
        #            modelFolders.remove(_model.parmRelativeModelFolder());
        #        }
        #
        #        models.remove(_model.parmModelId());
        #    }
        #}
      ENDSOURCE
      SOURCE #requireTeamServer
        #protected boolean requireTeamServer()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #runTestProject
        #protected boolean runTestProject()
        #{
        #    boolean                     ret = true;
        #    SysTestProject              sysTestProject;
        #    SysTestRunnerProject        runner;
        #    Query                       query;
        #    SysInfoAction_FormrunQuery  infoAction;
        #    SysTestJobId                sysTestJobId;
        #    SysTestListenerDB           listener;
        #    #Aot
        #
        #    if (testProject)
        #    {
        #        sysTestProject = SysTestProject::construct(testProject, ProjectSharedPrivate::ProjShared);
        #
        #        if (sysTestProject)
        #        {
        #            runner = new SysTestRunnerProject(sysTestProject);
        #            listener = new SysTestListenerDB();
        #            runner.getResult().addListener(listener);
        #
        #            runner.run();
        #
        #            if (runner.getResult().getFailureCount() == 0)
        #            {
        #                ret = true;
        #            }
        #            else
        #            {
        #                sysTestJobId = listener.parmJobId();
        #                query = new Query();
        #                query.addDataSource(tableNum(SysTestJobTable)).addRange(fieldNum(SysTestJobTable, TestJobId)).value(queryValue(sysTestJobId)) ;
        #
        #                infoAction = SysInfoAction_FormrunQuery::newFormnameQuery(formStr(SysTestJobTable), query);
        #                throw error("@SYS87671", '', infoAction);
        #            }
        #        }
        #        else
        #        {
        #            throw error(strFmt("@SYS87274", #ProjectSharedPath, testProject));
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #}
      ENDSOURCE
      SOURCE #showStatusLine
        #public boolean showStatusLine()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportAdditionalFolders
        #public boolean supportAdditionalFolders()
        #{
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #supportChangeVersion
        #public boolean supportChangeVersion()
        #{
        #    //version is fundamental for compare so set true as default value and let underlying vcs override
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #public boolean supportCheckInWizard()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportImportOfPendingElements
        #public boolean supportImportOfPendingElements()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportModels
        #public boolean supportModels()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #public boolean supportMultipleCheckout()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #public boolean supportPendingChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #public boolean supportReviews()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #public boolean supportSubmittedChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSynchronization
        #public boolean supportSynchronization()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #public boolean supportSyncLabel()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #validateGlobalSettings
        #/// <summary>
        #/// Validates the definition file.
        #/// </summary>
        #/// <returns>
        #/// true if the definition file is valid; otherwise, false.
        #/// </returns>
        #public boolean validateGlobalSettings()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Checks whether the element name contains valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized <c>SysVersionControlWorkItemProvider</c> object.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #gateSetting2Xml
        #/// <summary>
        #/// Converts a <c>SysVersionControlGateSetting</c> enumeration value to an XML string.
        #/// </summary>
        #/// <param name="_gateSetting">
        #/// The <c>SysVersionControlGateSetting</c> enumeration value.
        #/// </param>
        #/// <returns>
        #/// The xml string.
        #/// </returns>
        #public static XML gateSetting2Xml(SysVersionControlGateSetting _gateSetting)
        #{
        #    XML ret;
        #
        #    switch (_gateSetting)
        #    {
        #        case SysVersionControlGateSetting::Accept:
        #            ret = #PropertyValueYes;
        #            break;
        #
        #        case SysVersionControlGateSetting::Reject:
        #            ret = #PropertyValueNo;
        #            break;
        #
        #        case SysVersionControlGateSetting::Prompt:
        #            ret = #XmlPrompt;
        #            break;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newType
        #public static SysVersionControlSystem newType(SysVersionControlType _type)
        #{
        #    switch (_type)
        #    {
        #        case SysVersionControlType::SysVersionControlSourceDepot:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFileBasedBackEndSD::construct());
        #
        #        case SysVersionControlType::SysVersionControlSourceSafe:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFileBasedBackEndVSS::construct());
        #
        #        case SysVersionControlType::SysVersionControlMorphX:
        #            return SysVersionControlSystemMorphX::construct();
        #
        #        case SysVersionControlType::SysVersionControlTfs:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFilebasedBackEndTfs::construct());
        #    }
        #    return null;
        #}
        #
      ENDSOURCE
      SOURCE #path2Image
        #public static ImageRes path2Image(TreeNodePath _path)
        #{
        ##ResAppl
        ##AOT
        ##define.LabelPath('\\labels\\')
        #
        #    ImageRes imageRes = #ImageMenu;
        #
        #    imageRes = ImageListAppl_Aot::utilElementType2Image(SysTreeNode::path2ApplObjectType(_path),0,0);
        #    if (!imageRes)
        #    {
        #        if (subStr(_path,1,strLen(#LabelPath)) == #LabelPath)
        #        {
        #            imageRes = #ImageLabel;
        #        }
        #        if (subStr(_path,1,strLen(#ApplicationDocPath)) == #ApplicationDocPath ||
        #            subStr(_path,1,strLen(#SystemDocPath)) == #SystemDocPath ||
        #            subStr(_path,1,strLen(#ApplicationDeveloperDocPath)) == #ApplicationDeveloperDocPath)
        #        {
        #            imageRes = #ImageDocumentationItem;
        #        }
        #        if (subStr(_path, 1, strLen(#DefFile)) == #DefFile)
        #        {
        #            imageRes = #ImageWebPageDefinition;
        #        }
        #    }
        #
        #    return imageRes;
        #}
      ENDSOURCE
      SOURCE #xml2GateSetting
        #/// <summary>
        #/// Converts an XML string to a <c>SysVersionControlGateSetting</c> enumeration value.
        #/// </summary>
        #/// <param name="_xml">
        #/// The XML string.
        #/// </param>
        #/// <returns>
        #/// The <c>SysVersionControlGateSetting</c> enumeration value.
        #/// </returns>
        #public static SysVersionControlGateSetting xml2GateSetting(XML _xml)
        #{
        #    SysVersionControlGateSetting ret;
        #
        #    switch (_xml)
        #    {
        #        case #PropertyValueYes:
        #            ret = SysVersionControlGateSetting::Accept;
        #            break;
        #
        #        case #PropertyValueNo:
        #            ret = SysVersionControlGateSetting::Reject;
        #            break;
        #
        #        case #XmlPrompt:
        #            ret = SysVersionControlGateSetting::Prompt;
        #            break;
        #    }
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSystemFileBased unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSystemFileBased
    PROPERTIES
      Name                #SysVersionControlSystemFileBased
      Extends             #SysVersionControlSystem
      RunOn               #Client
      Origin              #{2D203541-0000-1000-7FB6-1A763DFA87BD}
      LegacyId            #13633
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowCheckOut
        #public boolean allowCheckOut(SysVersionControllable _controllable, boolean _checkMultipleCheckout = true)
        #{
        #    Filename    filename;
        #    boolean     ret = super(_controllable);
        #
        #    if (ret)
        #    {
        #        if (_checkMultipleCheckout &&
        #            backend.supportMultipleCheckout() &&
        #            _controllable.allowMultipleCheckout(settings))
        #        {
        #            ret = true;
        #        }
        #        else
        #        {
        #            filename = this.fileName(_controllable);
        #            ret = backend.fileCheckedOutTo(filename) == '';
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControllable _controllable)
        #{
        #    Filename filename;
        #    SysTreeNodeContainer treeNodeContainer;
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #
        #    treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().allowCreate();
        #    }
        #
        #
        #    filename = this.fileName(_controllable, true);
        #    return !WinAPI::fileExists(filename) && _controllable.allowCreate(settings);
        #}
      ENDSOURCE
      SOURCE #allowDelete
        #public boolean allowDelete(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    Filename    filename;
        #    SysTreeNodeContainer treeNodeContainer;
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #
        #    if (_justInTime)
        #    {
        #        treeNodeContainer = _controllable as SysTreeNodeContainer;
        #        if (treeNodeContainer != null)
        #        {
        #            return treeNodeContainer.parmTreeNodeContainerDispatcher().allowDelete();
        #        }
        #
        #        filename = this.fileName(_controllable);
        #
        #        //
        #        // Only allow delete of checked in objects
        #        //
        #        if (this.allowCheckOut(_controllable, false))
        #        {
        #            //
        #            // Has the object been deleted remotely?
        #            //
        #            if (backend.fileExists(filename))
        #            {
        #                return true;
        #            }
        #        }
        #        else
        #        {
        #            //object is checked out already
        #            error(strFmt("@SYS99176", backend.fileCheckedOutTo(filename)));
        #        }
        #        return false;
        #    }
        #
        #    //
        #    // To speed up navigating the AOT, allow delete is checked when a delete is performed
        #    // and not when context menus, property sheets etc. are displayed.
        #    //
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowEdit
        #public boolean allowEdit(SysVersionControllable _controllable)
        #{
        #    #WinApi
        #    Filename filenameObjectLayer  = this.fileName(_controllable, false);
        #    Filename filenameCurrentLayer = this.fileName(_controllable, true);
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().allowEdit();
        #    }
        #
        #    //Exists in current layer
        #    if (filenameObjectLayer == filenameCurrentLayer)
        #    {
        #        //Has the file ever been checked in
        #        if (!WinAPI::fileExists(filenameCurrentLayer))
        #            return true;
        #
        #        //Has the file been checked out
        #        if (!bitTest(WinAPI::getFileAttributes(filenameCurrentLayer), #FILE_ATTRIBUTE_READONLY))
        #            return true;
        #    }
        #    else
        #    {
        #        //Has the file ever been checked in
        #        if (WinAPI::fileExists(filenameCurrentLayer))
        #        {
        #            //Has the file been checked out
        #            if (!bitTest(WinAPI::getFileAttributes(filenameCurrentLayer), #FILE_ATTRIBUTE_READONLY))
        #                return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowMoveToModel
        #/// <summary>
        #/// Indicates whether the <c>SysVersionControllable</c> interface can be moved to a model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface.
        #/// </param>
        #/// <param name="_modelId">
        #/// The ID of the model.
        #/// </param>
        #/// <returns>
        #/// true if the move is allowed; otherwise, false.
        #/// </returns>
        #public boolean allowMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    boolean ret = super(_controllable, _modelId);
        #    Filename filename;
        #
        #    if (!ret)
        #    {
        #        return false;
        #    }
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #
        #    //
        #    // Only allow moveToModel of new and checked in objects
        #    //
        #    if (this.allowCreate(_controllable))
        #    {
        #        return true;
        #    }
        #
        #    if (this.allowCheckOut(_controllable, false))
        #    {
        #        // Only allow moveToModel if model is mapped to folder
        #        if (!this.getModelFolder(_modelId))
        #        {
        #            error(strFmt("@SYS327411",
        #                _controllable.versionControlItemPath(),
        #                SysModelStore::displayName(_modelId)));
        #            return false;
        #        }
        #
        #        return true;
        #    }
        #
        #    //object is checked out already
        #    filename = this.fileName(_controllable);
        #    error(strFmt("@SYS327412", _controllable.versionControlItemPath(), SysModelStore::displayName(_modelId), backend.fileCheckedOutTo(filename)));
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowRename
        #public boolean allowRename(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    Filename filename;
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #    if (_justInTime)
        #    {
        #        //
        #        // Only allow rename of new and checked in objects
        #        //
        #        if (this.allowCreate(_controllable))
        #            return true;
        #
        #        if (this.allowCheckOut(_controllable, false))
        #            return true;
        #
        #        //object is checked out already
        #        filename = this.fileName(_controllable);
        #
        #        error(strFmt("@SYS99148", backend.fileCheckedOutTo(filename)));
        #        return false;
        #    }
        #    //
        #    // To speed up navigating the AOT, allow rename is only checked when a rename is performed
        #    // and not when context menus, propertysheets etc. are displayed.
        #    //
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInChangelist
        #//AOSRunMode::Client
        #public void checkInChangelist(
        #    SysVersionControlTmpItem _items,
        #    SysVersionControlItemComment _comment = '',
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    boolean errorsFound = false;
        #    SysVersionControllable controllable;
        #    Filename filename;
        #    Map checkinFiles = new Map(Types::String, Types::Class);
        #    Set resolveFiles = new Set(Types::String);
        #    Set lockedFiles  = new Set(Types::String);
        #    SetEnumerator enum;
        #    MapEnumerator mapEnumerator;
        #    int infologLine;
        #    #WinApi
        #
        #    setPrefix("@SYS85680");
        #
        #    if (this.promptCheckin(_items))
        #    {
        #        this.runTestProject();
        #
        #        //
        #        // Validate all items are ready for check-in, including running compilation and BP check
        #        //
        #        infologLine = infologLine();
        #        while select _items
        #        {
        #            controllable = _items.getControllable(true);
        #
        #            if (controllable)
        #            {
        #                setPrefix(controllable.versionControlItemPath());
        #
        #                if (_items.ActionText != backend.actionText(SysVersionControlSystemFileAction::Delete) &&
        #                    !this.allowEdit(controllable))
        #                {
        #                    error(strFmt("@SYS85683", _items.ItemPath));
        #                    errorsFound = true;
        #                }
        #                else
        #                {
        #                    if (!this.allowCheckIn(controllable))
        #                    {
        #                        error(strFmt("@SYS85684", _items.ItemPath));
        #                        errorsFound = true;
        #                    }
        #                }
        #            }
        #        }
        #
        #        //
        #        // See if any allowCheckIn calls reported problems
        #        //
        #        if (!errorsFound &&
        #            infologLine != infologLine())
        #        {
        #            if (Box::yesNo(strFmt("@SYS329679", "@SYS70440"), DialogButton::No) == DialogButton::No)
        #            {
        #                errorsFound = true;
        #            }
        #        }
        #
        #        //
        #        // Save all items to disk, including locking files and recreating temporary labels.
        #        //
        #        if (!errorsFound)
        #        {
        #            try
        #            {
        #                while select _items
        #                {
        #                    controllable = _items.getControllable(true);
        #
        #                    if (controllable)
        #                    {
        #                        setPrefix(controllable.versionControlItemPath());
        #
        #                        filename = this.fileName(controllable);
        #
        #                        if (controllable.allowMultipleCheckout(settings) &&
        #                            controllable.allowLockDuringCheckIn(settings))
        #                        {
        #                            if (backend.fileLock(filename))
        #                            {
        #                                lockedFiles.add(filename);
        #                            }
        #                            else
        #                            {
        #                                throw error("@SYS90486");
        #                            }
        #                        }
        #                        if (!this.preCheckInUpdate(filename, controllable))
        #                        {
        #                            error(strFmt("@SYS85685", _items.ItemPath));
        #                            errorsFound = true;
        #                        }
        #
        #                        // Save to disk, unless it is a delete operation.
        #                        if (_items.ActionText == backend.actionText(SysVersionControlSystemFileAction::Delete) ||
        #                           controllable.toFile(filename, false))
        #                        {
        #                            // Add file and controllable to map
        #                            checkinFiles.insert(filename, controllable);
        #                        }
        #                        else
        #                        {
        #                            errorsFound = true;
        #                        }
        #                    }
        #                }
        #            }
        #            catch
        #            {
        #                errorsFound = true;
        #            }
        #
        #            if (!errorsFound)
        #            {
        #                //For SD that isn't required as it is handled by the checkin wizard.
        #                if (!backend.fileSetCheckin(checkinFiles, _comment, _changeList, _workItems))
        #                {
        #                    //check in fail may due to conflicts
        #                    if (backend.fileSetResolve(checkinFiles))
        #                    {
        #                        // try check in again if conflicts are resolved
        #                        if (backend.fileSetCheckin(checkinFiles, _comment, _changeList, _workItems))
        #                        {
        #                            //import resolved xpo file since xpo files can be manually resolved by TFS merge tool
        #                            //this implementation doesn't suppport doc node import as doc node conflicts are rare
        #                            //see SysVersionControlSynchronizeLog.processBatchNum for full implementation
        #                            mapEnumerator = checkinFiles.getEnumerator();
        #                            mapEnumerator.reset();
        #
        #                            while (mapEnumerator.moveNext())
        #                            {
        #                                controllable = mapEnumerator.currentValue();
        #                                if (controllable)
        #                                {
        #                                    //Ignore import xpo if it is checked in as deleted
        #                                    if (WinAPI::fileExists(mapEnumerator.currentKey()))
        #                                    {
        #                                        controllable.fromFile(mapEnumerator.currentKey());
        #                                    }
        #                                }
        #                            }
        #                        }
        #                        else
        #                        {
        #                            errorsFound = true;
        #                        }
        #                    }
        #                    else
        #                    {
        #                        // Not able to resolve. Backend reports errors on this.
        #                        errorsFound = true;
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (errorsFound)
        #        {
        #            //
        #            // Only explicitly unlock in case of errors - checkin also unlocks
        #            //
        #            enum = lockedFiles.getEnumerator();
        #            while (enum.moveNext())
        #            {
        #                backend.fileUnlock(enum.current());
        #            }
        #
        #            throw error("@SYS90486");
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlSystemFileBased extends SysVersionControlSystem
        #implements SysVersionControlReviews
        #{
        #    SysVersionControlFilebasedBackEnd backend;
        #    boolean offline;
        #    #SysVersionControl
        #    Map filenameCache;
        #}
      ENDSOURCE
      SOURCE #commandAdd
        #public boolean commandAdd(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename filename;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().create();
        #    }
        #
        #    if (this.allowCheckOut(_controllable))
        #    {
        #        if (!this.validateMultipleModels(_controllable))
        #        {
        #            error(strFmt("@SYS342399", _controllable.versionControlItemPath()));
        #            return false;
        #        }
        #
        #        filename = this.fileName(_controllable, true, true /*prompt*/);
        #        if (_controllable.addNewFile(filename))
        #        {
        #            if (backend.fileAddToVersionControl(filename, _comment))
        #            {
        #                return true;
        #            }
        #            else
        #            {
        #                _controllable.deleteFile(filename);
        #                return false;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        filename = this.fileName(_controllable);
        #        warning(strFmt("@SYS85687", _controllable.versionControlItemPath(), backend.fileCheckedOutTo(filename)));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandCheckIn
        #public void commandCheckIn(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename    filename = this.fileName(_controllable);
        #    boolean     manuallyUnlock = false;
        #    Map         checkinFiles = new Map(Types::String, Types::Class);
        #
        #    if (!this.allowEdit(_controllable))
        #        throw error(strFmt("@SYS85683", filename));
        #
        #    this.runTestProject();
        #
        #    if (!this.allowCheckIn(_controllable))
        #        throw error(strFmt("@SYS85684", filename));
        #
        #    if (_controllable.allowMultipleCheckout(settings) &&
        #        _controllable.allowLockDuringCheckIn(settings))
        #    {
        #        if (backend.fileLock(this.fileName(_controllable)))
        #        {
        #            manuallyUnlock = true;
        #        }
        #        else
        #        {
        #            throw error("@SYS90486");
        #        }
        #    }
        #
        #    if (this.preCheckInUpdate(filename, _controllable))
        #    {
        #        if (_controllable.toFile(filename, false))
        #        {
        #            checkinFiles.insert(filename, _controllable);
        #
        #            if (backend.fileSetCheckin(checkinFiles, _comment))
        #            {
        #                manuallyUnlock = false;
        #            }
        #        }
        #    }
        #    if (manuallyUnlock)
        #    {
        #        backend.fileUnlock(filename);
        #        throw error("@SYS90486");
        #    }
        #}
      ENDSOURCE
      SOURCE #commandCheckOut
        #public boolean commandCheckOut(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename    filename;
        #    int         attr;
        #    #WinApi
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().checkOut();
        #    }
        #
        #    filename    = this.fileName(_controllable);
        #
        #    if (offline)
        #    {
        #        attr = WinAPI::getFileAttributes(filename);
        #        if (!bitTest(#FILE_ATTRIBUTE_READONLY, attr))
        #        {
        #            warning(strFmt("@SYS88308", _controllable.versionControlItemPath()));
        #            return false;
        #        }
        #        attr -= #FILE_ATTRIBUTE_READONLY;
        #        WinAPI::setFileAttributes(filename, attr);
        #        info(strFmt("@SYS88307", this.fileName(_controllable)));
        #        return true;
        #    }
        #    else
        #    {
        #        if (this.allowCheckOut(_controllable))
        #        {
        #            if (backend.fileCheckout(filename))
        #            {
        #                _controllable.onCheckOut();
        #                return true;
        #            }
        #        }
        #        else
        #        {
        #            warning(strFmt("@SYS85687", _controllable.versionControlItemPath(), backend.fileCheckedOutTo(filename)));
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandDelete
        #public boolean commandDelete(SysVersionControllable _controllable)
        #{
        #    Filename    filename;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().delete();
        #    }
        #
        #    filename    = this.fileName(_controllable);
        #
        #    if (backend.fileDelete(filename))
        #    {
        #        WinAPI::deleteFile(filename);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandMoveToModel
        #/// <summary>
        #/// Moves the <c>SysVersionControllable</c> interface to the model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface to move.
        #/// </param>
        #/// <param name="_modelId">
        #/// The model to which the <c>SysVersionControllable</c> interface is moved.
        #/// </param>
        #/// <returns>
        #/// true if the move was successful; otherwise, false.
        #/// </returns>
        #public boolean commandMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    Filename filename = this.fileName(_controllable);
        #    Filename filenameNew;
        #    FilePath vcsFilePath;
        #    FilePath modelFolder = this.getModelFolder(_modelId);
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        if (modelFolder && filenameCache)
        #        {
        #            vcsFilePath = SysTreeNode::treeNodePath2FilePath(_controllable.versionControlItemPath());
        #            filenameNew = strFmt('%1\%2%3', modelFolder, vcsFilePath, _controllable.fileExtension());
        #
        #            //Update file cache for the container node
        #            filenameCache.insert(_controllable.versionControlItemPath(), filenameNew);
        #        }
        #
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().moveToModel(_modelId);
        #    }
        #
        #    if (modelFolder)
        #    {
        #        //
        #        // Construct new filename
        #        //
        #        vcsFilePath = SysTreeNode::treeNodePath2FilePath(_controllable.versionControlItemPath());
        #        filenameNew = strFmt('%1\%2%3', modelFolder, vcsFilePath, _controllable.fileExtension());
        #
        #        // Update filecache
        #        if (filenameCache)
        #        {
        #            filenameCache.insert(_controllable.versionControlItemPath(), filenameNew);
        #        }
        #
        #        if (backend.fileRename(filename, filenameNew))
        #        {
        #            if (_controllable.toFile(filenameNew))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        return this.commandDelete(_controllable);
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandOnAfterRename
        #/// <summary>
        #/// Invokes a VCS rename on an AOT item.This method is called when the tree node and corresponding file
        #/// have been already renamed.
        #/// </summary>
        #/// <param name="oldControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the old node.
        #/// </param>
        #/// <param name="newControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the new renamed node.
        #/// </param>
        #/// <returns>
        #/// true if successful; otherwise, false.
        #/// </returns>
        #public boolean commandOnAfterRename(SysVersionControllable oldControllable, SysVersionControllable newControllable)
        #{
        #    str oldFilePath = this.fileName(oldControllable);
        #    str newFilePath = this.fileName(newControllable);
        #
        #    return backend.fileRename(oldFilePath, newFilePath);
        #}
      ENDSOURCE
      SOURCE #commandRename
        #public boolean commandRename(SysVersionControllable _controllable, IdentifierName _newName)
        #{
        #    Filename    filenameOld = this.fileName(_controllable);
        #    Filename    filenameNew;
        #    FilePath    filePath;
        #
        #    if (this.allowRename(_controllable, true))
        #    {
        #        [filePath] = fileNameSplit(filenameOld);
        #
        #        //
        #        // Construct new filename
        #        //
        #        filenameNew = filePath+_newName+_controllable.fileExtension();
        #
        #        // Update filenamecache
        #        if (filenameCache)
        #        {
        #            filenameCache.remove(_controllable.versionControlItemPath());
        #        }
        #
        #        if (backend.fileRename(filenameOld, filenameNew))
        #        {
        #            if (_controllable.toFile(filenameNew))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandSynchronize
        #public boolean commandSynchronize(
        #    SysVersionControllable          _controllable,
        #    SysVersionControlSyncParameters _syncParm)
        #{
        #    Filename filename;
        #    SysVersionControlSynchronizeCommand command;
        #    SysVersionControlSynchronizeBatchNum batchNum = _syncParm.parmBatchNumber();
        #    boolean noInfo = false;
        #    Set folderSetSelected;
        #    Set folderSet;
        #    SetEnumerator folderSetEnum;
        #    Map resultMap;
        #    MapEnumerator mapEnum;
        #    boolean isVCSDefFile = _controllable is SysVersionControlDefFile;
        #    SysVersionControllable controllable;
        #    SysTreeNodeContainer contControllable;
        #    RecordInsertList syncEntries;
        #
        #    contControllable = _controllable as SysTreeNodeContainer;
        #
        #    if (contControllable)
        #    {
        #        if (contControllable.parmTreeNodeContainerDispatcher().supportsSynchronize())
        #        {
        #            return contControllable.parmTreeNodeContainerDispatcher().synchronize(_syncParm);
        #        }
        #
        #        _syncParm.parmSyncSpecificDirectory(this.fileName(_controllable));
        #    }
        #
        #    if (!batchNum)
        #        batchNum = SysVersionControlSynchronizeLog::nextBatchNum();
        #
        #    // Evaluate if controllable is special for setting additional parameters.
        #    if (_controllable && isVCSDefFile)
        #    {
        #        _syncParm.parmSilent(true);
        #    }
        #
        #    // Do a synchronization on specific path.
        #    if (_syncParm.parmSyncSpecificDirectory() != '')
        #    {
        #        folderSet = new Set(Types::String);
        #        folderSet.add(_syncParm.parmSyncSpecificDirectory());
        #        resultMap = backend.folderSetSynchronize(folderSet, _syncParm);
        #    }
        #    // Do synchronization either on all nodes or on a single node.
        #    else if (_syncParm.parmSyncAll())
        #    {
        #        // Union the folders for models and additional folders
        #        resultMap = new Map(Types::String, Types::String);
        #        mapEnum = additionalFolders.getEnumerator();
        #
        #        while(mapEnum.moveNext())
        #        {
        #            resultMap.insert(mapEnum.currentKey(), mapEnum.currentValue());
        #        }
        #
        #        mapEnum = modelFolders.getEnumerator();
        #        while(mapEnum.moveNext())
        #        {
        #            // Disallow synchronizing model folders from other layers
        #            if (this.isModelFolderForCurrentLayer(mapEnum.currentKey()))
        #            {
        #                // Models win.
        #                resultMap.insert(mapEnum.currentKey(), mapEnum.currentValue());
        #            }
        #        }
        #
        #        folderSetSelected = versioncontrol.parmUserInterfaceProvider().promptForFolder(resultMap, true, true);
        #        resultMap = null;
        #
        #        folderSet = new Set(Types::String);
        #        folderSetEnum = folderSetSelected.getEnumerator();
        #        while (folderSetEnum.moveNext())
        #        {
        #            folderSet.add(strFmt('\%1\\\%2', folder, folderSetEnum.current()));
        #        }
        #        resultMap = backend.folderSetSynchronize(folderSet, _syncParm);
        #    }
        #    else
        #    {
        #        //Only sync one node
        #        filename = this.fileName(_controllable);
        #        _syncParm.parmForce(_syncParm.parmForce() && _controllable.forceSynchronize());
        #
        #        resultMap = backend.fileSynchronize(filename, _syncParm);
        #    }
        #
        #    // Process synchronized files
        #    if (resultMap) //Sync succeeded
        #    {
        #        if (!_syncParm.parmSyncAll() && _syncParm.parmSilent() && isVCSDefFile)
        #        {
        #            // Don't create synchronization entry for update of VCS definition file.
        #            return true;
        #        }
        #
        #        mapEnum = resultMap.getEnumerator();
        #        syncEntries = new RecordInsertList(tableNum(SysVersionControlSynchronizeLog));
        #
        #        while (mapEnum.moveNext())
        #        {
        #            filename = mapEnum.currentKey();
        #            command = mapEnum.currentValue();
        #
        #            controllable = SysVersionControlTmpItem::newControllable(this.filename2ItemPath(filename), filename);
        #
        #            syncEntries.add(SysVersionControlSynchronizeLog::initLogEntry(
        #                filename,
        #                controllable,
        #                command,
        #                batchNum,
        #                folder));
        #
        #            SysVersionControlTmpItem::releaseControllable(controllable);
        #        }
        #
        #        // Commit sync-entries
        #        syncEntries.insertDatabase();
        #
        #        if (resultMap.elements() && !_syncParm.parmSkipImport())
        #        {
        #            //
        #            // Something to update
        #            //
        #            SysVersionControlSynchronizeLog::processBatchNum(batchNum);
        #
        #            if (!_syncParm.parmSyncAll())
        #            {
        #                //Only sync one node
        #                filename = this.fileName(_controllable);
        #                if (!SysVersionControlSynchronizeLog::validateFile(filename))
        #                {
        #                    throw error("@SYS85688");
        #                }
        #            }
        #            return false;
        #        }
        #    }
        #    else
        #    {
        #        throw error("@SYS85688");
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSynchronizeAndCheckout
        #public boolean commandSynchronizeAndCheckout(SysVersionControllable _controllable)
        #{
        #    if (offline ||
        #        backend.requireSyncBeforeCheckOut() == false)
        #    {
        #        return this.commandCheckOut(_controllable);
        #    }
        #    return super(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandUndoCheckOut
        #public boolean commandUndoCheckOut(
        #    SysVersionControllable                  _controllable,
        #    boolean                                 _showDialog = true,
        #    SysVersionControlSynchronizeBatchNum    _batchNum = SysVersionControlSynchronizeLog::nextBatchNum()
        #)
        #{
        #    Filename                     filename;
        #    SysVersionControlActionText  action;
        #    DialogButton                 button = infolog.globalCache().get(classStr(SysVersionControlSystem), #VCUndoCheckOutButton, DialogButton::No);
        #    int                          attr;
        #
        #    boolean                      reverted = false;
        #    str                          revertedLocalItem;
        #
        #    SysVersionControlSyncParameters syncParm;
        #
        #    #WinApi
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().undoCheckOut(_showDialog);
        #    }
        #
        #    filename    = this.fileName(_controllable);
        #
        #    // Update filenamecache
        #    if (filenameCache)
        #    {
        #        filenameCache.remove(_controllable.versionControlItemPath());
        #    }
        #
        #    if (offline)
        #    {
        #        attr = WinAPI::getFileAttributes(filename);
        #        if (bitTest(#FILE_ATTRIBUTE_READONLY, attr))
        #        {
        #            warning(strFmt("@SYS88309", filename));
        #            return false;
        #        }
        #        attr += #FILE_ATTRIBUTE_READONLY;
        #        WinAPI::setFileAttributes(filename, attr);
        #        info(strFmt("@SYS88310", this.fileName(_controllable)));
        #        return true;
        #    }
        #
        #    if (_showDialog && this.parmWarnWhenReverting())
        #    {
        #        if (button != DialogButton::YesToAll)
        #        {
        #            button = versioncontrol.parmUserInterfaceProvider().promptWhenReverting(strFmt("@SYS111302",'\n\n'+filename)+'\n\n'+"@SYS111301"+'\n'+"@SYS73804",
        #                DialogButton::No,
        #                "@SYS85686",  // title
        #                true);        // modal
        #        }
        #    }
        #    else
        #    {
        #        button = DialogButton::Yes;
        #    }
        #
        #    switch (button)
        #    {
        #        case DialogButton::Cancel:
        #            throw error("@SYS70800");
        #
        #        case DialogButton::YesToAll:
        #            infolog.globalCache().set(classStr(SysVersionControlSystem), #VCUndoCheckOutButton, DialogButton::YesToAll);
        #            //Fallthrough
        #
        #        case DialogButton::Yes:
        #            action = backend.actionTextForCheckedOutFile(filename);
        #
        #            //backend should make sure the reverted file is written to given filename
        #            [reverted, revertedLocalItem] = backend.fileUndoCheckout(filename);
        #            if (reverted)
        #            {
        #                switch (action)
        #                {
        #                    case backend.actionText(SysVersionControlSystemFileAction::Branch):
        #                        //Remove file from disk
        #                        _controllable.deleteFile(filename);
        #                        SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Delete, _batchNum);
        #                        break;
        #
        #                    case backend.actionText(SysVersionControlSystemFileAction::Add):
        #                        //Remove file from disk
        #                        _controllable.deleteFile(filename);
        #
        #                        //
        #                        // If the file has been added remotely, sync it
        #                        //
        #                        if (backend.fileExists(filename))
        #                        {
        #                            syncParm = SysVersionControlSyncParameters::construct();
        #                            syncParm.parmForce(true);
        #                            syncParm.parmSilent(false);
        #                            syncParm.parmDeleteLocalObjects(true);
        #                            backend.fileSynchronize(filename, syncParm);
        #                            SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Update, _batchNum);
        #                        }
        #                        break;
        #
        #                    case backend.actionText(SysVersionControlSystemFileAction::Rename):
        #                        //remove newly added controllable
        #                        SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Delete, _batchNum);
        #                        //create controllable was renamed
        #                        _controllable = SysVersionControlTmpItem::newControllable(this.filename2ItemPath(revertedLocalItem), revertedLocalItem);
        #
        #                        //sync the latest version due to rename also changes the file content (class header) that can not be undone
        #                        syncParm = SysVersionControlSyncParameters::construct();
        #                        syncParm.parmForce(true);
        #                        syncParm.parmSilent(false);
        #                        syncParm.parmDeleteLocalObjects(true);
        #                        backend.fileSynchronize(revertedLocalItem, syncParm);
        #
        #                        SysVersionControlSynchronizeLog::createLogEntry(revertedLocalItem, _controllable, SysVersionControlSynchronizeCommand::Update, _batchNum);
        #                        break;
        #
        #                    case backend.actionText(SysVersionControlSystemFileAction::Delete):
        #                    default:
        #                        SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Update, _batchNum);
        #                }
        #                //
        #                // Process the batch if no number specified = Only one object in batch
        #                //
        #                if (prmisDefault(_batchNum))
        #                {
        #                    SysVersionControlSynchronizeLog::processBatchNum(_batchNum);
        #                }
        #                _controllable.onUndoCheckOut();
        #                return true;
        #            }
        #            break;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    backend.createRepositoryEnd(_comment);
        #}
      ENDSOURCE
      SOURCE #description
        #public ClassDescription description()
        #{
        #    return backend.description();
        #}
      ENDSOURCE
      SOURCE #fileName
        #/// <summary>
        #/// Gets the file name for the <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface of which to get the file name.
        #/// </param>
        #/// <param name="_currentLayer">
        #/// Use the current layer; optional.
        #/// </param>
        #/// <param name="_promptForFolder">
        #/// A Boolean value that indicates whether a prompt for folder must be performed; optional.
        #/// </param>
        #/// <returns>
        #/// The file name for the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #public Filename fileName(
        #    SysVersionControllable _controllable,
        #    boolean                _currentLayer = true,
        #    boolean                _promptForFolder = false)
        #{
        #    SetEnumerator   folderEnumerator;
        #    Filename        filename = _controllable.versionControlFilePath(_currentLayer)+_controllable.fileExtension();
        #    Filename        fileNameExclLayer;
        #    Filename        tmpFileName;
        #    Set             folderset;
        #    SetEnumerator   foldersetEnum;
        #    SysTreeNode     sysTreeNode;
        #    int             model;
        #    FilePath        modelFolder;
        #    TreeNode        treeNode;
        #    SysLabelFile    sysLabelFile;
        #    boolean         skipCache = false;
        #
        #    #SysModelStore
        #
        #    if (infolog.globalCache().isSet(#VCSCache, #NoPrompt))
        #    {
        #        //Do not prompt during creation of repository.
        #        _promptForFolder = false;
        #
        #        //Do not use cached filenames during Creation of repository.
        #        skipCache = true;
        #    }
        #
        #    if (_promptForFolder)
        #    {
        #        //Do not use cached filenames during Add to version control.
        #        skipCache = true;
        #    }
        #
        #    if (_controllable is SysTreeNodeVirtual)
        #    {
        #        // Do not use cached filenames for virtual nodes
        #        // Typically they have a temporary+arbitrary filename - if they have one.
        #        skipCache = true;
        #    }
        #
        #    if (skipCache == false &&
        #        filenameCache &&
        #        filenameCache.exists(_controllable.versionControlItemPath()))
        #    {
        #        return filenameCache.lookup(_controllable.versionControlItemPath());
        #    }
        #
        #    //
        #    // The SysVersionControlFile class is the default handler, and it does already contain
        #    // path information.
        #    //
        #    if (_controllable is SysVersionControlFile)
        #    {
        #        return filename;
        #    }
        #
        #    if (_currentLayer &&
        #        !strStartsWith(filename, 'labels\\')) // Label files is the AX2009 location are not stored in layer folder.
        #    {
        #        // If controllable is a SysTreeNode(treeNode) then lookup folder from the modelIdFolder map
        #        sysTreeNode = _controllable as SysTreeNode;
        #
        #        if (!sysTreeNode && _controllable is SysLabelFile)
        #        {
        #            sysLabelFile = _controllable as SysLabelFile;
        #            sysTreeNode = SysTreeNode::newTreeNode(sysLabelFile.treeNode());
        #            fileNameExclLayer = '\\'+filename;
        #        }
        #        else
        #        {
        #            fileNameExclLayer = subStr(filename,strLen(strFmt('%1', currentAOLayer()))+1, strLen(filename));
        #        }
        #
        #        if (sysTreeNode && sysTreeNode.parmTreeNode())
        #        {
        #            treeNode = sysTreeNode.parmTreeNode();
        #
        #            model = sysTreeNode.getVCSModelId();
        #
        #            if (model != #ModelId_Undefined)
        #            {
        #                modelFolder = this.getModelFolder(model);
        #            }
        #
        #            if (modelFolder)
        #            {
        #                //Resolve relative path
        #                filename = System.IO.Path::GetFullPath(strFmt(@'%1%2', modelFolder, fileNameExclLayer));
        #                filenameCache.insert(_controllable.versionControlItemPath(), filename);
        #                return filename;
        #            }
        #            else
        #            {
        #                if (_promptForFolder &&
        #                    (!additionalFolders || additionalFolders.elements() <= 1) ) //No additional folders except current layer
        #                {
        #                    warning(strFmt("@SYS340459", SysModelStore::displayName(model)));
        #                }
        #            }
        #
        #        }
        #
        #        if (additionalFolders)
        #        {
        #            //First scan on disk (fastest)
        #            folderEnumerator = additionalFolders.keySet().getEnumerator();
        #
        #            while (folderEnumerator.moveNext())
        #            {
        #                tmpFileName = folderEnumerator.current() + fileNameExclLayer;
        #                if (WinAPI::fileExists(strFmt('%1\\%2', folder, tmpFileName)))
        #                {
        #                    filename = strFmt('%1\\%2', folder, tmpFileName);
        #                    filenameCache.insert(_controllable.versionControlItemPath(), filename);
        #                    return filename;
        #                }
        #            }
        #        }
        #
        #        if (_controllable is SysTreeNodeVirtualDeleted)
        #        {
        #            // Then ask version control (slower) - Required if file has been deleted.
        #            // Query the deprecating/staging additional folders first, otherwise we might find a move to model (renamed/deleted)
        #            // file which is being or has been added.
        #            if (additionalFolders)
        #            {
        #                tmpFileName = this.findItemInFolders(additionalFolders.getEnumerator(), _controllable, fileNameExclLayer);
        #                if (tmpFileName)
        #                {
        #                    return tmpFileName;
        #                }
        #            }
        #
        #            if (modelFolders)
        #            {
        #                tmpFileName = this.findItemInFolders(modelFolders.getEnumerator(), _controllable, fileNameExclLayer, true);
        #                if (tmpFileName)
        #                {
        #                    return tmpFileName;
        #                }
        #            }
        #        }
        #
        #        if (infolog.globalCache().isSet(#VCSCache, #VSProjectDefaultFolder))
        #        {
        #            filename = infolog.globalCache().get(#VCSCache, #VSProjectDefaultFolder) + fileNameExclLayer;
        #        }
        #
        #        if (_promptForFolder)
        #        {
        #            folderset = versioncontrol.parmUserInterfaceProvider().promptForFolder(additionalFolders, false, false, _controllable);
        #
        #            // One folder is selected
        #            foldersetEnum = folderset.getEnumerator();
        #            if (foldersetEnum.moveNext())
        #            {
        #                filename = foldersetEnum.current() + fileNameExclLayer;
        #            }
        #            else
        #                throw error("@SYS70800");
        #        }
        #    }
        #
        #    return strFmt('%1\\%2', folder, filename);
        #}
      ENDSOURCE
      SOURCE #filename2ItemPath
        #/// <summary>
        #///    Returns the item path for the specified file name.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file that is used to determine the item path.
        #/// </param>
        #/// <returns>
        #///    The item path for the specified file name.
        #/// </returns>
        #/// <remarks>
        #///    The item path can contain one of the following values
        #///    <list type="bullet">
        #///       <item>
        #///          <description>A treenode path in the AOT.</description>
        #///       </item>
        #///       <item>
        #///          <description>A path for a label file.</description>
        #///       </item>
        #///       <item>
        #///          <description>A path for the version control definition file.</description>
        #///       </item>
        #///    </list>
        #/// </remarks>
        #public SysVersionControlItemPath filename2ItemPath(
        #    Filename        _filename)
        #{
        #    Filename filename = _filename;
        #    UtilEntryLevel layer;
        #    TreeNodePath path;
        #    int i;
        #    int pos = 0;
        #    int tmppos = 0;
        #    int lastSeparator = 0;
        #    str searchstr;
        #    str nodePath;
        #    str nodeParentPath;
        #    int strLength = strLen(filename);
        #    MapEnumerator enum;
        #    str vsVcsPath = strReplace(#VSProjectsVCSPath, '/', '\\');
        #    str modelFolderWithModelFilename;
        #
        #    void findPosition()
        #    {
        #        int xpoLength = strLen(#xpo);
        #
        #        while (tmppos)
        #        {
        #            // get to next path (layer or model name) of the filename.
        #            path = subStr(filename, tmppos+strLen(searchStr)-1, 2+strLength-tmppos-strLen(searchStr));
        #            path = strReplace(path, '/', '\\');
        #
        #            if (strStartsWith(path, vsVcsPath))
        #            {
        #                pos = tmppos;
        #                break;
        #            }
        #            else
        #            {
        #                nodePath = subStr(path, 1, strLen(path) - strLen(#xpo));
        #                lastSeparator = strFind(nodePath, '\\', strLen(nodePath), -strLen(nodePath));
        #                nodeParentPath = subStr(nodePath, 1, lastSeparator - 1);
        #
        #                // Deleted objects won't be found in the AOT, but their parent node will be
        #                if (TreeNode::findNode(nodePath) || (nodeParentPath && nodeParentPath != '\\' && TreeNode::findNode(nodeParentPath)))
        #                {
        #                    pos = tmppos;
        #                    break;
        #                }
        #            }
        #
        #            tmppos =  strScan(filename, searchStr, tmppos+1, strLength);
        #        }
        #    }
        #
        #    filename = strReplace(filename, '\\', '/');
        #
        #    // Try to find layer in filename
        #    for (i=0; i < enumCnt(UtilEntryLevel); i++)
        #    {
        #        layer = i;
        #        searchstr = strFmt('/%1/', layer);
        #        tmppos = strScan(filename, searchStr, 1, strLength);
        #
        #        findPosition();
        #
        #        if (pos)
        #        {
        #            break;
        #        }
        #    }
        #
        #    // If layer not found, try to find model folder paths in filename
        #    if (!pos && modelFolders)
        #    {
        #        enum = modelFolders.getEnumerator();
        #        while (enum.moveNext())
        #        {
        #            searchstr = strFmt('/%1/', enum.currentKey());
        #            searchstr = strReplace(searchstr, '\\', '/');
        #            tmppos = strScan(filename, searchStr, 1, strLength);
        #
        #            if (tmppos)
        #            {
        #                modelFolderWithModelFilename = strFmt(@'%1%2', searchstr, #ModelFileNameWithExtension);
        #                if (strEndsWith(filename, modelFolderWithModelFilename))
        #                {
        #                    pos = strScan(filename, modelFolderWithModelFilename, strLength, -strLength);
        #                    break;
        #                }
        #
        #                findPosition();
        #
        #                if (pos)
        #                {
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #
        #    // If model not found, try to find additional folder paths in filename
        #    if (!pos && additionalFolders)
        #    {
        #        enum = additionalFolders.getEnumerator();
        #        while (enum.moveNext())
        #        {
        #            searchstr = strFmt('/%1/', enum.currentKey());
        #            searchstr = strReplace(searchstr, '\\', '/');
        #            pos = strScan(filename, searchStr, 1, strLength);
        #            if (pos)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    if (pos && strScan(filename, #VSProjectsVCSPath, 1, strLen(filename)))
        #    {
        #        path = subStr(filename, pos+strLen(searchStr)-1, 2+strLength-pos-strLen(searchStr));
        #        path = SysTreeNodeVSItem::vcsPath2TreeNodePath(path);
        #        return path;
        #    }
        #
        #    // If pos is set filename either contains layer or model, additional folder path information.
        #    if (pos && strEndsWith(filename, #xpo))
        #    {
        #        //Is treenode
        #        path = subStr(filename, pos+strLen(searchStr)-1, 2+strLength-pos-strLen(searchStr)-strLen(#xpo));
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    // Is model.xml file
        #    if (pos && strEndsWith(filename, #ModelFileNameWithExtension))
        #    {
        #        // e:\repository\TestModel\Model.xml becomes \TestModel\Model
        #        path = subStr(filename, pos, 1+strLength-pos-strLen(#xml));
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    // Is it a label file?
        #    if (strEndsWith(filename, #ALD)) //ends with '.ald'
        #    {
        #        path = System.IO.Path::GetFileName(filename);
        #        path = #LabelsPath+path;
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    // Last try to find definition path in filename.
        #    pos = strScan(filename, #DefDepotPath, 1, strLength);
        #    if (pos)
        #    {
        #        //Is Definition file
        #        path = subStr(filename, pos, 2+strLength-pos);
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    return filename;
        #}
      ENDSOURCE
      SOURCE #findItemInFolders
        #private Filename findItemInFolders(MapEnumerator _folderEnumerator, SysVersionControllable _controllable, Filename _fileNameExclLayer, boolean _currentLayerOnly = false)
        #{
        #    SysVersionControlFile tmpControllableFile = SysVersionControlFile::construct();
        #    SysVersionControlTmpItem tmpItem;
        #    Filename tmpFileName;
        #    FilePath folderPath;
        #    int  infologLines = infologLine();
        #
        #    while (_folderEnumerator.moveNext())
        #    {
        #        folderPath = _folderEnumerator.current();
        #        if (_currentLayerOnly && !this.isModelFolderForCurrentLayer(folderPath))
        #        {
        #            continue;
        #        }
        #        tmpFileName = folderPath + _fileNameExclLayer;
        #        tmpItem.ItemPath = _controllable.versionControlItemPath();
        #        tmpItem.InternalFilename = strFmt('%1\\%2', folder, tmpFileName);
        #        tmpItem.Version = 0;
        #        tmpControllableFile.parmVCSItem(tmpItem);
        #        if (this.getItemVersion(tmpControllableFile, tmpItem))
        #        {
        #            infolog.clear(infologLines);
        #            return strFmt('%1\\%2', folder, tmpFileName);
        #        }
        #    }
        #    infolog.clear(infologLines);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getActionText
        #/// <summary>
        #/// Gets the action text for the controllable item.
        #/// </summary>
        #/// <param name="controllable">
        #/// The instance of the controllable.
        #/// </param>
        #/// <returns>
        #/// The value from the <c>SysVersionControlItemStatus</c> value that represents the checked-out action
        #/// of the controllable item.
        #/// </returns>
        #public SysVersionControlItemStatus getActionText(SysVersionControllable controllable)
        #{
        #    Filename filename = this.fileName(controllable);
        #    str actionText;
        #    actionText = this.parmBackend().actionTextForCheckedOutFile(filename);
        #
        #    if (actionText == "")
        #    {
        #        return SysVersionControlItemStatus::Uncontrolled;
        #    }
        #
        #    switch (actionText)
        #    {
        #        case backend.actionText(SysVersionControlSystemFileAction::Edit):
        #        case backend.actionText(SysVersionControlSystemFileAction::Branch):
        #        case backend.actionText(SysVersionControlSystemFileAction::Rename):
        #            return SysVersionControlItemStatus::Edit;
        #        case backend.actionText(SysVersionControlSystemFileAction::Delete):
        #            return SysVersionControlItemStatus::Delete;
        #        case backend.actionText(SysVersionControlSystemFileAction::Add):
        #            return SysVersionControlItemStatus::Add;
        #        default:
        #            return SysVersionControlItemStatus::Uncontrolled;
        #    }
        #}
      ENDSOURCE
      SOURCE #getChangeLists
        #public SysVersionControlPendingChangeList getChangeLists()
        #{
        #    SysVersionControlPendingChangeList list;
        #
        #    if (backend.supportPendingChangeLists())
        #    {
        #        return backend.changeListsPending();
        #    }
        #
        #    return list;
        #}
      ENDSOURCE
      SOURCE #getChangeNumberContents
        #/// <summary>
        #/// Gets a collection of objects that are included in a specific changelist.
        #/// </summary>
        #/// <param name="_changeNumber">
        #/// The changelist from which to retrieve the information.
        #/// </param>
        #/// <param name="_changeDateTime">
        #/// The time and date when the change was submitted.
        #/// </param>
        #/// <param name="_changeComments">
        #/// The comments that are associated with the change.
        #/// </param>
        #/// <returns>
        #/// A <c>SysVersionControlTmpItem</c> table that contains a record for each change in the changelist.
        #/// </returns>
        #public SysVersionControlTmpItem getChangeNumberContents(SysVersionControlChangeNumber _changeNumber, utcdatetime _changeDateTime, SysVersionControlItemComment _changeComments)
        #{
        #    SysVersionControlTmpItem item;
        #
        #    if (backend.supportSubmittedChangeLists())
        #    {
        #        item = backend.changeListContents(_changeNumber);
        #
        #        this.updateItemsPath(item);
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getChangesHistory
        #public SysVersionControlTmpChange getChangesHistory()
        #{
        #    SysVersionControlTmpChange item;
        #
        #    if (backend.supportSubmittedChangeLists())
        #    {
        #        return backend.folderChanges(folder);
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #public SysVersionControlTmpItem getCheckedOutItems()
        #{
        #    return this.getPendingChangeListContents('');
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #public SysVersionControlTmpItem getItemHistory(SysVersionControllable _controllable)
        #{
        #    SysVersionControlTmpItem item;
        #
        #    SysTreeNodeContainer nodeContainer;
        #    SysVersionControlBackendDirSupport backendWithDirSupport = backend as SysVersionControlBackendDirSupport;
        #
        #    nodeContainer = _controllable as SysTreeNodeContainer;
        #
        #    if (nodeContainer != null)
        #    {
        #        if (backendWithDirSupport)
        #        {
        #            item = backendWithDirSupport.directoryHistory(this.fileName(_controllable, true));
        #        }
        #        else
        #        {
        #            error("@SYS334841");
        #        }
        #    }
        #    else
        #    {
        #        item = backend.fileHistory(this.fileName(_controllable, true));
        #    }
        #
        #    while select forupdate item
        #    {
        #        item.ItemPath = _controllable.versionControlItemPath();
        #        item.update();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getItemVersion
        #public Filename getItemVersion(SysVersionControllable _controllable, SysVersionControlTmpItem _item)
        #{
        #    SysTreeNodeContainer nodeContainer = _controllable as SysTreeNodeContainer;
        #    SysVersionControlBackendDirSupport backendWithDirSupport = backend as SysVersionControlBackendDirSupport;
        #    FilePath directoryPath;
        #
        #
        #    if (!_item.ItemPath)
        #    {
        #        _item.ItemPath = _controllable.versionControlItemPath();
        #    }
        #
        #    if (nodeContainer != null)
        #    {
        #        if (backendWithDirSupport)
        #        {
        #            directoryPath = backendWithDirSupport.directoryGetVersion(_item.InternalFilename, _item);
        #            return nodeContainer.getImportItemFilePath(directoryPath);
        #        }
        #        else
        #        {
        #            error("@SYS334842");
        #            return "";
        #        }
        #    }
        #    else
        #    {
        #        return backend.fileGetVersion(_item.InternalFilename, _item);
        #    }
        #}
      ENDSOURCE
      SOURCE #getPendingChangeListContents
        #public SysVersionControlTmpItem getPendingChangeListContents(str _changeList, boolean _silent = false)
        #{
        #    SysVersionControlTmpItem item;
        #
        #    // _changeList can either be empty string, which means default change list
        #    // or change list id if backend supports pending change lists
        #    item = backend.filesPending(_changeList, folder);
        #
        #    this.updateItemsPath(item, true);
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #ideIntegration
        #public boolean ideIntegration()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #importLocalItems
        #public void importLocalItems(SysVersionControlTmpItem _pendingItems)
        #{
        #    Filename    filename;
        #    Filename    depotFile;
        #    SysVersionControlItemPath itemPath;
        #    int i = 0;
        #    SysVersionControlSynchronizeCommand command;
        #    SysVersionControlSynchronizeBatchNum batchNum = SysVersionControlSynchronizeLog::nextBatchNum();
        #
        #    while select _pendingItems
        #    {
        #        filename = this.localFileName(_pendingItems);
        #        switch (backend.actionTextForCheckedOutFile(filename))
        #        {
        #            case backend.actionText(SysVersionControlSystemFileAction::Add):
        #            case backend.actionText(SysVersionControlSystemFileAction::Branch):
        #                command = SysVersionControlSynchronizeCommand::Add;
        #                break;
        #
        #            case backend.actionText(SysVersionControlSystemFileAction::Edit):
        #                command = SysVersionControlSynchronizeCommand::Update;
        #                break;
        #
        #            case backend.actionText(SysVersionControlSystemFileAction::Delete):
        #                command = SysVersionControlSynchronizeCommand::Delete;
        #                break;
        #
        #            default:
        #                //In case the command is something else
        #                //skip the file
        #                continue;
        #        }
        #        depotFile = strReplace(_pendingItems.InternalFilename, '/', '\\');
        #        itemPath = this.filename2ItemPath(depotFile);
        #        if (filename)
        #        {
        #            SysVersionControlSynchronizeLog::createLogEntry(
        #                filename,
        #                SysVersionControlTmpItem::newControllable(itemPath, filename),
        #                command,
        #                batchNum,
        #                folder);
        #            i++;
        #        }
        #    }
        #    if (i)
        #    {
        #        //
        #        // Something to update
        #        //
        #        SysVersionControlSynchronizeLog::processBatchNum(batchNum);
        #    }
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init(SysVersionControlParameters _parameters)
        #{
        #    boolean ret = super(_parameters);
        #
        #    if (ret)
        #    {
        #        switch (backend.init(_parameters))
        #        {
        #            case SysVersionControlSystemStatus::NotConnected:
        #                return false;
        #
        #            case SysVersionControlSystemStatus::Connected:
        #                return true;
        #
        #            case SysVersionControlSystemStatus::WorkingOffline:
        #                offline = true;
        #                return true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #protected void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #    super(_topNode);
        #
        #    backend.interpretXMLPluginParameters(_topNode);
        #}
      ENDSOURCE
      SOURCE #isModelFolderForCurrentLayer
        #protected boolean isModelFolderForCurrentLayer(FilePath _modelFolder)
        #{
        #    Filename                        modelFilePath;
        #    ModelId                         modelId;
        #    SysModel                        sysModel;
        #
        #    modelFilePath = strFmt(@'%1\%2\', this.parmFolder(), _modelFolder);
        #
        #    modelId = this.getModelFromFile(modelFilePath);
        #
        #    if (!modelId)
        #    {
        #        // Unable to retrieve model and layer information. Assume it is relevant to current layer.
        #        return true;
        #    }
        #
        #    select firstonly Layer from sysModel
        #        where sysModel.RecId == modelId;
        #
        #    return (sysModel.Layer == currentAOLayer());
        #}
      ENDSOURCE
      SOURCE #isTmpItemOpenedForDelete
        #/// <summary>
        #/// Checks whether a version control object is opened for delete.
        #/// </summary>
        #/// <param name="_sysVersionControlTmpItem">
        #/// A temporary <c>SysVersionControlTmpItem</c> buffer to check.
        #/// </param>
        #/// <returns>
        #/// true if the version control object is opened for delete; otherwise, false.
        #/// </returns>
        #public boolean isTmpItemOpenedForDelete(SysVersionControlTmpItem _sysVersionControlTmpItem)
        #{
        #    return _sysVersionControlTmpItem.ActionText == backend.actionText(SysVersionControlSystemFileAction::Delete);
        #}
      ENDSOURCE
      SOURCE #localFileName
        #public Filename localFileName(SysVersionControlTmpItem _item)
        #{
        #    Filename  depotFile;
        #    Filename  filename;
        #    Filename  filePath;
        #    SysVersionControlItemPath itemPath;
        #    int pos = 0;
        #    int len;
        #
        #    //
        #    // Strategy 1: Determine item path, and create file name from it
        #    //             This works well for all AX artifacts
        #    //
        #
        #    depotFile = strReplace(_item.InternalFilename, '/', '\\');
        #    len = strLen(depotFile);
        #    itemPath = this.filename2ItemPath(depotFile);
        #    filePath = SysTreeNode::treeNodePath2FilePath(itemPath);
        #    pos = strScan(depotFile, filePath, len, -len);
        #    if(pos)
        #    {
        #        pos = strScan(depotFile,'\\',pos-1,-len);
        #        if(pos)
        #        {
        #            return folder + subStr(depotFile, pos, len);
        #        }
        #    }
        #
        #    //
        #    // Strategy 2: Determine the overlap between filename and internalfilename, and create file name from it
        #    //             This works well for non AX artifacts
        #    //
        #
        #    filename = strReplace(_item.Filename, '/', '\\');
        #    pos = 1;
        #    len = strLen(_item.Filename);
        #    while (pos <= len &&
        #           strEndsWith(depotFile, subStr(filename, len, -pos)))
        #    {
        #        pos++;
        #    }
        #    return SysVersionControlParameters::getTargetRepositoryFolderPath() + subStr(filename, len, 1-pos);
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    filenameCache = new Map(Types::String, Types::String);
        #    super();
        #}
      ENDSOURCE
      SOURCE #parmBackend
        #public SysVersionControlFilebasedBackEnd parmBackend(SysVersionControlFilebasedBackEnd _backend = backend)
        #{
        #    backend = _backend;
        #
        #    return backend;
        #}
        #
      ENDSOURCE
      SOURCE #parmProject
        #public SysVersionControlProject parmProject(SysVersionControlProject _project = project)
        #{
        #    SysVersionControlProject ret;
        #
        #    if (offline && prmisDefault(_project))
        #    {
        #        ret = strFmt("@SYS88189", super(_project));
        #    }
        #    else
        #    {
        #        ret = super(_project);
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reviewChangeList
        #public void reviewChangeList(
        #    SysVersionControlTmpItem     _items,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave                 _fileName)
        #{
        #    boolean errorsFound = false;
        #    SysVersionControllable controllable;
        #    Set setoffiles = new Set(Types::String);
        #    Filename itemFilename;
        #
        #    if (backend.supportReviews())
        #    {
        #        while select _items
        #        {
        #            if (_items.ActionText != backend.actionText(SysVersionControlSystemFileAction::Branch) &&
        #                _items.ActionText != backend.actionText(SysVersionControlSystemFileAction::Delete))
        #            {
        #                controllable = _items.getControllable();
        #                if (controllable)
        #                {
        #                    itemFilename = this.fileName(controllable);
        #                    setoffiles.add(itemFilename);
        #                    if (!controllable.toFile(this.fileName(controllable), false))
        #                    {
        #                        errorsFound = true;
        #                        break;
        #                    }
        #                }
        #            }
        #        }
        #        if (!errorsFound)
        #        {
        #            backend.reviewFileSet(setoffiles, _comment, _fileName, folder);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    if (backend.supportReviews())
        #    {
        #        return backend.reviewFilenameLookupFilter();
        #    }
        #    return conNull();
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #    backend.showInfo();
        #}
      ENDSOURCE
      SOURCE #showStatusLine
        #public boolean showStatusLine()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #public boolean supportChangeVersion()
        #{
        #    return backend.supportChangeVersion();
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #public boolean supportCheckInWizard()
        #{
        #    return backend.supportCheckInWizard();
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #public boolean supportMultipleCheckout()
        #{
        #    return backend.supportMultipleCheckout();
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #public boolean supportPendingChangeLists()
        #{
        #    return backend.supportPendingChangeLists();
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #public boolean supportReviews()
        #{
        #    return backend.supportReviews();
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #public boolean supportSubmittedChangeLists()
        #{
        #    return backend.supportSubmittedChangeLists();
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return backend.supportSyncDeleteLocalFiles();
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #public boolean supportSyncLabel()
        #{
        #    return backend.supportSyncLabel();
        #}
      ENDSOURCE
      SOURCE #updateItemsPath
        #protected void updateItemsPath(SysVersionControlTmpItem _item, boolean _setFileName = false)
        #{
        #    ImageListAppl imageList;
        #
        #    if (hasGUI())
        #    {
        #        imageList = new ImageListAppl_Aot();
        #    }
        #
        #    while select forupdate _item
        #    {
        #        _item.ItemPath = this.filename2ItemPath(_item.InternalFilename);
        #        if (imageList)
        #        {
        #            _item.ImageRes = imageList.image(SysVersionControlSystem::path2Image(_item.ItemPath));
        #        }
        #
        #        //update file name (for Tfs backend it is by design file name is empty for supporting compare functionality)
        #        if (_setFileName && _item.Filename == '')
        #        {
        #            _item.Filename = _item.InternalFilename;
        #            _item.Filename = this.localFileName(_item);
        #        }
        #
        #        _item.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #validateMultipleModels
        #/// <summary>
        #/// Validates that the <c>SysVersionControlLabel</c> class has references to multiple models in the
        #/// current layer.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The value of the <paramref name="_controllable" /> parameter.
        #/// </param>
        #/// <returns>
        #/// true if the controllable has one reference to a model or is not a root tree node; otherwise, false.
        #/// </returns>
        #protected boolean validateMultipleModels(SysVersionControllable _controllable)
        #{
        #    SysTreeNode sysTreeNode = _controllable as SysTreeNode;
        #    TreeNode treeNode;
        #
        #    // check for unsupported multiple models on same element in same layer
        #    if (sysTreeNode && sysTreeNode.parmTreeNode())
        #    {
        #        treeNode = sysTreeNode.parmTreeNode();
        #
        #        if (treeNode.treeNodeType().isRootElement() &&
        #            treeNode.treeNodeType().isUtilElement() &&
        #            SysVersionControlSystemFileBased::hasMultipleModelsOnRoot(treeNode.utilIdElement().Name, treeNode.utilIdElement().RecordType))
        #        {
        #            return false;
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains a valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains a valid owner prefix; otherwise, false.
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    return this.parmBackend().verifyOwnerPrefix(elementName);
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized <c>SysVersionControlWorkItemProvider</c> object.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return backend.workItemProvider();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlSystemFileBased construct()
        #{
        #    return new SysVersionControlSystemFileBased();
        #}
        #
      ENDSOURCE
      SOURCE #hasMultipleModelsOnRoot
        #private static server boolean hasMultipleModelsOnRoot(IdentifierName _name, UtilElementType _type, UtilEntryLevel _layer = currentAOLayer())
        #{
        #    SysModelElement     rootElement;
        #    SysModelElement     subElement;
        #    SysModelElementData elementData;
        #    SysModelLayer       elementLayer;
        #    int counter = 0;
        #
        #    // While select is needed as no distinct available in X++.
        #    while select ModelId from elementData group by elementData.ModelId
        #        join RecId from elementLayer
        #            where elementLayer.RecId == elementData.Layer
        #               && elementLayer.Layer == _layer
        #        join RecId from subElement
        #            where subElement.RecId == elementData.ModelElement
        #               && (subElement.ElementType != UtilElementType::ClassInternalHeader && subElement.ElementType != UtilElementType::TableInternalHeader)
        #        join RecId from rootElement
        #            where rootElement.RecId == subElement.RootModelElement
        #               && rootElement.Name == _name
        #               && rootElement.ElementType == _type
        #    {
        #        counter++;
        #
        #        if (counter > 1)
        #        {
        #            break;
        #        }
        #    }
        #
        #    return counter > 1;
        #}
      ENDSOURCE
      SOURCE #newBackEnd
        #public static SysVersionControlSystemFileBased newBackEnd(SysVersionControlFilebasedBackEnd _backend)
        #{
        #    SysVersionControlSystemFileBased sysVersionControlSystemFileBased = SysVersionControlSystemFileBased::construct();
        #
        #    sysVersionControlSystemFileBased.parmBackend(_backend);
        #    return sysVersionControlSystemFileBased;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSystemMorphX unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSystemMorphX
    PROPERTIES
      Name                #SysVersionControlSystemMorphX
      Extends             #SysVersionControlSystem
      RunOn               #Client
      Origin              #{2D1D3861-0000-1000-2143-2F271A7F4E6F}
      LegacyId            #14433
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowCheckOut
        #public boolean allowCheckOut(SysVersionControllable _controllable, boolean _checkMultipleCheckout = true)
        #{
        #    boolean ret = true; //Don't call super as it will validate that sync is ok
        #    SysVersionControlItemPath itemPath;
        #
        #    if (_checkMultipleCheckout &&
        #        _controllable.allowMultipleCheckout(settings) &&
        #        _controllable is SysLabelFile) //Only allow multiple checkout of label files
        #    {
        #        ret = true;
        #    }
        #    else
        #    {
        #        //
        #        // Allow check-out if the item is added to version control AND it is not locked by anyone
        #        //
        #        itemPath = this.itemPath(_controllable);
        #        ret = SysVersionControlMorphXItemTable::find(itemPath) &&
        #            !SysVersionControlMorphXLockTable::existsForAnyUser(itemPath);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControllable _controllable)
        #{
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().allowCreate();
        #    }
        #
        #    //
        #    // Allow create if the item has not been added before AND the item's name/type is accepted.
        #    //
        #    return !SysVersionControlMorphXItemTable::exists(this.itemPath(_controllable)) && _controllable.allowCreate(settings);
        #}
      ENDSOURCE
      SOURCE #allowDelete
        #public boolean allowDelete(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    SysTreeNodeContainer treeNodeContainer;
        #
        #    if (_justInTime)
        #    {
        #        treeNodeContainer = _controllable as SysTreeNodeContainer;
        #        if (treeNodeContainer != null)
        #        {
        #            return treeNodeContainer.parmTreeNodeContainerDispatcher().allowDelete();
        #        }
        #
        #        //
        #        // Only allow delete of checked in objects
        #        //
        #        if (this.allowCheckOut(_controllable, false))
        #        {
        #            return true;
        #        }
        #        else
        #        {
        #            //object is checked out already
        #            error(strfmt("@SYS99176", this.item(_controllable).checkedOutTo()));
        #        }
        #        return false;
        #    }
        #
        #    //
        #    // To speed up navigating the AOT, allow delete is checked when a delete is performed
        #    // and not when context menus, property sheets etc. are displayed.
        #    //
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowEdit
        #public boolean allowEdit(SysVersionControllable _controllable)
        #{
        #    Filename filenameObjectLayer  = this.fileName(_controllable, false);
        #    Filename filenameCurrentLayer = this.fileName(_controllable, true);
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().allowEdit();
        #    }
        #
        #    //Exists in current layer
        #    if (filenameObjectLayer == filenameCurrentLayer)
        #    {
        #        //Has the item never been checked in
        #        if (!this.item(_controllable))
        #            return true;
        #
        #        //Has the item been checked out
        #        if (SysVersionControlMorphXLockTable::exists(this.itemPath(_controllable)))
        #            return true;
        #    }
        #    else
        #    {
        #        //Has the item ever been checked in
        #        if (this.item(_controllable))
        #        {
        #            //Has the item been checked out
        #            if (SysVersionControlMorphXLockTable::exists(this.itemPath(_controllable)))
        #                return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowMoveToModel
        #/// <summary>
        #/// Indicates whether the <c>SysVersionControllable</c> interface is enabled to be moved to a model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface.
        #/// </param>
        #/// <param name="_modelId">
        #/// The ID of the model.
        #/// </param>
        #/// <returns>
        #/// true if the move is enabled; otherwise, false.
        #/// </returns>
        #public boolean allowMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowRename
        #public boolean allowRename(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    if (_justInTime)
        #    {
        #        //
        #        // Only allow rename of new and checked in objects
        #        //
        #        if (this.allowCreate(_controllable))
        #            return true;
        #
        #        if (this.allowCheckOut(_controllable, false))
        #            return true;
        #
        #        //object is checked out already
        #        error(strfmt("@SYS99148", this.item(_controllable).checkedOutTo()));
        #        return false;
        #    }
        #
        #    //
        #    // To speed up navigating the AOT, allow rename is only checked when a rename is performed
        #    // and not when context menus, propertysheets etc. are displayed.
        #    //
        #    return true;
        #}
      ENDSOURCE
      SOURCE #applyGlobalSettings
        #/// <summary>
        #/// Applies the definition file to the version control system.
        #/// </summary>
        #/// <returns>
        #/// true if the definition file is applied successfully; otherwise, false.
        #/// </returns>
        #public boolean applyGlobalSettings()
        #{
        #    resourceNode resourceNode = TreeNode::findNode(#DefFileTreenodePath);
        #    XmlDocument  xmlDocument;
        #    XML xml;
        #    XmlElement topNode;
        #    int line = infologLine();
        #
        #    if (!resourceNode)
        #    {
        #        warning(strfmt("@SYS28152", #DefFileTreenodePath));
        #        return false;
        #    }
        #
        #    if(this.getLatestDefFile())
        #    {
        #        try
        #        {
        #            [xml] = SysResource::getResourceNodeData(resourceNode);
        #            xmlDocument = XmlDocument::newXml(xml);
        #            topNode = xmlDocument.documentElement();
        #            this.interpretXMLParameters(topNode);
        #        }
        #        catch
        #        {
        #            warning(strfmt("@SYS119114", #DefFileTreenodePath));
        #            return false;
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInChangelist
        #//AOSRunMode::Client
        #public void checkInChangelist(
        #    SysVersionControlTmpItem _items,
        #    SysVersionControlItemComment _comment = '',
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    boolean errorsFound = false;
        #    SysVersionControllable controllable;
        #    Filename filename;
        #    int infologLine;
        #    #WinApi
        #
        #    setprefix("@SYS85680");
        #
        #    if (this.promptCheckin(_items))
        #    {
        #        this.runTestProject();
        #        infologLine = infologLine();
        #        while select _items
        #        {
        #            controllable = _items.getControllable();
        #
        #            if (controllable)
        #            {
        #                setprefix(controllable.versionControlItemPath());
        #
        #                if (_items.ActionText != #MorphXActionDelete &&
        #                    !this.allowEdit(controllable))
        #                {
        #                    error(strfmt("@SYS85683", _items.ItemPath));
        #                    errorsFound = true;
        #                }
        #                else
        #                {
        #                    if (!this.allowCheckIn(controllable))
        #                    {
        #                        error(strfmt("@SYS85684", _items.ItemPath));
        #                        errorsFound = true;
        #                    }
        #                }
        #            }
        #        }
        #
        #        //
        #        // See if any allowCheckIn calls reported problems
        #        //
        #        if (!errorsFound &&
        #            infologLine != infologLine())
        #        {
        #            if (Box::yesNo(strfmt("@SYS329679", "@SYS70440"), DialogButton::No) == DialogButton::No)
        #            {
        #                errorsFound = true;
        #            }
        #        }
        #
        #        if (!errorsFound)
        #        {
        #            ttsbegin;
        #            while select _items
        #            {
        #                controllable = _items.getControllable();
        #                if (controllable)
        #                {
        #                    if (_items.ActionText == #MorphXActionDelete)
        #                    {
        #                        //Do not export a deleted element
        #                        this.item(controllable).checkIn(_comment);
        #                    }
        #                    else
        #                    {
        #                        filename = this.fileName(controllable);
        #                        if (controllable.toFile(filename, false))
        #                        {
        #                            this.item(controllable).checkIn(_comment, filename);
        #                        }
        #                        else
        #                        {
        #                            throw error("@SYS90486");
        #                        }
        #                    }
        #                }
        #            }
        #            ttscommit;
        #        }
        #
        #        if (errorsFound)
        #        {
        #            throw error("@SYS90486");
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlSystemMorphX extends SysVersionControlSystem
        #implements SysVersionControlChangeLists
        #{
        #    #define.DefFileTreenodePath('\\Resources\\SysVersionControlSystemMorphXDefFile')
        #}
      ENDSOURCE
      SOURCE #commandAdd
        #public boolean commandAdd(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().create();
        #    }
        #
        #    if (this.allowCreate(_controllable))
        #    {
        #        SysVersionControlMorphXItemTable::addToVersionControl(this.itemPath(_controllable));
        #    }
        #    else
        #    {
        #        warning(strfmt("@SYS85687", this.itemPath(_controllable), this.item(_controllable).checkedOutTo()));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandCheckIn
        #public void commandCheckIn(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename filename;
        #    SysVersionControlMorphXItemTable item;
        #
        #    if (!this.allowEdit(_controllable))
        #        throw error(strfmt("@SYS85683", this.itemPath(_controllable)));
        #
        #    this.runTestProject();
        #
        #    if (!this.allowCheckIn(_controllable))
        #        throw error(strfmt("@SYS85684", this.itemPath(_controllable)));
        #
        #    filename = this.fileName(_controllable);
        #
        #    if (_controllable.toFile(filename, false))
        #    {
        #        item = this.item(_controllable);
        #
        #        if (!item)
        #            throw error(strfmt("@SYS135999", this.itemPath(_controllable)));
        #
        #        item.checkIn(_comment, filename);
        #    }
        #}
      ENDSOURCE
      SOURCE #commandCheckOut
        #public boolean commandCheckOut(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    boolean ret;
        #    userId checkedOutTo;
        #    SysVersionControlMorphXItemTable item;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().checkOut();
        #    }
        #
        #
        #    item = this.item(_controllable);
        #
        #    if (!item)
        #        throw error(strfmt("@SYS135999", this.itemPath(_controllable)));
        #
        #    if (this.allowCheckOut(_controllable))
        #    {
        #        item.checkOut();
        #        _controllable.onCheckOut();
        #        ret = true;
        #    }
        #    else
        #    {
        #        //
        #        // It is checked-out to someone else. Add info action to enable claiming the lock.
        #        //
        #        checkedOutTo = this.item(_controllable).checkedOutTo();
        #        warning(strfmt("@SYS85687", this.itemPath(_controllable), checkedOutTo),
        #                '',
        #                SysVersionControlMorphXClaimLock::newUserIdItemPath(checkedOutTo, this.itemPath(_controllable)));
        #
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #commandDelete
        #public boolean commandDelete(SysVersionControllable _controllable)
        #{
        #    SysVersionControlMorphXItemTable item;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().delete();
        #    }
        #
        #
        #    item = this.item(_controllable);
        #
        #    if (!item)
        #        throw error(strfmt("@SYS135999", this.itemPath(_controllable)));
        #
        #    if (this.allowCheckOut(_controllable))
        #    {
        #        item.checkOutForDelete();
        #
        #        //
        #        // Delete the file if it exists.
        #        //
        #        WinAPI::deleteFile(this.fileName(_controllable));
        #
        #        return true;
        #    }
        #    warning(strfmt("@SYS85687", this.itemPath(_controllable), this.item(_controllable).checkedOutTo()));
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandMoveToModel
        #/// <summary>
        #/// Moves the <c>SysVersionControllable</c> interface to the model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface to move.
        #/// </param>
        #/// <param name="_modelId">
        #/// The model to which the <c>SysVersionControllable</c> interface is moved.
        #/// </param>
        #/// <returns>
        #/// true if the move was successful; otherwise, false.
        #/// </returns>
        #public boolean commandMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandOnAfterRename
        #/// <summary>
        #/// Starts a VCS rename on an AOT item.
        #/// </summary>
        #/// <param name="oldControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the old node.
        #/// </param>
        #/// <param name="newControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the new renamed node.
        #/// </param>
        #/// <returns>
        #/// true if the rename is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called when the tree node and the corresponding file have been already renamed.
        #/// </remarks>
        #public boolean commandOnAfterRename(SysVersionControllable oldControllable, SysVersionControllable newControllable)
        #{
        #    SysVersionControlItemPath oldPath = this.itemPath(oldControllable);
        #    SysVersionControlItemPath newPath;
        #    SysVersionControlMorphXItemTable item = this.item(oldControllable);
        #
        #    if (!item)
        #        throw error(strfmt("@SYS135999", this.itemPath(oldControllable)));
        #
        #    if (this.allowRename(oldControllable, true))
        #    {
        #        newPath = this.itemPath(newControllable);
        #
        #        item.rename(newPath);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandRename
        #public boolean commandRename(SysVersionControllable _controllable, identifierName _newName)
        #{
        #    SysVersionControlItemPath oldPath = this.itemPath(_controllable);
        #    SysVersionControlItemPath newPath;
        #    SysVersionControlMorphXItemTable item = this.item(_controllable);
        #
        #    if (!item)
        #        throw error(strfmt("@SYS135999", this.itemPath(_controllable)));
        #
        #    if (this.allowRename(_controllable, true))
        #    {
        #        newPath = SysTreeNode::pathParent(oldPath)+'\\'+_newName;
        #
        #        item.rename(newPath);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandSave
        #public boolean commandSave(SysVersionControllable _controllable)
        #{
        #    //
        #    // Don't export to disk on compile
        #    //
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSynchronize
        #public boolean commandSynchronize(
        #    SysVersionControllable       _controllable,
        #    SysVersionControlSyncParameters _syncParm
        #    )
        #{
        #    //
        #    // Sync is only supported when getting history items.
        #    //
        #    Filename filename;
        #    SysVersionControlTmpItem item;
        #    SysTreeNode sysTreeNode;
        #    SysVersionControlMorphXRevisionTable revision;
        #    userId checkedOutTo;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        if (treeNodeContainer.parmTreeNodeContainerDispatcher().supportsSynchronize())
        #        {
        #            return treeNodeContainer.parmTreeNodeContainerDispatcher().synchronize(_syncParm);
        #        }
        #    }
        #
        #    if (!_controllable)
        #    {
        #        throw error("@SYS112528");
        #    }
        #
        #    sysTreeNode = _controllable as SysTreeNode;
        #    if (sysTreeNode &&
        #        sysTreeNode.parmTreeNode() &&
        #        sysTreeNode.parmTreeNode().treeNodePath() == TreeNode::rootNode().treeNodePath())
        #    {
        #        throw error("@SYS112528");
        #    }
        #
        #    // a version is requested from the history form
        #    item.ItemPath = this.itemPath(_controllable);
        #
        #    if (!_syncParm.parmVersion()) //latest version requested
        #    {
        #        item.Version = SysVersionControlMorphXRevisionTable::latestVersionNumber(item.ItemPath);
        #        item.vcsDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
        #        item.vcsTime = DateTimeUtil::time(DateTimeUtil::getSystemDateTime());
        #
        #        // Checked-out by someone else
        #        if (SysVersionControlMorphXLockTable::existsForAnyUser(item.ItemPath) &&
        #            !SysVersionControlMorphXLockTable::exists(item.ItemPath))
        #        {
        #            checkedOutTo = this.item(_controllable).checkedOutTo();
        #            warning(strfmt("@SYS85687", item.ItemPath, checkedOutTo),
        #                    '',
        #                    SysVersionControlMorphXClaimLock::newUserIdItemPath(checkedOutTo, item.ItemPath));
        #            return false;
        #        }
        #
        #    }
        #    else
        #    {
        #        item.Version = _syncParm.parmVersion();
        #
        #        if(_syncParm.parmDateTime())
        #        {
        #            item.vcsTime = DateTimeUtil::time(_syncParm.parmDateTime());
        #            item.vcsDate = DateTimeUtil::date(_syncParm.parmDateTime());
        #        }
        #
        #        // To allow changing the current version to a previous version the element is checked-out.
        #        if (!this.allowEdit(_controllable))
        #        {
        #            if (!this.commandCheckOut(_controllable))
        #            {
        #                return false;
        #            }
        #        }
        #    }
        #
        #    revision = SysVersionControlMorphXRevisionTable::find(item.ItemPath, item.Version);
        #
        #    switch (revision.Action)
        #    {
        #        // The user has sync'ed a previos revision of a deleted element,
        #        // and is not undo-ing the check-out (caused by the sync)
        #        // As the head revsion is a delete, the AOT node must be deleted.
        #        case #MorphXActionDelete:
        #            _controllable.delete();
        #            info(strfmt("@SYS30588", item.ItemPath));
        #            break;
        #
        #        default:
        #            filename = this.getItemVersion(_controllable, item);
        #            _controllable.fromFile(filename);
        #            info(strfmt("@SYS85990", item.Version, item.ItemPath));
        #            break;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSynchronizeAndCheckout
        #public boolean commandSynchronizeAndCheckout(SysVersionControllable _controllable)
        #{
        #    return this.commandCheckOut(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandUndoCheckOut
        #public boolean commandUndoCheckOut(
        #    SysVersionControllable                  _controllable,
        #    boolean                                 _showDialog = true,
        #    SysVersionControlSynchronizeBatchNum    _batchNum = 0
        #)
        #{
        #    #AOT
        #    boolean isProjectNode;
        #    SysVersionControlActionText  action;
        #    DialogButton                 button = infolog.globalCache().get(classstr(SysVersionControlSystem), #VCUndoCheckOutButton, DialogButton::No);
        #    boolean                      canImportOk = false;
        #    SysVersionControlTmpItem     vcsItem;
        #    Filename                     filename;
        #    SysVersionControlMorphXItemTable item;
        #    SysVersionControlSyncParameters syncParm;
        #    TreeNode                        treeNode;
        #    SysTreeNode                     sysTreeNode;
        #    SysTreeNodeVirtualDeleted       sysTreeNodeVirtualDeleted;
        #    #WinApi
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().undoCheckOut(_showDialog);
        #    }
        #
        #    if (_showDialog && this.parmWarnWhenReverting())
        #    {
        #        if (button != DialogButton::YesToAll)
        #            button = versioncontrol.parmUserInterfaceProvider().promptWhenReverting(strfmt("@SYS111302",'\n\n'+this.itemPath(_controllable))+'\n\n'+"@SYS111301"+'\n'+"@SYS73804", DialogButton::No, "@SYS85686", true /*modal*/);
        #    }
        #    else
        #    {
        #        button = DialogButton::Yes;
        #    }
        #
        #    switch (button)
        #    {
        #        case DialogButton::Cancel:
        #            throw error("@SYS70800");
        #
        #        case DialogButton::YesToAll:
        #            infolog.globalCache().set(classstr(SysVersionControlSystem), #VCUndoCheckOutButton, DialogButton::YesToAll);
        #            //Fallthrough
        #
        #        case DialogButton::Yes:
        #            item = this.item(_controllable);
        #
        #            if (!item)
        #                throw error(strfmt("@SYS135999", this.itemPath(_controllable)));
        #
        #            action = item.actionTextForCheckedOutItem();
        #
        #            ttsbegin;
        #            this.item(_controllable).undoCheckOut();
        #            switch (action)
        #            {
        #                case #MorphXActionAdd:
        #                    SysVersionControlMorphXItemTable::removeFromVersionControl(this.itemPath(_controllable));
        #                    break;
        #
        #                case #MorphXActionDelete:
        #                    // Validate that a revert of a deleted object can be done.
        #                    // If user has renamed the object and the new object still exists in aod, it will
        #                    // occupy the old object's ID that was deleted which is going to be imported.
        #
        #                    // In the rename of an object scenario using version control, an existing object is pended for deletion and one for addition. If both are undo
        #                    // checkout, the user has to delete the one that has been added because it is using the ID of the deleted one.
        #
        #                    vcsItem.Version = 0;
        #                    vcsItem.ItemPath = this.itemPath(_controllable);
        #                    filename = this.getItemVersion(_controllable, vcsItem);
        #
        #                    canImportOk = this.canImport(_controllable, filename);
        #
        #                    if (canImportOk)
        #                    {
        #                        _controllable.fromFile(filename);
        #                    }
        #                    break;
        #
        #                default:
        #                    // Controllable can change for project node, if project-window is open, as project import (through commandSynchronize)
        #                    // closes the window.
        #                    isProjectNode = strStartsWith(_controllable.versionControlItemPath(), #ProjectPath);
        #                    syncParm = SysVersionControlSyncParameters::construct();
        #                    syncParm.parmVersion(0);
        #                    syncParm.parmForce(true);
        #                    syncParm.parmSilent(true);
        #                    this.commandSynchronize(_controllable, syncParm);
        #
        #                    break;
        #            }
        #            if (!isProjectNode && _controllable)
        #            {
        #                treeNode = null;
        #
        #                if (action != #MorphXActionDelete)
        #                {
        #                    sysTreeNode = _controllable as SysTreeNode;
        #                    treeNode = sysTreeNode.parmTreeNode();
        #                }
        #                else
        #                {
        #                    // If a delete was undone, try to compile only if the previous version was imported.
        #                    if (canImportOk)
        #                    {
        #                        sysTreeNodeVirtualDeleted = _controllable as SysTreeNodeVirtualDeleted;
        #                        treeNode = treeNode::findNode(sysTreeNodeVirtualDeleted.parmTreenodePath());
        #                    }
        #                }
        #
        #                if (treeNode)
        #                {
        #                    treeNode.AOTcompile();
        #                }
        #
        #            }
        #            ttscommit;
        #
        #            if (!isProjectNode)
        #            {
        #                _controllable.onUndoCheckOut();
        #            }
        #            return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    SysVersionControlTmpItem item = this.getCheckedOutItems();
        #    SysVersionControlMorphXItemTable morphXItem;
        #    SysVersionControlItemPath itemPath;
        #    Filename filename;
        #    SysVersionControllable controllable;
        #
        #    //
        #    // For each item write it to disk, and check in
        #    //
        #    while select item
        #    {
        #        controllable = item.getControllable();
        #        filename = this.fileName(controllable);
        #
        #        if (controllable.toFile(filename, false))
        #        {
        #            itemPath = this.itemPath(controllable);
        #            morphXItem = SysVersionControlMorphXItemTable::find(itemPath);
        #            morphXItem.checkIn(_comment, filename);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #description
        #public ClassDescription description()
        #{
        #    return "@SYS119115";
        #}
      ENDSOURCE
      SOURCE #editDefFile
        #public boolean editDefFile(XmlDocument _xmlDocument)
        #{
        #    resourceNode resourceNode = TreeNode::findNode(#DefFileTreenodePath);
        #    SysTreeNode configFile = SysTreeNode::newTreeNode(resourceNode);
        #    ContainerClass containerClass;
        #    BinData binData;
        #    SysVersionControlMorphXItemTable item;
        #
        #    try
        #    {
        #        ttsbegin;
        #        item = this.item(configFile);
        #        if (item)
        #        {
        #            //
        #            // Is the file already editable (=checked out)
        #            //
        #            if (!this.allowEdit(configFile))
        #            {
        #                //
        #                // Check it out
        #                //
        #                if (!this.commandCheckOut(configFile))
        #                {
        #                    //
        #                    // Cannot check out the file, as it is already checked-out.
        #                    //
        #                    throw error(strfmt("@SYS94398", #DefFileTreenodePath));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            SysVersionControlMorphXItemTable::addToVersionControl(this.itemPath(configFile));
        #        }
        #
        #        //
        #        // Save XML to resource node in AOT
        #        //
        #        containerClass = new ContainerClass([[SysResourceType::XMLDoc], new ContainerClass([_xmlDocument.innerXml()]).toBlob()]);
        #        binData = new BinData();
        #        binData.setData(containerClass.toBlob());
        #
        #        if (conlen(binData.getData()))
        #        {
        #            resourceNode.AOTSetData(binData);
        #            resourceNode.AOTsave();
        #        }
        #        ttscommit;
        #
        #    }
        #    catch
        #    {
        #        throw error(strfmt("@SYS94396", #DefFileTreenodePath));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileName
        #/// <summary>
        #/// Gets the file name for the <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface of which to get the file name.
        #/// </param>
        #/// <param name="_currentLayer">
        #/// A Boolean value that indicates whether to use the current layer; optional.
        #/// </param>
        #/// <param name="_promptForFolder">
        #/// A Boolean value that indicates whether a prompt for folder must be performed; optional.
        #/// </param>
        #/// <returns>
        #/// The file name for the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #public Filename fileName(
        #    SysVersionControllable _controllable,
        #    boolean                _currentLayer = true,
        #    boolean                _promptForFolder = false)
        #{
        #    Filename ret;
        #    FilePath path;
        #
        #    ret = super(_controllable, _currentLayer, _promptForFolder);
        #
        #    //Ensure folder exists
        #    [path] = Global::fileNameSplit(ret);
        #    WinAPI::createDirectoryPath(path);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getActionText
        #/// <summary>
        #/// Gets the action text for the controllable item.
        #/// </summary>
        #/// <param name="controllable">
        #/// The instance of the controllable.
        #/// </param>
        #/// <returns>
        #/// The value from the <c>SysVersionControlItemStatus</c> value that represents the checked-out action
        #/// of the controllable item.
        #/// </returns>
        #public SysVersionControlItemStatus getActionText(SysVersionControllable controllable)
        #{
        #    SysVersionControlMorphXItemTable itemEntry = SysVersionControlMorphXItemTable::find(this.itemPath(controllable));
        #
        #    #SysVersionControl
        #
        #    if (itemEntry)
        #    {
        #        switch (itemEntry.actionTextForCheckedOutItem())
        #        {
        #            case #MorphXActionEdit:
        #                return SysVersionControlItemStatus::Edit;
        #            case #MorphXActionAdd:
        #                return SysVersionControlItemStatus::Add;
        #            case #MorphXActionDelete:
        #                return SysVersionControlItemStatus::Delete;
        #            default:
        #                return SysVersionControlItemStatus::Uncontrolled;
        #        }
        #    }
        #    else
        #    {
        #        return SysVersionControlItemStatus::Uncontrolled;
        #    }
        #}
      ENDSOURCE
      SOURCE #getChangeLists
        #public SysVersionControlPendingChangeList getChangeLists()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getChangeNumberContents
        #/// <summary>
        #/// Gets a collection of objects that are included in a specified change list.
        #/// </summary>
        #/// <param name="_changeNumber">
        #/// The change list for which to retrieve the information.
        #/// </param>
        #/// <param name="_changeDateTime">
        #/// The time and date when the change was submitted.
        #/// </param>
        #/// <param name="_changeComments">
        #/// The comments that are associated with the change.
        #/// </param>
        #/// <returns>
        #/// A <c>SysVersionControlTmpItem</c> table that contains a record for each change in the change list.
        #/// </returns>
        #public SysVersionControlTmpItem getChangeNumberContents(SysVersionControlChangeNumber _changeNumber, utcdatetime _changeDateTime, SysVersionControlItemComment _changeComments)
        #{
        #    SysVersionControlTmpItem item;
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    // Use change number if provided
        #    if (_changeNumber != 0)
        #    {
        #        select firstonly revision
        #            where revision.RecId == _changeNumber;
        #
        #        if (revision)
        #        {
        #            item = revision.createItem();
        #            item.insert();
        #        }
        #    }
        #    else
        #    {
        #
        #        // Use date-time and comment to create the content list
        #        while select revision
        #             where revision.CreatedDateTime == _changeDateTime
        #        {
        #            item.clear();
        #            item.data(revision.createItem());
        #            item.insert();
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getChangesHistory
        #/// <summary>
        #///    Gets a collection of <c>SysVersionControlChangeLists</c> records that describe all changes.
        #/// </summary>
        #/// <returns>
        #///    A temporary <c>SysVersionControlTmpChange</c> table that contains a record for each change.
        #/// </returns>
        #public SysVersionControlTmpChange getChangesHistory()
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #    SysVersionControlTmpChange change;
        #
        #    while select RecId, CreatedBy, CreatedDateTime, Comment from revision
        #    {
        #        change.clear();
        #        change.User = revision.CreatedBy;
        #        change.ChangeNumber = revision.RecId;
        #        change.vcsDate = DateTimeUtil::date(revision.CreatedDateTime);
        #        change.vcsTime = DateTimeUtil::time(revision.CreatedDateTime);
        #        change.Comment = revision.Comment;
        #        change.StatusText = "@SYS136801";
        #        change.insert();
        #    }
        #    return change;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #public SysVersionControlTmpItem getCheckedOutItems()
        #{
        #    return SysVersionControlMorphXLockTable::getCheckedOutItems();
        #}
      ENDSOURCE
      SOURCE #getContainerVersion
        #/// <summary>
        #/// Gets the container of the specified version.
        #/// </summary>
        #/// <param name="_container">
        #/// The instance of the <c>SysTreeNodeContainer</c> class.
        #/// </param>
        #/// <param name="_item">
        #/// The record that describes the history of the container.
        #/// </param>
        #/// <param name="_vcsItemPath">
        #/// The version control system path of the container node.
        #/// </param>
        #/// <param name="extractFolder">
        #/// The folder where the container items are extracted.
        #/// </param>
        #public void getContainerVersion(SysTreeNodeContainer _container, SysVersionControlTmpItem _item, SysVersionControlItemPath _vcsItemPath, str extractFolder)
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #    str aotPath;
        #    SysVersionControllable itemControllable;
        #    str itemFileName;
        #    FilePath    path;
        #    SysVersionControlItemPath searchPattern =  strReplace(_vcsItemPath, @"\", @"\\") + @"\\*";
        #
        #
        #    while select maxof(Version), ItemPath, CreatedDateTime from revision
        #        group by ItemPath
        #        where revision.CreatedDateTime <= DateTimeUtil::newDateTime(_item.vcsDate, _item.vcsTime)
        #        && revision.ItemPath like searchPattern
        #        {
        #            aotPath = SysTreeNodeVSItem::vcsPath2TreeNodePath(revision.ItemPath);
        #
        #            itemControllable = SysTreeNodeVirtualDeleted::newTreeNodePath(aotPath);
        #
        #            // Combine the extract folder with item controllable path
        #            itemFileName = strfmt('%1\\%2', extractFolder, itemControllable.versionControlFilePath());
        #            [path] = fileNameSplit(itemFileName);
        #
        #            // Create the folder if it does not exist
        #            if (!WinAPI::folderExists(path))
        #            {
        #                WinAPI::createDirectoryPath(path);
        #            }
        #
        #            // Extract the item from the database
        #            this.item(itemControllable).writeItemVersionToFile(itemFileName, revision.Version);
        #        }
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #public SysVersionControlTmpItem getItemHistory(SysVersionControllable _controllable)
        #{
        #    SysTreeNodeContainer nodeContainer;
        #
        #    nodeContainer = _controllable as SysTreeNodeContainer;
        #
        #    if (nodeContainer != null)
        #    {
        #        return SysVersionControlMorphXRevisionTable::getContainerHistory(nodeContainer, this.itemPath(_controllable), this.fileName(_controllable));
        #    }
        #
        #    return this.item(_controllable).getItemHistory();
        #}
      ENDSOURCE
      SOURCE #getItemVersion
        #public Filename getItemVersion(SysVersionControllable _controllable, SysVersionControlTmpItem _item)
        #{
        #    SysTreeNodeContainer nodeContainer;
        #    FilePath filePath = strfmt('%1\\%2', folder, newguid());
        #
        #
        #    nodeContainer = _controllable as SysTreeNodeContainer;
        #
        #    if (nodeContainer)
        #    {
        #        this.getContainerVersion(nodeContainer, _item, this.itemPath(_controllable), filePath);
        #
        #
        #        return nodeContainer.getImportItemFilePath(strfmt(@"%1\%2",filePath, _controllable.versionControlFilePath()));
        #    }
        #    else
        #    {
        #        Debug::assert(_item.ItemPath != '');
        #        this.item(_controllable).writeItemVersionToFile(filePath, _item.Version);
        #
        #        return filePath;
        #    }
        #}
      ENDSOURCE
      SOURCE #getLatestDefFile
        #protected boolean getLatestDefFile()
        #{
        #    //Is always up-to-date, as it is located in the AOT as a resource.
        #    return true;
        #}
      ENDSOURCE
      SOURCE #getPendingChangeListContents
        #public SysVersionControlTmpItem getPendingChangeListContents(str _changeList, boolean _silent = false)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #ideIntegration
        #public boolean ideIntegration()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init(SysVersionControlParameters _parameters)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isTmpItemOpenedForDelete
        #/// <summary>
        #/// Indicates whether a version control object is opened for delete.
        #/// </summary>
        #/// <param name="_sysVersionControlTmpItem">
        #/// A temporary <c>SysVersionControlTmpItem</c> buffer to check.
        #/// </param>
        #/// <returns>
        #/// true if the version control object is opened for delete; otherwise, false.
        #/// </returns>
        #public boolean isTmpItemOpenedForDelete(SysVersionControlTmpItem _sysVersionControlTmpItem)
        #{
        #    return _sysVersionControlTmpItem.ActionText == #MorphXActionDelete;
        #}
      ENDSOURCE
      SOURCE #item
        #protected SysVersionControlMorphXItemTable item(SysVersionControllable _controllable, boolean _currentLayer = true)
        #{
        #    SysVersionControlMorphXItemTable item = SysVersionControlMorphXItemTable::find(this.itemPath(_controllable, _currentLayer));
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #itemPath
        #protected SysVersionControlItemPath itemPath(SysVersionControllable _controllable, boolean _currentLayer = true)
        #{
        #    //Use filePath() as it includes layer information
        #    return strfmt('\\'+_controllable.versionControlFilePath(_currentLayer));
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    #WinAPI
        #
        #    folder = xApplication::getFolderPath(#CSIDL_INTERNET_CACHE);
        #    super();
        #}
      ENDSOURCE
      SOURCE #parmFolder
        #public FilePath parmFolder(FilePath _folder = folder)
        #{
        #    //Do not allow changing the folder.
        #    return super();
        #}
      ENDSOURCE
      SOURCE #requireTeamServer
        #protected boolean requireTeamServer()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #    throw error("@SYS112528");
        #}
      ENDSOURCE
      SOURCE #showStatusLine
        #public boolean showStatusLine()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportAdditionalFolders
        #public boolean supportAdditionalFolders()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #/// <summary>
        #///    Checks whether a check-in wizard is used by the back end for the version control system.
        #/// </summary>
        #/// <returns>
        #///    true if the back end has a check in wizard; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the back end uses a check-in wizard, check-in comments will not be requested as these comments
        #///    are provided in the check in wizard.
        #/// </remarks>
        #public boolean supportCheckInWizard()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportImportOfPendingElements
        #public boolean supportImportOfPendingElements()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportModels
        #public boolean supportModels()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #public boolean supportSubmittedChangeLists()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSynchronization
        #public boolean supportSynchronization()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlSystemMorphX construct()
        #{
        #    return new SysVersionControlSystemMorphX();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlUserInterfaceMorphX unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlUserInterfaceMorphX
    PROPERTIES
      Name                #SysVersionControlUserInterfaceMorphX
      Origin              #{2D230000-0000-1000-E3C1-AB7066559CB5}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlUserInterfaceMorphX</c> class is used to present information to the user
        #/// when certain actions occur during the use of the version control system.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlUserInterfaceMorphX implements SysVersionControlUserInterfaceProvider
        #{
        #    #SysVersionControl
        #}
      ENDSOURCE
      SOURCE #createCompilerOutput
        #/// <summary>
        #/// Creates an instance of the <c>xCompilerOutput</c> class that is used for compilation results.
        #/// </summary>
        #/// <returns>
        #/// An instance of the <c>xCompilerOutput</c> class.
        #/// </returns>
        #public xCompilerOutput createCompilerOutput()
        #{
        #    return SysCompilerOutput::construct();
        #}
      ENDSOURCE
      SOURCE #getProcessWindowHandle
        #/// <summary>
        #/// Gets the window handle of the current process.
        #/// </summary>
        #/// <returns>
        #/// The window handle of the current process.
        #/// </returns>
        #public HWND getProcessWindowHandle()
        #{
        #    return infolog.hWnd();
        #}
      ENDSOURCE
      SOURCE #notificationForm
        #/// <summary>
        #/// Initializes an instance of the notification form.
        #/// </summary>
        #/// <returns>
        #/// An instance of the notification form.
        #/// </returns>
        #/// <remarks>
        #/// The notification form shows progress to the user during long-running, asynchronous operations.
        #/// </remarks>
        #public FormRun notificationForm()
        #{
        #    Args args = new Args();
        #    Form form = new Form(formstr(SysVersionControlNotification));
        #    Object formRun;
        #    args.object(form);
        #
        #    formRun = ClassFactory::formRunClassOnClient(args);
        #    formRun.init();
        #    formRun.run();
        #
        #    return formRun;
        #}
      ENDSOURCE
      SOURCE #promptCheckin
        #/// <summary>
        #/// Allows the user to cancel the check-in with a prompt before the check-in.
        #/// </summary>
        #/// <param name="_itemsToCheckIn">
        #/// The items that will be checked in.
        #/// </param>
        #/// <param name="_itemsCheckedOut">
        #/// The list of items that are currently checked out.
        #/// </param>
        #/// <returns>
        #/// true if the prompt is verified; otherwise, false.
        #/// </returns>
        #public boolean promptCheckin(SysVersionControlTmpItem _itemsToCheckIn, SysVersionControlTmpItem _itemsCheckedOut)
        #{
        #
        #    select count(RecId) from _itemsToCheckIn;
        #    select count(RecId) from _itemsCheckedOut;
        #
        #    if (_itemsCheckedOut.RecId > _itemsToCheckIn.RecId)
        #    {
        #        return Box::yesNo("@SYS88949", DialogButton::No) == DialogButton::Yes;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #promptForFolder
        #/// <summary>
        #/// Prompts the user for the folder on which to operate during a task.
        #/// </summary>
        #/// <param name="_additionalFolders">
        #/// The additional folders that should be included in the prompt.
        #/// </param>
        #/// <param name="_selectMultiple">
        #/// A Boolean value that indicates whether multiple folders can be selected; optional.
        #/// </param>
        #/// <param name="_includeLabels">
        #/// A Boolean value that indicates whether the folder for labels should be included in the prompt;
        #/// optional.
        #/// </param>
        #/// <param name="_controllable">
        #/// A <c>SysVersionControllable</c> interface; optional.
        #/// </param>
        #/// <returns>
        #/// The folders that are selected by the user.
        #/// </returns>
        #/// <remarks>
        #///  <list type="bullet">
        #///   <item>
        #///   <description>Synchronization of repository</description>
        #///   </item>
        #///   <item>
        #///    <description>
        #///    Add the <c>SysVersionControllable</c> field interface to version control
        #///    </description>
        #///   </item>
        #///  </list>
        #///   The <paramref name="_selectMultiple" />
        #///   parameter is only used for a synchronization of repository tasks. It is not possible to add a
        #///  single
        #///  <c>
        #///  SysVersionControllable
        #///  </c>
        #///   interface to multiple folders in one operation.
        #/// </remarks>
        #public Set promptForFolder(Map _additionalFolders,
        #    boolean _selectMultiple = false,
        #    boolean _includeLabels = false,
        #    SysVersionControllable _controllable = null)
        #{
        #    container       selections;
        #    container       selection;
        #    MapEnumerator   enum;
        #    Map             selectionMap;
        #    int             i;
        #    boolean         ok;
        #    container       selectedId;
        #    Set             result = new Set(Types::String);
        #
        #    if (_additionalFolders.elements() > 1 || _selectMultiple)
        #    {
        #        selectionMap = new Map(Types::Integer, Types::String);
        #        enum = _additionalFolders.getEnumerator();
        #        i = 1;
        #        while (enum.moveNext())
        #        {
        #            selections += [SysListSelect::packChoice((_includeLabels ? ' ' : '') +enum.currentKey()+'\n'+enum.currentValue(), i, strfmt('%1', currentAOLayer())==enum.currentKey())];
        #            selectionMap.insert(i, enum.currentKey());
        #            i++;
        #        }
        #        if(_includeLabels)
        #        {
        #            selections += [SysListSelect::packChoice(#LabelsFolder+'\n'+"@SYS98539", i, false)];
        #            selectionMap.insert(i, #LabelsFolder);
        #        }
        #        if(_selectMultiple)
        #        {
        #            // Due to model import import cannot be enforced we only allow selecting one folder at a time.
        #            selection = selectSingle("@SYS98531", "@SYS98532", selections, ["@SYS80257","@SYS6303"]);
        #        }
        #        else
        #        {
        #            if (_controllable != null)
        #            {
        #                selection = selectSingle("@SYS88005", strfmt("@SYS109675", _controllable.versionControlItemPath()), selections, ["@SYS80257","@SYS6303"]);
        #            }
        #            else
        #            {
        #                selection = selectSingle("@SYS88005", "@SYS88007", selections, ["@SYS80257","@SYS6303"]);
        #            }
        #        }
        #
        #        [ok, selectedId] = selection;
        #        if (ok && conpeek(selectedId, 1))
        #        {
        #            for(i=1; i<=conlen(selectedId); i++)
        #                result.add(selectionMap.lookup(conpeek(selectedId,i)));
        #            return result;
        #        }
        #    }
        #    else
        #    {
        #        enum = _additionalFolders.getEnumerator();
        #        if (enum.moveNext())
        #        {
        #            result.add(enum.currentKey());
        #            return result;
        #        }
        #    }
        #
        #    throw error("@SYS70800");
        #}
      ENDSOURCE
      SOURCE #promptWhenReverting
        #/// <summary>
        #/// Prompts the user when a <c>SysVersionControllable</c> interface is reverted.
        #/// </summary>
        #/// <param name="_text">
        #/// The specified text to display to the user.
        #/// </param>
        #/// <param name="_defaultButton">
        #/// The button to select by default.
        #/// </param>
        #/// <param name="_title">
        #/// The title that is displayed for the user.
        #/// </param>
        #/// <param name="_modal">
        #/// A Boolean value that indicates whether the UI is modal.
        #/// </param>
        #/// <returns>
        #/// A dialog button value.
        #/// </returns>
        #public DialogButton promptWhenReverting(
        #    str             _text,
        #    DialogButton    _defaultButton,
        #    str             _title,
        #    boolean         _modal)
        #{
        #    return Box::yesYesAllNoCancel(_text, _defaultButton, _title, _modal);
        #}
      ENDSOURCE
      SOURCE #showHistory
        #/// <summary>
        #/// Shows the history of the specified <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The object of which to show the history.
        #/// </param>
        #public void showHistory(SysVersionControllable _controllable)
        #{
        #    Args args = new Args();
        #    FormRun formRun;
        #
        #    args.name(formstr(SysVersionControlItemHistory));
        #    args.caller(_controllable);
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #    formRun.run();
        #    formRun.detach();
        #
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlUserInterfaceMorphX construct()
        #{
        #    return new SysVersionControlUserInterfaceMorphX();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlUserInterfaceProvider unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControlUserInterfaceProvider
    PROPERTIES
      Name                #SysVersionControlUserInterfaceProvider
      Origin              #{2D260000-0000-1000-C858-F626D3117B0E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlUserInterfaceProvider</c> interface can be used to decouple the UI from
        #/// MorphX when using the version control system.
        #/// </summary>
        #/// <remarks>
        #/// When implementing this interface your class has the possibility to invoke its own UI instead of the
        #/// MorphX UI.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #interface SysVersionControlUserInterfaceProvider
        #{
        #}
      ENDSOURCE
      SOURCE #createCompilerOutput
        #/// <summary>
        #/// Creates the <c>xCompilerOutput</c> class to use for compilation results.
        #/// </summary>
        #/// <returns>
        #/// An instance of the <c>xCompilerOutput</c> class.
        #/// </returns>
        #public xCompilerOutput createCompilerOutput()
        #{
        #}
      ENDSOURCE
      SOURCE #getProcessWindowHandle
        #/// <summary>
        #/// Gets the current process window handle.
        #/// </summary>
        #/// <returns>The current process window handle.</returns>
        #public HWND getProcessWindowHandle()
        #{
        #}
      ENDSOURCE
      SOURCE #notificationForm
        #/// <summary>
        #/// Initializes an instance of the notification form.
        #/// </summary>
        #/// <returns>
        #/// An instance of a notification form.
        #/// </returns>
        #/// <remarks>
        #/// The notification form shows the progress to the user during long-running asynchronous operations.
        #/// </remarks>
        #public FormRun notificationForm()
        #{
        #}
      ENDSOURCE
      SOURCE #promptCheckin
        #/// <summary>
        #/// Prompts the user before check-in, which lets the user cancel the check-in.
        #/// </summary>
        #/// <param name="_itemsToCheckIn">
        #/// The items to check in.
        #/// </param>
        #/// <param name="_itemsCheckedOut">
        #/// The total list of items which are currently checked out.
        #/// </param>
        #/// <returns>
        #/// true if the prompt is verified; otherwise, false.
        #/// </returns>
        #public boolean promptCheckin(SysVersionControlTmpItem _itemsToCheckIn, SysVersionControlTmpItem _itemsCheckedOut)
        #{
        #}
      ENDSOURCE
      SOURCE #promptForFolder
        #/// <summary>
        #///    Prompts the user for the folder to operate on during a task.
        #/// </summary>
        #/// <param name="_additionalFolders">
        #///    The specified additional folders which should be included in the prompt.
        #/// </param>
        #/// <param name="_selectMultiple">
        #///    A Boolean value which indicates if multiple folders can be selected; optional.
        #/// </param>
        #/// <param name="_includeLabels">
        #///    A Boolean value which indicates if the folder for labels should be included in the prompt; optional.
        #/// </param>
        #/// <param name="_controllable">
        #///    A specified <c>SysVersionControllable</c> interface; optional.
        #/// </param>
        #/// <returns>
        #///    <list type="bullet">
        #///       <item>
        #///          <description>Synchronization of repository</description>
        #///       </item>
        #///       <item>
        #///          <description>
        #///             Add the <c>SysVersionControllable</c> interface to version control
        #///          </description>
        #///       </item>
        #///    </list>
        #///     The one or more folders selected by the user.
        #/// </returns>
        #/// <remarks>
        #///    The <paramref name="_selectMultiple" /> parameter is only used for a synchronization of repository
        #///    task.It is not possible to add a single <c>SysVersionControllable</c> interface to multiple folders
        #///    in one operation.
        #/// </remarks>
        #public Set promptForFolder(Map _additionalFolders,
        #    boolean _selectMultiple = false,
        #    boolean _includeLabels = false,
        #    SysVersionControllable _controllable = null)
        #{
        #}
      ENDSOURCE
      SOURCE #promptWhenReverting
        #/// <summary>
        #/// Prompts the user when reverting a <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_text">
        #/// The specified text displayed for the user.
        #/// </param>
        #/// <param name="_defaultButton">
        #/// The button which must be selected as default.
        #/// </param>
        #/// <param name="_title">
        #/// The title displayed for the user.
        #/// </param>
        #/// <param name="_modal">
        #/// A Boolean value which indicates if the UI is modal.
        #/// </param>
        #/// <returns>
        #/// A dialog button value.
        #/// </returns>
        #public DialogButton promptWhenReverting(
        #    str             _text,
        #    DialogButton    _defaultButton,
        #    str             _title,
        #    boolean         _modal)
        #{
        #}
      ENDSOURCE
      SOURCE #showHistory
        #/// <summary>
        #/// Shows the history of the specified <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The specified object for which the history is shown.
        #/// </param>
        #public void showHistory(SysVersionControllable _controllable)
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlUserInterfaceSilent unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlUserInterfaceSilent
    PROPERTIES
      Name                #SysVersionControlUserInterfaceSilent
      Origin              #{1934D303-FBA9-48FC-AC92-81BAA70E733B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlUserIntefaceSilent</c> class is a silent user interface provider for the AX
        #/// version control system.
        #/// </summary>
        #/// <remarks>
        #/// The actual behavior can be instrumented; by default it is silent.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlUserInterfaceSilent implements SysVersionControlUserInterfaceProvider
        #{
        #    xCompilerOutput compilerOutput;
        #    FormRun notificationForm;
        #    boolean promptCheckIn;
        #    Set promptForFolder;
        #    DialogButton promptWhenReverting;
        #    HWND processWindowHandle;
        #}
      ENDSOURCE
      SOURCE #createCompilerOutput
        #/// <summary>
        #/// Creates the <c>xCompilerOutput</c> class to use for compilation results.
        #/// </summary>
        #/// <returns>
        #/// An instance of the <c>xCompilerOutput</c> class.
        #/// </returns>
        #public xCompilerOutput createCompilerOutput()
        #{
        #    return compilerOutput;
        #}
      ENDSOURCE
      SOURCE #getProcessWindowHandle
        #/// <summary>
        #/// Gets the current process window handle.
        #/// </summary>
        #/// <returns>The current process window handle.</returns>
        #public HWND getProcessWindowHandle()
        #{
        #    return processWindowHandle;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    // default values (silent)
        #    compilerOutput = SysCompilerOutputTextBased::construct();
        #    notificationForm = null;
        #    promptCheckIn = false;
        #    promptForFolder = new Set(Types::String);
        #    promptWhenReverting = DialogButton::Yes;
        #    processWindowHandle = Infolog.hWnd();
        #}
      ENDSOURCE
      SOURCE #notificationForm
        #/// <summary>
        #/// Initializes an instance of the notification form.
        #/// </summary>
        #/// <returns>
        #/// An instance of a notification form.
        #/// </returns>
        #/// <remarks>
        #/// The notification form is showing progress to the user during long running asynchronous operations.
        #/// </remarks>
        #public FormRun notificationForm()
        #{
        #    return notificationForm;
        #}
      ENDSOURCE
      SOURCE #parmCompilerOutput
        #public xCompilerOutput parmCompilerOutput(xCompilerOutput _compilerOutput = compilerOutput)
        #{
        #    compilerOutput = _compilerOutput;
        #
        #    return compilerOutput;
        #}
      ENDSOURCE
      SOURCE #parmNotificationForm
        #public FormRun parmNotificationForm(FormRun _notificationForm = notificationForm)
        #{
        #    notificationForm = _notificationForm;
        #
        #    return notificationForm;
        #}
      ENDSOURCE
      SOURCE #parmProcessWindowHandle
        #public Hwnd parmProcessWindowHandle(Hwnd _processWindowHandle = processWindowHandle)
        #{
        #    processWindowHandle = _processWindowHandle;
        #
        #    return processWindowHandle;
        #}
      ENDSOURCE
      SOURCE #parmPromptCheckIn
        #public boolean parmPromptCheckIn(boolean _promptCheckIn = promptCheckIn)
        #{
        #    promptCheckIn = _promptCheckIn;
        #
        #    return promptCheckIn;
        #}
      ENDSOURCE
      SOURCE #parmPromptForFolder
        #public Set parmPromptForFolder(Set _promptForFolder = promptForFolder)
        #{
        #    promptForFolder = _promptForFolder;
        #
        #    return promptForFolder;
        #}
      ENDSOURCE
      SOURCE #parmPromptWhenReverting
        #public DialogButton parmPromptWhenReverting(DialogButton _promptWhenReverting = promptWhenReverting)
        #{
        #    promptWhenReverting = _promptWhenReverting;
        #
        #    return promptWhenReverting;
        #}
      ENDSOURCE
      SOURCE #promptCheckin
        #/// <summary>
        #/// Prompts the user prior to check-in to allowing the user to cancel the check-in.
        #/// </summary>
        #/// <param name="_itemsToCheckIn">
        #/// The items which are going to be checked in.
        #/// </param>
        #/// <param name="_itemsCheckedOut">
        #/// The total list of items which are currently checked out.
        #/// </param>
        #/// <returns>
        #/// true if the prompt is verified; otherwise, false.
        #/// </returns>
        #public boolean promptCheckin(SysVersionControlTmpItem _itemsToCheckIn, SysVersionControlTmpItem _itemsCheckedOut)
        #{
        #    return promptCheckIn;
        #}
      ENDSOURCE
      SOURCE #promptForFolder
        #/// <summary>
        #/// Prompts the user for the folder to operate on during a task.
        #/// </summary>
        #/// <param name="_additionalFolders">
        #/// The specified additional folders which should be included in the prompt.
        #/// </param>
        #/// <param name="_selectMultiple">
        #/// A Boolean value that specifies whether multiple folders can be selected; optional.
        #/// </param>
        #/// <param name="_includeLabels">
        #/// A Boolean value that indicates whether to include the folder for labels in the prompt; optional.
        #/// </param>
        #/// <param name="_controllable">
        #/// A specified <c>SysVersionControllable</c> interface; optional.
        #/// </param>
        #/// <returns>
        #/// The one or more folders selected by the user.
        #/// </returns>
        #/// <remarks>
        #///  <list type="bullet">
        #///   <item>
        #///   <description>Synchronization of the repository</description>
        #///   </item>
        #///   <item>
        #///    <description>
        #///    Adds the <c>SysVersionControllable</c> interface to version control
        #///    </description>
        #///   </item>
        #///  </list>
        #///  The <paramref name="_selectMultiple" />
        #///   parameter is only used for a synchronization of a repository task. It is not possible to add a
        #///  single
        #///  <c>
        #///  SysVersionControllable
        #///  </c>
        #///   interface to multiple folders in one operation.
        #/// </remarks>
        #public Set promptForFolder(Map _additionalFolders,
        #    boolean _selectMultiple = false,
        #    boolean _includeLabels = false,
        #    SysVersionControllable _controllable = null)
        #{
        #    return promptForFolder;
        #}
      ENDSOURCE
      SOURCE #promptWhenReverting
        #/// <summary>
        #/// Prompts the user when reverting a <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_text">
        #/// The specified text that is displayed for the user.
        #/// </param>
        #/// <param name="_defaultButton">
        #/// The button to select as default.
        #/// </param>
        #/// <param name="_title">
        #/// The title to display for the user.
        #/// </param>
        #/// <param name="_modal">
        #/// A Boolean value that indicates whether the user interface is modal.
        #/// </param>
        #/// <returns>
        #/// A dialog button value.
        #/// </returns>
        #public DialogButton promptWhenReverting(
        #    str             _text,
        #    DialogButton    _defaultButton,
        #    str             _title,
        #    boolean         _modal)
        #{
        #    return promptWhenReverting;
        #}
      ENDSOURCE
      SOURCE #showHistory
        #/// <summary>
        #/// Shows the history of the specified <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The specified object for which the history is shown.
        #/// </param>
        #public void showHistory(SysVersionControllable _controllable)
        #{
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlUserInterfaceSilent construct()
        #{
        #    return new SysVersionControlUserInterfaceSilent();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlUserInterfaceVS unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlUserInterfaceVS
    PROPERTIES
      Name                #SysVersionControlUserInterfaceVS
      Origin              #{2D200000-0000-1000-13F2-CB7ED58EA3A2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlUserIntefaceVS</c> class is used to redirect the information shown to the user in AX to VS.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlUserInterfaceVS  implements SysVersionControlUserInterfaceProvider
        #{
        #    #SysVersionControl
        #}
      ENDSOURCE
      SOURCE #createCompilerOutput
        #/// <summary>
        #/// Creates the <c>xCompilerOutput</c> class to use for compilation results.
        #/// </summary>
        #/// <returns>
        #/// An instance of the <c>xCompilerOutput</c> class.
        #/// </returns>
        #public xCompilerOutput createCompilerOutput()
        #{
        #    return SysCompilerOutputTextBased::construct();
        #}
      ENDSOURCE
      SOURCE #getProcessWindowHandle
        #/// <summary>
        #/// Gets the current process window handle.
        #/// </summary>
        #/// <returns>The current process window handle.</returns>
        #public HWND getProcessWindowHandle()
        #{
        #    System.Diagnostics.Process process;
        #    System.IntPtr winPtr;
        #    HWND    handle;
        #
        #    process = System.Diagnostics.Process::GetCurrentProcess();
        #
        #    winPtr = process.get_MainWindowHandle();
        #    handle = winPtr.ToInt32();
        #
        #    return handle;
        #}
      ENDSOURCE
      SOURCE #notificationForm
        #/// <summary>
        #/// Initializes an instance of the notification form.
        #/// </summary>
        #/// <returns>
        #/// An instance of a notification form.
        #/// </returns>
        #/// <remarks>
        #/// The notification form shows the progress to the user during long running asynchronous operations.
        #/// </remarks>
        #public FormRun notificationForm()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #promptCheckin
        #/// <summary>
        #/// Prompts the user prior to check-in to allowing the user to cancel the check-in.
        #/// </summary>
        #/// <param name="_itemsToCheckIn">
        #/// The items which are going to be checked in.
        #/// </param>
        #/// <param name="_itemsCheckedOut">
        #/// The total list of items which are currently checked out.
        #/// </param>
        #/// <returns>
        #/// true if the prompt is verified; otherwise, false.
        #/// </returns>
        #public boolean promptCheckin(SysVersionControlTmpItem _itemsToCheckIn, SysVersionControlTmpItem _itemsCheckedOut)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #promptForFolder
        #/// <summary>
        #///    Prompts the user for the folder to operate on during a task.
        #/// </summary>
        #/// <param name="_additionalFolders">
        #///    The specified additional folders which should be included in the prompt.
        #/// </param>
        #/// <param name="_selectMultiple">
        #///    A Boolean value which indicates if multiple folders can be selected; optional.
        #/// </param>
        #/// <param name="_includeLabels">
        #///    A Boolean value which indicates if the folder for labels should be included in the prompt; optional.
        #/// </param>
        #/// <param name="_controllable">
        #///    A specified <c>SysVersionControllable</c> interface; optional.
        #/// </param>
        #/// <returns>
        #///    The one or more folders selected by the user.
        #/// </returns>
        #/// <remarks>
        #///    <list type="bullet">
        #///       <item>
        #///          <description>Synchronization of the repository</description>
        #///       </item>
        #///       <item>
        #///          <description>
        #///             Adds the <c>SysVersionControllable</c> interface to version control
        #///          </description>
        #///       </item>
        #///    </list>
        #///     The <paramref name="_selectMultiple" />
        #///     parameter is only used for a synchronization of a repository task.It is not possible to add a
        #///    single
        #///    <c>
        #///       SysVersionControllable
        #///    </c>
        #///     interface to multiple folders in one operation.
        #/// </remarks>
        #public Set promptForFolder(Map _additionalFolders,
        #    boolean _selectMultiple = false,
        #    boolean _includeLabels = false,
        #    SysVersionControllable _controllable = null)
        #{
        #    Set result = new Set(Types::String);
        #    result.add(strfmt('%1', currentAOLayer()));
        #    return result;
        #}
      ENDSOURCE
      SOURCE #promptWhenReverting
        #/// <summary>
        #/// Prompts the user when reverting a <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_text">
        #/// The specified text displayed for the user.
        #/// </param>
        #/// <param name="_defaultButton">
        #/// The button which must be selected as default.
        #/// </param>
        #/// <param name="_title">
        #/// The title displayed for the user.
        #/// </param>
        #/// <param name="_modal">
        #/// A Boolean value which indicates if the user interface is modal.
        #/// </param>
        #/// <returns>
        #/// A dialog button value.
        #/// </returns>
        #public DialogButton promptWhenReverting(
        #    str             _text,
        #    DialogButton    _defaultButton,
        #    str             _title,
        #    boolean         _modal)
        #{
        #    return DialogButton::Yes;
        #}
      ENDSOURCE
      SOURCE #showHistory
        #/// <summary>
        #/// Shows the history of the specified <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The specified object for which the history is shown.
        #/// </param>
        #public void showHistory(SysVersionControllable _controllable)
        #{
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlUserInterfaceVS construct()
        #{
        #    return new SysVersionControlUserInterfaceVS();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlWorkItemProvider unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #SysVersionControlWorkItemProvider
    PROPERTIES
      Name                #SysVersionControlWorkItemProvider
      Origin              #{7D9C1089-B38A-4245-B7E5-D77C82F0F4B0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlWorkItemProvider</c> class allows work items to be associated
        #/// with a Version Control System (VCS) check-in.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public interface SysVersionControlWorkItemProvider
        #{
        #}
      ENDSOURCE
      SOURCE #flushCache
        #/// <summary>
        #/// Flushes the work item cache.
        #/// </summary>
        #public void flushCache()
        #{
        #}
      ENDSOURCE
      SOURCE #getItemById
        #/// <summary>
        #/// Gets the work item that has the specified work item ID.
        #/// </summary>
        #/// <param name="id">
        #/// The ID of the work item to query.
        #/// </param>
        #/// <returns>
        #/// A record in <c>SysVersionControlWorkItemId</c> table; otherwise, an empty record.
        #/// </returns>
        #public SysVersionControlTmpWorkItems getItemById(SysVersionControlWorkItemId id)
        #{
        #}
      ENDSOURCE
      SOURCE #getItemsAssignedToMe
        #/// <summary>
        #/// Gets the work items that are assigned to the current user.
        #/// </summary>
        #/// <returns>
        #/// A number of records in <c>SysVersionControlTmpWorkItems</c> table.
        #/// </returns>
        #public SysVersionControlTmpWorkItems getItemsAssignedToMe()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlWorkItemProviderTFS unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlWorkItemProviderTFS
    PROPERTIES
      Name                #SysVersionControlWorkItemProviderTFS
      Origin              #{72EDEEE0-6C27-497E-B6F1-1AD7D70FEEE0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>SysVersionControlWorkItemProviderTFS</c> class allows for TFS work items to be associated
        #/// with a Version Control System (VCS) check-in.
        #/// </summary>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlWorkItemProviderTFS implements SysVersionControlWorkItemProvider
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemStoreProxy workItemStoreProxy;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxyCollection workItemsCache;
        #
        #    #define.AssignedToMeQuery("SELECT [System.Id], [System.Title], [System.State], [System].[Work Item Type] FROM WorkItems WHERE [System.TeamProject] = @project  AND  [System.AssignedTo] = @me ORDER BY [System.Id]")
        #}
      ENDSOURCE
      SOURCE #flushCache
        #/// <summary>
        #/// Flushes the work item cache.
        #/// </summary>
        #public void flushCache()
        #{
        #    workItemsCache.Clear();
        #}
      ENDSOURCE
      SOURCE #getCheckInAction
        #private Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.TFSWorkItemCheckinAction getCheckInAction(SysVersionControlWorkItemAction action)
        #{
        #    switch(action)
        #    {
        #        case SysVersionControlWorkItemAction::Associate:
        #            return Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.TFSWorkItemCheckinAction::Associate;
        #        case SysVersionControlWorkItemAction::Resolve:
        #            return Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.TFSWorkItemCheckinAction::Resolve;
        #        default:
        #            throw error ("@SYS341283");
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #getCheckInItems
        #/// <summary>
        #/// Gets the links of the work items that are associated with the check-in.
        #/// </summary>
        #/// <param name="workItems">The work items to be associated with the check-in.</param>
        #/// <returns>A list of the work item associations.</returns>
        #public Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemCheckInInfoProxyCollection getCheckInItems(
        #        SysVersionControlTmpWorkItems workItems)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemCheckInInfoProxyCollection res;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxy workItem;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemCheckInInfoProxy workItemCheckInInfo;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.TFSWorkItemCheckinAction workItemCheckInAction;
        #    int workItemId;
        #
        #    res = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemCheckInInfoProxyCollection();
        #
        #    while select ID, CheckInAction from workItems
        #        where workItems.Selected == true
        #    {
        #        workItemId = workItems.ID;
        #        workItemCheckInAction = this.getCheckInAction(workItems.CheckInAction);
        #        workItem = this.getWorkItemProxyById(workItemId);
        #        workItemCheckInInfo = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemCheckInInfoProxy(workItem, workItemCheckInAction);
        #        res.Add(workItemCheckInInfo);
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #getItemById
        #/// <summary>
        #/// Gets the work item that has the specified work item ID.
        #/// </summary>
        #/// <param name="id">
        #/// The ID of the work item to query.
        #/// </param>
        #/// <returns>
        #/// A single record in <c>SysVersionControlWorkItemId</c> table; otherwise, an empty record.
        #/// </returns>
        #public SysVersionControlTmpWorkItems getItemById(SysVersionControlWorkItemId id)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxy workItem;
        #    SysVersionControlTmpWorkItems ret;
        #
        #    workItem = this.getWorkItemProxyById(id);
        #
        #    if (workItem != null)
        #    {
        #        this.insertWorkItemToTable(ret, workItem);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getItemsAssignedToMe
        #/// <summary>
        #/// Gets the work items that are assigned to the current user.
        #/// </summary>
        #/// <returns>
        #/// A number of records in the <c>SysVersionControlTmpWorkItems</c> table.
        #/// </returns>
        #public SysVersionControlTmpWorkItems getItemsAssignedToMe()
        #{
        #    SysVersionControlTmpWorkItems ret;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxyCollection workItems;
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxy workItem;
        #    int i, itemsCount;
        #
        #    workItems = workItemStoreProxy.ExecuteWorkItemQuery(#AssignedToMeQuery);
        #    itemsCount = workItems.get_Count();
        #
        #    for (i = 0; i < itemsCount; i++)
        #    {
        #        workItem = workItems.get_Item(i);
        #        this.insertWorkItemToTable(ret, workItem);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getWorkItemProxyById
        #private Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxy getWorkItemProxyById(int id)
        #{
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxy res;
        #
        #    res = workItemsCache.GetById(id);
        #
        #    if (res == null)
        #    {
        #        res = workItemStoreProxy.GetWorkItem(id);
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #insertWorkItemToTable
        #private void insertWorkItemToTable(
        #    SysVersionControlTmpWorkItems target,
        #    Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxy workItem)
        #{
        #    int id;
        #    str title;
        #    System.Type clrWorkItemType;
        #    int instanceFlag = CLRInterop::getAnyTypeForObject(System.Reflection.BindingFlags::Instance);
        #    int publicFlag = CLRInterop::getAnyTypeForObject(System.Reflection.BindingFlags::Public);
        #    int combinedFlag = instanceFlag | publicFlag;
        #    System.Reflection.BindingFlags propertyReflectFlags;
        #    System.Reflection.PropertyInfo propInfo;
        #    anytype propertyValue;
        #    CLRObject clrPropertyValue;
        #    System.Object nullIndex;
        #
        #    id = workItem.get_Id();
        #    title = workItem.get_Title();
        #
        #    target.ID = id;
        #    target.Title = title;
        #
        #    clrWorkItemType = workItem.GetType();
        #    if (clrWorkItemType != null)
        #    {
        #
        #        propertyReflectFlags = System.Reflection.BindingFlags::Default;
        #        propertyReflectFlags = System.Enum::ToObject(propertyReflectFlags.GetType(), combinedFlag);
        #
        #        // BP Deviation Documented
        #        nullIndex = new System.Object[0]();
        #
        #        propInfo = clrWorkItemType.GetProperty('State', propertyReflectFlags);
        #        if (propInfo != null && propInfo.get_CanRead())
        #        {
        #            clrPropertyValue = propInfo.GetValue(workItem, nullIndex);
        #            PropertyValue = CLRInterop::getAnyTypeForObject(clrPropertyValue);
        #
        #            target.State = any2str(propertyValue);
        #        }
        #
        #        propInfo = clrWorkItemType.GetProperty('WorkItemType', propertyReflectFlags);
        #        if (propInfo != null && propInfo.get_CanRead())
        #        {
        #            clrPropertyValue = propInfo.GetValue(workItem, nullIndex);
        #            PropertyValue = CLRInterop::getAnyTypeForObject(clrPropertyValue);
        #
        #            target.Type = any2str(propertyValue);
        #        }
        #    }
        #
        #    target.insert();
        #
        #    if (workItemsCache.GetById(id) == null)
        #    {
        #        workItemsCache.Add(workItem);
        #    }
        #}
      ENDSOURCE
      SOURCE #new
        #/// <summary>
        #/// Initializes a new instance of the <c>SysVersionControlWorkItemProviderTFS</c> class by using the specified connection data.
        #/// </summary>
        #/// <param name="connectionManager">The connection data to initialize the object.</param>
        #public void new(Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.ConnectionManagerProxy connectionManager)
        #{
        #    workItemStoreProxy = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemStoreProxy(connectionManager);
        #    workItemsCache = new Microsoft.Dynamics.AX.Framework.TeamFoundationServerFacade.WorkItemProxyCollection();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlChangeContents
  PROPERTIES
    Name                #SysVersionControlChangeContents
    Origin              #{46FB46BF-5B8A-4CBD-9FDB-00B3FE7A50D7}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControlTmpChange change;
      #    SysVersionControlTmpItem contentsItem;
      #}
    ENDSOURCE
    SOURCE #fetchData
      #//AOSRunmode::Client
      #void fetchData(SysVersionControlChangeNumber _changeNumber, utcdatetime _changeDateTime, SysVersionControlItemComment _changeComments)
      #{
      #    SysVersionControlTmpItem contentsAddition;
      #
      #    startLengthyOperation();
      #
      #    //Remove already fetched data
      #    delete_from contentsItem;
      #
      #    contentsAddition = versioncontrol.getChangeNumberContents(_changeNumber, _changeDateTime, _changeComments);
      #
      #    while select contentsAddition
      #    {
      #        contentsItem.data(contentsAddition);
      #        contentsItem.insert();
      #    }
      #    contents_ds.executeQuery();
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #
      #    if (SysVersionControlParameters::find().vcsEnabled == EnableDisable::Disable)
      #    {
      #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
      #    }
      #
      #    super();
      #
      #    aotImage.imageList(new ImageListAppl_Aot().imageList());
      #
      #    if (sysVersionControlSystem && !sysVersionControlSystem.supportChangeVersion())
      #    {
      #        overview_Version.visible(false);
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SysVersionControlTmpChange callerChangeItem;
      #    SysVersionControlTmpItem   callerItem;
      #    utcdatetime dateTimeChange;
      #
      #    // BP deviation documented:
      #    contents.setTmp();
      #    contents.checkRecord(false);
      #    contents.setTmpData(contentsItem);
      #
      #    if (element.args() &&
      #        element.args().record())
      #    {
      #        if (element.args().record() is SysVersionControlTmpChange)
      #        {
      #            callerChangeItem = element.args().record() as SysVersionControlTmpChange;
      #            dateTimeChange = DateTimeUtil::newDateTime(callerChangeItem.vcsDate, callerChangeItem.vcsTime);
      #            this.fetchData(callerChangeItem.ChangeNumber, dateTimeChange, callerChangeItem.Comment);
      #        }
      #        else if (element.args().record() is SysVersionControlTmpItem)
      #        {
      #            callerItem = element.args().record() as SysVersionControlTmpItem;
      #            dateTimeChange = DateTimeUtil::newDateTime(callerItem.vcsDate, callerItem.vcsTime);
      #            this.fetchData(callerItem.ChangeNumber, dateTimeChange, callerItem.Comment);
      #        }
      #    }
      #    super();
      #
      #    if (contents)
      #        buttonGroup.enabled(true);
      #    else
      #        buttonGroup.enabled(false);
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #Contents
          Table               #SysVersionControlTmpItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #    ret = super();
          #
          #    element.lockWindowUpdate(true);
          #    if (contents)
          #    {
          #        buttonGroup.enabled(true);
          #        if (contents.getControllable() is SysTreeNode)
          #        {
          #            sysCompare.enabled(true);
          #            openNewWindow.enabled(true);
          #        }
          #        else
          #        {
          #            sysCompare.enabled(false);
          #            openNewWindow.enabled(false);
          #        }
          #
          #    }
          #    else
          #    {
          #        buttonGroup.enabled(false);
          #    }
          #
          #    element.lockWindowUpdate(false);
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #linkActive
          #public void linkActive()
          #{
          #    SysVersionControlTmpChange callerChange;
          #    SysVersionControlTmpItem callerItem;
          #    utcdatetime dateTimeChange;
          #
          #    super();
          #
          #    if (element.args() &&
          #        element.args().record())
          #    {
          #        if (element.args().record() is SysVersionControlTmpChange)
          #        {
          #            callerChange = element.args().record() as SysVersionControlTmpChange;
          #            dateTimeChange = DateTimeUtil::newDateTime(callerChange.vcsDate, callerChange.vcsTime);
          #            element.fetchData(callerChange.ChangeNumber, dateTimeChange, callerChange.Comment);
          #        }
          #        else if (element.args().record() is SysVersionControlTmpItem)
          #        {
          #            callerItem = element.args().record() as SysVersionControlTmpItem;
          #            dateTimeChange = DateTimeUtil::newDateTime(callerItem.vcsDate, callerItem.vcsTime);
          #            element.fetchData(callerItem.ChangeNumber, dateTimeChange, callerItem.Comment);
          #        }
          #    }
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS14861
      TitleDatasource     #Contents
      WindowType          #Workspace
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #CopyOfGrid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          VerticalSpacing     #4
          ElementPosition     #1073741823
          HierarchyParent     #OverviewTab
          DataSource          #Contents
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Overview
          ElementPosition     #1610612734
          HierarchyParent     #CopyOfGrid
          BackgroundColor     #Window background
          DataSource          #Contents
          DataGroup           #ChangelistGrid
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS30351
          ElementPosition     #1610612734
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #OverviewTab
          VerticalSpacing     #0
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #OpenNewWindow
          AutoDeclaration     #Yes
          HelpText            #@SYS85924
          ElementPosition     #2013265918
          HierarchyParent     #ButtonGroup
          Text                #@SYS53405
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    contents.openNewWindow();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ViewFile
          HelpText            #@SYS85923
          ElementPosition     #2080374782
          HierarchyParent     #ButtonGroup
          Text                #@SYS85921
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    contents.viewFile();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Overview_Version
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #Overview
          DataSource          #Contents
          DataField           #Version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #sysCompare
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          DataSource          #Contents
          MenuItemType        #Action
          MenuItemName        #sysCompare
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlGet
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          MultiSelect         #Yes
          MenuItemType        #Action
          MenuItemName        #SysVersionControlGet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlItemHistory
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          MenuItemName        #SysVersionControlItemHistory
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #AOTImage
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #16
          Height              #16
          ElementPosition     #1073741823
          HierarchyParent     #CopyOfGrid
          BackStyle           #Transparent
          ShowLabel           #No
          DataSource          #Contents
          DataField           #ImageRes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlChangesHistory
  PROPERTIES
    Name                #SysVersionControlChangesHistory
    Origin              #{C607CB28-1B65-480B-A343-44A6E67FAE00}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControlTmpChange change;
      #    SysVersionControlTmpItem contentsItem;
      #}
    ENDSOURCE
    SOURCE #fetchData
      #void fetchData()
      #{
      #    startLengthyOperation();
      #
      #    change = versioncontrol.getChangesHistory();
      #
      #    // BP deviation documented
      #    changes.setTmp();
      #    changes.checkRecord(false);
      #    changes.setTmpData(change);
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    if (SysVersionControlParameters::find().vcsEnabled == EnableDisable::Disable)
      #    {
      #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
      #    }
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    this.fetchData();
      #
      #    // BP deviation documented
      #    contents.setTmp();
      #    contents.checkRecord(false);
      #    contents.setTmpData(contentsItem);
      #
      #    super();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #Changes
          Table               #SysVersionControlTmpChange
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpChange)).addSortField(fieldnum(SysVersionControlTmpChange, ChangeNumber),SortOrder::Descending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #Contents
          Table               #SysVersionControlTmpItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #Changes
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    Contents Changes
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS69682
      TitleDatasource     #Changes
      WindowType          #Workspace
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1879048190
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          VerticalSpacing     #4
          ElementPosition     #1073741823
          HierarchyParent     #OverviewTab
          DataSource          #Changes
          DataGroup           #ChangesHistoryGrid
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ChangelistHeader
          ElementPosition     #1073741823
          HierarchyParent     #GeneralTab
          DataSource          #Changes
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
          DataGroup           #ChangelistHeader
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CommentGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #GeneralTab
          DataSource          #Changes
          AlignChild          #No
          DataGroup           #Comment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS35017
          ElementPosition     #1610612734
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #GeneralTab
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #OverviewTab
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlChangeContents
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          MenuItemName        #SysVersionControlChangeContents
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysVersionControlTmpItem_Comment
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #CommentGroup
          MultiLine           #Yes
          ShowLabel           #No
          DataSource          #Changes
          DataField           #Comment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlCheckedOut
  PROPERTIES
    Name                #SysVersionControlCheckedOut
    Origin              #{004BC647-42A1-48E5-A3FC-4DFF5DFDB09C}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControlTmpItem item;
      #}
    ENDSOURCE
    SOURCE #changeList
      #public SysVersionControlChangeListId changeList()
      #{
      #    return changeListId.text();
      #}
    ENDSOURCE
    SOURCE #fetchData
      #void fetchData(boolean _firsttime = false, str _changeList = "" )
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #    SysVersionControlChangeLists sysVersionControlChangeLists = sysVersionControlSystem as SysVersionControlChangeLists;
      #
      #    if(sysVersionControlChangeLists && _changeList)
      #    {
      #        item = sysVersionControlChangeLists.getPendingChangeListContents(_changeList);
      #    }
      #    else if (sysVersionControlSystem)
      #    {
      #        item = sysVersionControlSystem.getCheckedOutItems();
      #    }
      #    else
      #    {
      #        item = null;
      #    }
      #
      #    // BP deviation documented
      #    sysVersionControlTmpItem.setTmp();
      #    sysVersionControlTmpItem.checkRecord(false);
      #    sysVersionControlTmpItem.setTmpData(item);
      #
      #    if (!_firsttime)
      #    {
      #        sysVersionControlTmpItem_ds.research();
      #    }
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #
      #    if (SysVersionControlParameters::find().vcsEnabled == EnableDisable::Disable)
      #    {
      #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
      #    }
      #
      #    super();
      #
      #    aotImage.imageList(new ImageListAppl_Aot().imageList());
      #
      #    if (sysVersionControlSystem)
      #    {
      #        if (!sysVersionControlSystem.supportReviews())
      #        {
      #            sysVersionControlReview.visible(false);
      #        }
      #        if (!sysVersionControlSystem.supportPendingChangeLists())
      #        {
      #            changeListId.visible(false);
      #        }
      #        if (!sysVersionControlSystem.supportChangeVersion())
      #        {
      #            overview_Version.visible(false);
      #        }
      #        if (!sysVersionControlSystem.supportImportOfPendingElements())
      #        {
      #            importList.visible(false);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    this.fetchData();
      #    super();
      #    sysVersionControlCheckIn.enabled(sysVersionControlTmpItem != null);
      #    sysVersionControlUndoCheckOut.enabled(sysVersionControlTmpItem != null);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpItem
          Table               #SysVersionControlTmpItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret = super();
          #
          #    sysVersionControlCheckIn.enabled(sysVersionControlTmpItem != null);
          #    sysVersionControlUndoCheckOut.enabled(sysVersionControlTmpItem != null);
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, vcsDate),SortOrder::Descending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS85738
      TitleDatasource     #SysVersionControlTmpItem
      WindowType          #Workspace
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1879048189
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup1
          Left                #Auto (right)
          ElementPosition     #1610612734
          HierarchyParent     #OverviewTab
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          VerticalSpacing     #4
          ElementPosition     #1073741823
          HierarchyParent     #OverviewTab
          DataSource          #SysVersionControlTmpItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Identification
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #GeneralTab
          DataSource          #SysVersionControlTmpItem
          DataGroup           #Identification
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Overview
          ElementPosition     #1610612734
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataGroup           #ChangelistGrid
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #ImportList
          AutoDeclaration     #Yes
          HelpText            #@SYS99902
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup1
          Text                #@SYS54759
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS35017
          ElementPosition     #1610612733
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #GeneralTab
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #OverviewTab
          VerticalSpacing     #0
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ImportAll
          HelpText            #@SYS99905
          ElementPosition     #1073741823
          HierarchyParent     #ImportList
          Text                #@SYS99903
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
            #    ;
            #
            #    if(sysVersionControlSystem)
            #        sysVersionControlSystem.importLocalItems(sysVersionControlTmpItem);
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ImportSelected
          HelpText            #@SYS99906
          ElementPosition     #1610612734
          HierarchyParent     #ImportList
          Text                #@SYS99904
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysVersionControlTmpItem selectedDSItem, selectedItems;
            #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
            #
            #    if (sysVersionControlSystem)
            #    {
            #        if (sysVersionControlTmpItem_DS.anyMarked())
            #        {
            #            selectedDSItem = sysVersionControlTmpItem_DS.getFirst(true);
            #            while (selectedDSItem)
            #            {
            #                selectedItems.data(selectedDSItem);
            #                selectedItems.insert();
            #                selectedDSItem = sysVersionControlTmpItem_DS.getNext();
            #            }
            #        }
            #        else
            #        {
            #            selectedItems.data(SysVersionControlTmpItem);
            #            selectedItems.insert();
            #        }
            #        sysVersionControlSystem.importLocalItems(selectedItems);
            #    }
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Refresh
          HelpText            #@SYS85922
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          Text                #@SYS29018
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    if(changeListId.visible())
            #        element.fetchData(false,changeListId.valueStr());
            #    else
            #        element.fetchData();
            #
            #    sysVersionControlCheckIn.enabled(sysVersionControlTmpItem != null);
            #    sysVersionControlUndoCheckOut.enabled(sysVersionControlTmpItem != null);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Overview_Version
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlCheckIn
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          MultiSelect         #Yes
          MenuItemName        #SysVersionControlCheckIn
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlCreateProject
          ElementPosition     #2013265918
          HierarchyParent     #ButtonGroup
          MenuItemType        #Action
          MenuItemName        #SysVersionControlCreateProject
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlReview
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          MultiSelect         #Yes
          MenuItemName        #SysVersionControlReview
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlUndoCheckOut
          AutoDeclaration     #Yes
          Left                #Auto (right)
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup1
          MenuItemType        #Action
          MenuItemName        #SysVersionControlUndoCheckOut
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.fetchData();
            #    sysVersionControlCheckIn.enabled(sysVersionControlTmpItem != null);
            #    sysVersionControlUndoCheckOut.enabled(sysVersionControlTmpItem != null);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ChangeListId
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          LookupButton        #Always
          ExtendedDataType    
            ARRAY 
              #SysVersionControlChangeListId
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    FormRun formRun = ClassFactory::formRunClassOnClient(new Args(formstr(SysVersionControlPendingChangeList)));
            #
            #    formRun.init();
            #    this.performFormLookup(formRun);
            #}
          ENDSOURCE
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    element.fetchData(false, changeListId.valueStr());
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Identification_Filename
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #Identification
          DataSource          #SysVersionControlTmpItem
          DataField           #Filename
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Identification_ItemPath
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #Identification
          DataSource          #SysVersionControlTmpItem
          DataField           #ItemPath
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #AOTImage
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #16
          Height              #16
          ElementPosition     #1073741823
          HierarchyParent     #Grid
          BackStyle           #Transparent
          ShowLabel           #No
          DataSource          #SysVersionControlTmpItem
          DataField           #ImageRes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlCheckIn
  PROPERTIES
    Name                #SysVersionControlCheckIn
    Origin              #{0B180000-0000-1000-6C98-A7ECEC045D6B}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControlTmpItem            item;
      #    SysVersionControlTmpWorkItems       tmpWorkItems;
      #    SysVersionControlAction             action;
      #    SysVersionControlWorkItemProvider   workItemProvider;
      #    SysFormSplitter_Y                   formSplitter;
      #
      #    // Controls whether or not the form should have modal behaviour
      #    boolean                             setFormToModal;
      #    boolean                             workItemsActivatedFirstTime;
      #
      #    SysVersionControlChangeListId       changeList;
      #}
    ENDSOURCE
    SOURCE #addWorkItemById
      #public void addWorkItemById(SysVersionControlWorkItemId idToAdd)
      #{
      #    SysVersionControlTmpWorkItems addedItem;
      #
      #    addedItem = workItemProvider.getItemById(idToAdd);
      #
      #    if (SysVersionControlTmpWorkItems::numberOfWorkItems(addedItem) == 0)
      #    {
      #        warning("@SYS341267");
      #    }
      #    else
      #    {
      #        select firstonly addedItem;
      #
      #        tmpWorkItems.id = addedItem.id;
      #        tmpWorkItems.Title = addedItem.Title;
      #        tmpWorkItems.State = addedItem.State;
      #        tmpWorkItems.Type = addedItem.Type;
      #
      #        tmpWorkItems.insert();
      #
      #        sysVersionControlTmpWorkItems_ds.executeQuery();
      #        sysVersionControlTmpWorkItems_ds.findRecord(tmpWorkItems);
      #    }
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    if (workItemProvider != null)
      #    {
      #        workItemProvider.flushCache();
      #    }
      #    super();
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    SysVersionControlTmpItem localitem;
      #    SysVersionControlReviews review;
      #    boolean closeForm = true;
      #;
      #    //
      #    // Remove deselected items from list
      #    // and store them in local variable
      #    //
      #    while select item
      #        where item.Selected == false
      #    {
      #        localitem.data(item);
      #        localitem.insert();
      #        item.delete();
      #    }
      #
      #    try
      #    {
      #        switch (action)
      #        {
      #            case SysVersionControlAction::CheckIn:
      #                if (gatedCheckin.value())
      #                    versioncontrol.checkInChangelist(item, '', changeList, tmpWorkItems);
      #                else
      #                    versioncontrol.checkInChangelist(item, comment.valueStr(), changeList, tmpWorkItems);
      #                break;
      #
      #            case SysVersionControlAction::Review:
      #                review = versioncontrol.parmSysVersionControlSystem() as SysVersionControlReviews;
      #                if (review)
      #                    review.reviewChangeList(item, comment.valueStr(), filename.valueStr());
      #                break;
      #        }
      #    }
      #    catch
      #    {
      #        //
      #        // If something failed, reinsert the deselected items,
      #        // and keep the form running.
      #        //
      #
      #        while select localitem
      #        {
      #            item.data(localitem);
      #            item.insert();
      #        }
      #        closeForm = false;
      #    }
      #    if (closeForm)
      #    {
      #        super();
      #    }
      #}
    ENDSOURCE
    SOURCE #fetchData
      #void fetchData(boolean _firsttime = false)
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #    SysVersionControlChangeLists sysVersionControlChangeLists = sysVersionControlSystem as SysVersionControlChangeLists;
      #
      #    if(sysVersionControlChangeLists && changeList)
      #    {
      #        item = sysVersionControlChangeLists.getPendingChangeListContents(changeList);
      #    }
      #    else
      #    {
      #        item = versioncontrol.getCheckedOutItems();
      #    }
      #
      #    if (element.args() &&
      #        element.args().caller())
      #    {
      #        // By default select all items
      #        this.setSelected(true);
      #    }
      #    else
      #    {
      #        // Started from AOT context menu - only select the items from the AOT
      #        this.setSelectedAotElements();
      #    }
      #
      #    // BP deviation documented
      #    sysVersionControlTmpItem.setTmp();
      #    sysVersionControlTmpItem.checkRecord(false);
      #    sysVersionControlTmpItem.setTmpData(item);
      #    if (!_firsttime)
      #        sysVersionControlTmpItem_ds.executeQuery();
      #}
    ENDSOURCE
    SOURCE #filenameLookupFileName
      #str filenameLookupFileName()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupFilter
      #FilenameFilter filenameLookupFilter()
      #{
      #    SysVersionControlReviews review =versioncontrol.parmSysVersionControlSystem() as SysVersionControlReviews;
      #
      #    if (review)
      #        return review.reviewFilenameLookupFilter();
      #    return conNull();
      #}
    ENDSOURCE
    SOURCE #filenameLookupInitialPath
      #str filenameLookupInitialPath()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupTitle
      #str filenameLookupTitle()
      #{
      #    return "@SYS88311";
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem vcs = versioncontrol.parmSysVersionControlSystem();
      #    Object caller;
      #
      #    element.args().record(null);
      #    super();
      #    aotImage.imageList(new ImageListAppl_Aot().imageList());
      #
      #    this.initializeWorkItems(vcs);
      #
      #    if (element.args().parmEnumType() == enumnum(SysVersionControlAction))
      #    {
      #        action = element.args().parmEnum();
      #
      #        // If parm not empty, then the form should have modal behaviour
      #        if (element.args().parm())
      #        {
      #            setFormToModal = str2enum(setFormToModal, element.args().parm());
      #        }
      #
      #        switch (action)
      #        {
      #            case SysVersionControlAction::Review:
      #                element.design().caption("@SYS60543");
      #                filename.visible(true);
      #                break;
      #
      #            default:
      #                if (vcs && vcs.supportCheckInWizard())
      #                {
      #                    gatedCheckin.visible(true);
      #                    //Check and disable the 'use checkin wizard' check box so checkins are forced through the checkin wizard.
      #                    //Also disable the change description box because it should be disabled when using the checkin wizard.
      #                    gatedCheckin.value(1);
      #                    gatedCheckin.enabled(false);
      #                    comment.visible(false);
      #                }
      #                break;
      #        }
      #
      #        if (vcs && !vcs.supportChangeVersion())
      #        {
      #            overview_Version.visible(false);
      #        }
      #    }
      #    else
      #    {
      #        throw error(Error::missingParameter(element));
      #    }
      #
      #    caller = element.args().caller() as FormRun;
      #    if (caller &&
      #        formHasMethod(caller, identifierstr(changeList)))
      #    {
      #        changeList = caller.changeList();
      #    }
      #}
    ENDSOURCE
    SOURCE #initializeWorkItems
      #private void initializeWorkItems(SysVersionControlSystem vcs)
      #{
      #    workItemsActivatedFirstTime = false;
      #    workItemProvider = vcs.workItemProvider();
      #    if (workItemProvider == null)
      #    {
      #        workItems.visible(false);
      #    }
      #    else
      #    {
      #        workItemProvider.flushCache();
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    this.fetchData();
      #
      #    super();
      #
      #    if (setFormToModal)
      #    {
      #        element.wait(setFormToModal);
      #    }
      #}
    ENDSOURCE
    SOURCE #setSelected
      #void setSelected(boolean _selected)
      #{
      #    while select forupdate item
      #    {
      #        item.Selected = _selected;
      #        item.update();
      #    }
      #}
    ENDSOURCE
    SOURCE #setSelectedAotElements
      #void setSelectedAotElements()
      #{
      #    LastAotSelection lastAotSelection = new LastAotSelection();
      #    TreeNode treeNode;
      #
      #    treeNode = lastAotSelection.first();
      #
      #    element.setSelected(treeNode == null);
      #
      #    while (treeNode)
      #    {
      #        select forupdate item
      #            where item.ItemPath == treeNode.treeNodePath();
      #
      #        if (item)
      #        {
      #            item.Selected = true;
      #            item.update();
      #        }
      #
      #        treeNode = lastAotSelection.next();
      #    }
      #
      #    sysVersionControlTmpItem_ds.executeQuery();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpItem
          Table               #SysVersionControlTmpItem
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateDelete
          #public boolean validateDelete()
          #{
          #    //
          #    // Do not display warning dialog, as this is a temporary form
          #    //
          #    return true;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tableNum(SysVersionControlTmpItem)).addSortField(fieldNum(SysVersionControlTmpItem, vcsDate),SortOrder::Descending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpWorkItems
          Table               #SysVersionControlTmpWorkItems
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      Caption             #@SYS85680
      WindowType          #Workspace
      SetCompany          #No
      BackgroundColor     #Window background
      TopMargin           #0
      BottomMargin        #0
      LeftMargin          #0
      RightMargin         #0
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #DialogCommit
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #SelectGrp
          ElementPosition     #1610612733
          HierarchyParent     #ButtomGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #ButtomGroup
          ShowRowLabels       #No
          DataSource          #SysVersionControlTmpItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #WorkItemsList
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #WorkItems
          ShowRowLabels       #No
          DataSource          #SysVersionControlTmpWorkItems
          DataGroup           #CheckInActionData
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ButtomGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #ModelElements
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CommentGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #TopGroup
          Caption             #@SYS7576
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogCommit
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogContent
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Style               #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ItemQueryGroup
          ElementPosition     #1073741822
          HierarchyParent     #WorkItems
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Overview
          AllowEdit           #No
          ElementPosition     #1717986916
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataGroup           #ChangelistGrid
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopGroup
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #ModelElements
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #MainTab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #ModelElements
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #MainTab
          Caption             #@SYS341269
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #WorkItems
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #MainTab
          Caption             #@SYS341266
        ENDPROPERTIES
        
        METHODS
          SOURCE #fetchWorkItemsData
            #private void fetchWorkItemsData()
            #{
            #    tmpWorkItems = workItemProvider.getItemsAssignedToMe();
            #    //BP Deviation documented
            #    sysVersionControlTmpWorkItems.setTmp();
            #    sysVersionControlTmpWorkItems.checkRecord(false);
            #    sysVersionControlTmpWorkItems.setTmpData(tmpWorkItems);
            #    sysVersionControlTmpWorkItems_ds.executeQuery();
            #}
          ENDSOURCE
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    super();
            #
            #    if (workItemsActivatedFirstTime == false)
            #    {
            #        this.fetchWorkItemsData();
            #        workItemsActivatedFirstTime = true;
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #AddToList
          HelpText            #@SYS341271
          ElementPosition     #1610612734
          HierarchyParent     #ItemQueryGroup
          Text                #@SYS341270
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysVersionControlWorkItemId idToAdd;
            #
            #    super();
            #
            #    idToAdd = workItemIdToAdd.value();
            #
            #    if (tmpWorkItems.containsItemById(idToAdd))
            #    {
            #        warning("@SYS341268");
            #    }
            #    else
            #    {
            #        element.addWorkItemById(idToAdd);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SelectAll
          HelpText            #@SYS111701
          ElementPosition     #1073741822
          HierarchyParent     #SelectGrp
          Text                #@SYS11696
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    element.setSelected(true);
            #    sysVersionControlTmpItem_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SelectNone
          HelpText            #@SYS111702
          ElementPosition     #1610612733
          HierarchyParent     #SelectGrp
          Text                #@SYS1369
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    element.setSelected(false);
            #    sysVersionControlTmpItem_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #GatedCheckIn
          AutoDeclaration     #Yes
          Visible             #No
          HelpText            #@SYS90671
          ElementPosition     #1717986916
          HierarchyParent     #TopGroup
          Label               #@SYS90670
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #    comment.allowEdit(!this.value());
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SysVersionControlTmpItem_Selected
          ElementPosition     #858993458
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataField           #Selected
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandOk
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          DefaultButton       #Yes
          Command             #263
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    if (!comment.valueStr() && !gatedCheckin.value())
            #    {
            #        throw error(strFmt("@SYS84753","@SYS85716"));
            #    }
            #
            #    if (action == SysVersionControlAction::Review &&
            #        !filename.valueStr())
            #    {
            #        throw error(strFmt("@SYS84753","@SYS53125"));
            #    }
            #
            #    //
            #    // Verify at least one file is selected
            #    //
            #    select count(RecId) from item
            #        where item.Selected ==true;
            #
            #    if (item.RecId == 0)
            #    {
            #        throw error("@SYS111699");
            #    }
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Overview_Version
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #WorkItemIdToAdd
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ItemQueryGroup
          ExtendedDataType    
            ARRAY 
              #SysVersionControlWorkItemId
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #WorkItemsList_ID
          AllowEdit           #No
          ElementPosition     #1073741823
          HierarchyParent     #WorkItemsList
          DataSource          #SysVersionControlTmpWorkItems
          DataField           #ID
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Comment
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #CommentGroup
          DisplayHeight       #5
          MultiLine           #Yes
          ShowLabel           #No
          Mandatory           #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Filename
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          ElementPosition     #858993458
          HierarchyParent     #TopGroup
          Mandatory           #Yes
          ExtendedDataType    
            ARRAY 
              #FilenameSave
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WorkItemsList_State
          AllowEdit           #No
          ElementPosition     #1610612733
          HierarchyParent     #WorkItemsList
          DataSource          #SysVersionControlTmpWorkItems
          DataField           #State
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WorkItemsList_Type
          AllowEdit           #No
          ElementPosition     #1879048188
          HierarchyParent     #WorkItemsList
          DataSource          #SysVersionControlTmpWorkItems
          DataField           #Type
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #AOTImage
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #16
          Height              #16
          ElementPosition     #1288490187
          HierarchyParent     #Grid
          BackStyle           #Transparent
          ShowLabel           #No
          DataSource          #SysVersionControlTmpItem
          DataField           #ImageRes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlItemHistory
  PROPERTIES
    Name                #SysVersionControlItemHistory
    Origin              #{1727EE45-E35C-45ED-99C0-0E54740D636D}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControllable controllable;
      #    SysVersionControlTmpItem item;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #
      #    if (SysVersionControlParameters::find().vcsEnabled == EnableDisable::Disable)
      #    {
      #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
      #    }
      #
      #    super();
      #
      #    if (sysVersionControlSystem)
      #    {
      #        if(!sysVersionControlSystem.supportSubmittedChangeLists())
      #        {
      #            gridOverview_ChangeNumber.visible(false);
      #            sysVersionControlChangeContents.visible(false);
      #        }
      #
      #        if (!sysVersionControlSystem.supportSyncLabel())
      #        {
      #            gridOverview_Label.visible(false);
      #        }
      #
      #        if (!sysVersionControlSystem.supportChangeVersion())
      #        {
      #            gridOverview_Version.visible(false);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SysContextMenu sysContextMenu;
      #    SysVersionControlTmpItem callerItem;
      #    SysDictClass sysDictClass;
      #
      #    if (SysContextMenu::startedFrom(element.args()))
      #    {
      #        sysContextMenu = element.args().parmObject();
      #        controllable   = SysTreeNode::newTreeNode(sysContextMenu.getFirstNode());
      #    }
      #    else
      #    {
      #        if (element.args() &&
      #            SysDictClass::isEqualOrSuperclass(classidget(element.args().caller()), classnum(TreeNode)))
      #        {
      #            controllable   = SysTreeNode::newTreeNode(element.args().caller());
      #        }
      #        else
      #        {
      #            if (element.args() &&
      #                element.args().record() &&
      #                element.args().record() is SysVersionControlTmpItem)
      #            {
      #                callerItem   = element.args().record() as SysVersionControlTmpItem;
      #                controllable = callerItem.getControllable();
      #            }
      #            else
      #            {
      #                if (element.args() && element.args().caller())
      #                {
      #                    sysDictClass = new SysDictClass(classidget(element.args().caller()));
      #                    if (sysDictClass.isImplementing(classnum(SysVersionControllable)))
      #                    {
      #                        controllable = element.args().caller();
      #                    }
      #                }
      #            }
      #        }
      #    }
      #
      #    if (controllable)
      #    {
      #        item = versioncontrol.getItemHistory(controllable);
      #
      #        if (SysVersionControlTmpItem::hasSeveralNames(item))
      #        {
      #            overview_M_itemPathUsingObjectName.visible(true);
      #        }
      #        // BP deviation documented
      #        sysVersionControlTmpItem.setTmp();
      #        sysVersionControlTmpItem.checkRecord(false);
      #        sysVersionControlTmpItem.setTmpData(item);
      #    }
      #
      #    super();
      #
      #    if (sysVersionControlTmpItem)
      #    {
      #        buttonGroup.enabled(true);
      #        sysCompare.enabled(sysVersionControlTmpItem_ds.twoMarked());
      #    }
      #    else
      #        buttonGroup.enabled(false);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpItem
          Table               #SysVersionControlTmpItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #twoMarked
          #boolean twoMarked()
          #{
          #    SysVersionControlTmpItem tmpitem  = this.getFirst(1) as SysVersionControlTmpItem;
          #
          #    if (!tmpitem)
          #        return false;
          #
          #    tmpitem = this.getNext() as SysVersionControlTmpItem;
          #
          #    if (!tmpitem)
          #        return false;
          #
          #    tmpitem = this.getNext() as SysVersionControlTmpItem;
          #
          #    if (!tmpitem)
          #        return true;
          #
          #    return false;
          #}
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    if (sysVersionControlTmpItem)
          #    {
          #        buttonGroup.enabled(true);
          #        sysCompare.enabled(this.twoMarked());
          #    }
          #    else
          #    {
          #        buttonGroup.enabled(false);
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, vcsDate),SortOrder::Descending);
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, vcsTime),SortOrder::Descending);
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, ChangeNumber),SortOrder::Ascending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS10575
      TitleDatasource     #SysVersionControlTmpItem
      WindowType          #Workspace
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          VerticalSpacing     #4
          ElementPosition     #1073741823
          HierarchyParent     #OverviewTab
          DataSource          #SysVersionControlTmpItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Comment
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #GeneralTab
          DataSource          #SysVersionControlTmpItem
          AlignChild          #No
          DataGroup           #Comment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ModifiedBy
          ElementPosition     #1073741823
          HierarchyParent     #GeneralTab
          DataSource          #SysVersionControlTmpItem
          DataGroup           #ModifiedBy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Overview
          ElementPosition     #1073741823
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataGroup           #Overview
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS35017
          ElementPosition     #1610612734
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #GeneralTab
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #OverviewTab
          VerticalSpacing     #0
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #OpenNewWindow
          HelpText            #@SYS85924
          ElementPosition     #2013265918
          HierarchyParent     #ButtonGroup
          Text                #@SYS53405
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    sysVersionControlTmpItem.openNewWindow();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ViewFile
          HelpText            #@SYS85923
          ElementPosition     #2080374782
          HierarchyParent     #ButtonGroup
          Text                #@SYS85921
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    sysVersionControlTmpItem.viewFile();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #GridOverview_VCSDate
          ElementPosition     #1879048190
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #VCSDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INT64EDIT
        PROPERTIES
          Name                #gridOverview_ChangeNumber
          AutoDeclaration     #Yes
          ElementPosition     #2143289342
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #ChangeNumber
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #GridOverview_Version
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #sysCompare
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          MultiSelect         #Yes
          MenuItemType        #Action
          MenuItemName        #sysCompare
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlChangeContents
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          MenuItemName        #SysVersionControlChangeContents
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlGet
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          MenuItemType        #Action
          MenuItemName        #SysVersionControlGet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Comment_Comment
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #Comment
          ShowLabel           #No
          DataSource          #SysVersionControlTmpItem
          DataField           #Comment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridOverview_ActionText
          ElementPosition     #1610612734
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #ActionText
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #gridOverview_Label
          AutoDeclaration     #Yes
          ElementPosition     #2139095038
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Label
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridOverview_ShortComment
          ElementPosition     #2113929214
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #ShortComment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridOverview_User
          ElementPosition     #2080374782
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #User
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Overview_M_itemPathUsingObjectName
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #2130706430
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataMethod          #itemPathUsingObjectName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TIMEEDIT
        PROPERTIES
          Name                #GridOverview_VCSTime
          ElementPosition     #2013265918
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #VCSTime
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlNotification
  PROPERTIES
    Name                #SysVersionControlNotification
    Origin              #{8DB966AA-7097-42DF-8681-7F6D9CF7E3FA}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    int secondsElapsed;
      #    int time;
      #    COM sdResult;
      #    boolean canClose;
      #    HWND originalForegroundWindowHwnd;
      #}
    ENDSOURCE
    SOURCE #canClose
      #public boolean canClose()
      #{
      #    //
      #    // To avoid pressing ESC will close the dialog.
      #    //
      #    return canClose;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    //
      #    // Opening an invisible modal form randomizes the current focus.
      #    // get the hwnd of the foreground window
      #    //
      #    if (element.form().design().visible() == false)
      #    {
      #        originalForegroundWindowHwnd = WinAPI::getForegroundWindow();
      #    }
      #
      #    canClose = true;
      #
      #    //
      #    // Prevent infolog messages from being processed while form is open
      #    //
      #    infolog.updateViewSet(this);
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #oneSecondElapsed
      #private void oneSecondElapsed()
      #{
      #    secondsElapsed += 1;
      #
      #    if (secondsElapsed > 3 &&
      #        element.design().visible() == false)
      #    {
      #        element.design().visible(true);
      #    }
      #
      #    timeElapsed.text(strfmt("@SYS316310", secondsElapsed));
      #}
    ENDSOURCE
    SOURCE #runCommand
      #public void runCommand(str _command, COM _sdResult)
      #{
      #    str message;
      #    int infologLine;
      #    sdResult = _sdResult;
      #    info.text("@SYS316311");
      #    command.text(_command);
      #    secondsElapsed = 0;
      #    time = timenow();
      #    canClose = false;
      #    this.waitForSD();
      #    this.setTimeOut(identifierstr(setForegroundWindow), 1, true);
      #
      #    //
      #    // Wait modally
      #    //
      #    this.wait(true);
      #
      #    //
      #    // Remove the form from the UI
      #    //
      #    element.design().visible(false);
      #
      #    this.setForegroundWindow();
      #    if (secondsElapsed>10)
      #    {
      #        infologLine = InfologLine();
      #        try
      #        {
      #            message = "@SYS316311" + '\n' + _command + '\n' + timeElapsed.text();
      #            System.Diagnostics.EventLog::WriteEntry(xInfo::productName(), message);
      #        }
      #        catch
      #        {
      #            //In case of not permissions to write to event log
      #            infolog.clear(infologLine());
      #        }
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #setForegroundWindow
      #private void setForegroundWindow()
      #{
      #    if (originalForegroundWindowHwnd)
      #    {
      #        //
      #        // Opening an invisible modal form randomizes the current focus.
      #        // set the foreground window back to the original
      #        //
      #        WinAPI::setForegroundWindow(originalForegroundWindowHwnd);
      #    }
      #}
    ENDSOURCE
    SOURCE #waitForSD
      #private void waitForSD()
      #{
      #    try
      #    {
      #        if (sdResult.isFinished())
      #        {
      #            canClose = true;
      #            this.close();
      #        }
      #        else
      #        {
      #            //
      #            // Not done yet, wait a bit
      #            //
      #            this.setTimeOut(identifierstr(waitForSD), 50, true);
      #
      #            if (time != timenow())
      #            {
      #                time = timenow();
      #                this.oneSecondElapsed();
      #            }
      #        }
      #    }
      #    catch
      #    {
      #        exceptionTextFallThrough();
      #        canClose = true;
      #        this.close();
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #450
      Caption             #@SYS68312
      WindowType          #Popup
      AlwaysOnTop         #Yes
      HideToolbar         #Yes
      SetCompany          #No
      StatusBarStyle      #None
      Scrollbars          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL STATICTEXT
        PROPERTIES
          Name                #Command
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          Text                #
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #Info
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #536870911
          Text                #
          Bold                #Bold
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TimeElapsed
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          Text                #
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlParametersAdm
  PROPERTIES
    Name                #SysVersionControlParametersAdm
    Origin              #{47C5009C-EE21-4EC7-8437-C38136994D69}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    #SysVersionControlSourceDepotXML
      #    #SysVersionControl
      #    #Properties
      #    #file
      #
      #    FilenameFilter fileNameLookupFilter;
      #    str fileNameLookupName;
      #    str fileNameLookupTitle;
      #    str filePathLookupTitle;
      #
      #    SysVersionControlSystem         sysVersionControlSystem;
      #    SysVersionControlTmpItem        defItem;
      #    SysVersionControlDefFile        defFile;
      #    SysVersionControlParameters     sysVersionControlParameters;
      #}
      #
    ENDSOURCE
    SOURCE #activatePluginTab
      #void activatePluginTab(SysVersionControlType type)
      #{
      #    FormControl tabpage;
      #    SysDictEnum typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
      #    Object      obj;
      #    int i;
      #
      #    fileNameLookupFilter = ['',''];
      #    fileNameLookupName = '';
      #    fileNameLookupTitle = '';
      #    filePathLookupTitle = '';
      #
      #    for(i=1; i<=tab.controlCount(); i++)
      #    {
      #        tabpage = tab.controlNum(i);
      #        if(match('<Plugin',tabpage.name()))
      #        {
      #            if ( tabpage.name() == 'Plugin_' + typeEnum.value2Symbol(type))
      #            {
      #                tabpage.visible(true);
      #                if( TreeNode::findNode('\\forms\\'+this.name()+'\\Designs\\DesignList\\'+tabpage.name()+'\\methods\\setPluginSettings'))
      #                {
      #                    obj = tabpage;
      #                    obj.setPluginSettings();
      #                }
      #            }
      #            else
      #            {
      #                tabpage.visible(false);
      #            }
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #aldFolderLookup
      #public void aldFolderLookup(SysVersionControlTmpAdditionalFolders _buffer, FormControl _formControl, str _filterStr)
      #{
      #    str modelFullPath;
      #    str aldFullPath;
      #    str aldModelDefaultFullPath;
      #    str selectedFolderPath;
      #    str vcsRoot;
      #    str outOfModelAldPath;
      #    FormStringControl folderControl = _formControl as FormStringControl;
      #    System.IO.DirectoryInfo dirInfo;
      #    int numberOfDirs;
      #
      #    vcsRoot = sysVersionControlSystem.parmFolder();
      #    aldFullPath = System.IO.Path::Combine(vcsRoot, _buffer.Folder, #labelFiles, _buffer.AldLocation);
      #
      #    dirInfo = new System.IO.DirectoryInfo(aldFullPath);
      #    aldFullPath = dirInfo.get_FullName();
      #
      #    if (!System.IO.Directory::Exists(aldFullPath))
      #    {
      #        System.IO.Directory::CreateDirectory(aldFullPath);
      #    }
      #
      #    selectedFolderPath = WinAPI::browseForFolderDialog("@SYS4000767", aldFullPath);
      #
      #    if (selectedFolderPath)
      #    {
      #        aldModelDefaultFullPath = System.IO.Path::Combine(vcsRoot, _buffer.Folder, #labelFiles);
      #        dirInfo = new System.IO.DirectoryInfo(aldModelDefaultFullPath);
      #        aldModelDefaultFullPath = dirInfo.get_FullName();
      #
      #        if (selectedFolderPath == aldModelDefaultFullPath)
      #        {
      #            error(strFmt("@SYS4000781", aldModelDefaultFullPath));
      #            return;
      #        }
      #
      #        // Ald folder must exists beneath VCS root
      #        if (!strStartsWith(selectedFolderPath, vcsRoot))
      #        {
      #            error(strFmt("@SYS110339", selectedFolderPath, vcsRoot));
      #            return;
      #        }
      #
      #        modelFullPath = System.IO.Path::Combine(vcsRoot, _buffer.Folder);
      #        dirInfo = new System.IO.DirectoryInfo(modelFullPath);
      #        modelFullPath  = dirInfo.get_FullName();
      #
      #        // Ald folder is beneath model
      #        if (strStartsWith(selectedFolderPath, modelFullPath))
      #        {
      #            aldFullPath = modelFullPath + #FilePathDelimiter + #labelFiles;
      #
      #            // Beneath model\label files
      #            if (strStartsWith(selectedFolderPath, aldFullPath))
      #            {
      #               selectedFolderPath = subStr(selectedFolderPath, strLen(aldFullPath + #FilePathDelimiter) + 1, maxInt());
      #            }
      #            else
      #            {
      #                // Beneath model\<some here>
      #                selectedFolderPath = @'..\' + subStr(selectedFolderPath, strLen(modelFullPath + #FilePathDelimiter) + 1, maxInt());
      #            }
      #        }
      #        else
      #        {
      #            // Ald folder is beneath VCS root, calculate relative path to model folder
      #            // ((count of directories in model folder + 1 for "Label files") * '..\' ) + 'Selected folder' + parents
      #            outOfModelAldPath  = subStr(selectedFolderPath, strLen(vcsRoot + #FilePathDelimiter) + 1, maxInt());
      #
      #            // "label files"
      #            numberOfDirs = strSplit(_buffer.Folder, @'\').elements() + 1;
      #
      #            selectedFolderPath = strRep(@'..\', numberOfDirs);
      #
      #
      #            // selected folder
      #            selectedFolderPath += outOfModelAldPath;
      #        }
      #
      #        // If we still have a selectedFolderPath it means it has been checked and ok, otherwise it would have been empty.
      #        if (selectedFolderPath && folderControl)
      #        {
      #            _buffer.AldLocation = selectedFolderPath;
      #            folderControl.text(selectedFolderPath);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #checkFolderIsRelative
      #public boolean checkFolderIsRelative(str _subFolderPath)
      #{
      #    // Sub folder must be relative path, cannot be absolute (full path)
      #    if (match(@'^[a-zA-Z]\:\\.*', _subFolderPath))
      #    {
      #        error(strFmt("@SYS4000755", _subFolderPath));
      #        return false;
      #    }
      #    return true;
      #}
    ENDSOURCE
    SOURCE #checkSubFolderPath
      #/// <summary>
      #/// Checks if the argument _subFolderPath exists and is located beneath VCS root folder path.
      #/// </summary>
      #/// <param name="_subFolderPath">
      #/// The folder path to check.
      #/// </param>
      #/// <returns>
      #/// true if the argument subFolderPath exists and is located beneath VCS root folder path; otherwise, false.
      #/// </returns>
      #/// <remarks>
      #/// If the argument subFolderPath is relative to the VCS repository path, it concatenates the VCS repository's path and the argument
      #/// and checks the path the same way as if an absolute path was given as argument.
      #/// </remarks>
      #public boolean checkSubFolderPath(str _subFolderPath)
      #{
      #    str checkFolderPath = _subFolderPath;
      #    str vcsRoot;
      #
      #    #File
      #
      #    vcsRoot = sysVersionControlSystem.parmFolder();
      #
      #    if (checkFolderPath)
      #    {
      #        // If folder path does not exists concatenate with VCS root folder path.
      #        if (!WinAPI::folderExists(checkFolderPath))
      #        {
      #            // Concatenate vcsRoot and subFolderPath
      #            checkFolderPath = strFmt('%1%2%3', vcsRoot, #FilePathDelimiter, checkFolderPath);
      #
      #            // Check if the folder exists
      #            if (!WinAPI::folderExists(checkFolderPath))
      #            {
      #                error(strFmt("@SYS110338", checkFolderPath));
      #                return false;
      #            }
      #        }
      #
      #        // Check that the selected folder exists beneath vcs root
      #        if (!(strStartsWith(checkFolderPath, vcsRoot) && strLen(checkFolderPath) > strLen(vcsRoot)))
      #        {
      #            error(strFmt("@SYS110339", checkFolderPath, vcsRoot));
      #            return false;
      #        }
      #
      #        // Folder path to check cannot be the same as VCS rootFolder
      #        if (checkFolderPath == vcsRoot)
      #        {
      #            error(strFmt("@SYS110340", checkFolderPath, vcsRoot));
      #            return false;
      #        }
      #
      #        return true;
      #    }
      #
      #    return false;
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    if (sysVersionControlParameters && sysVersionControlSystem)
      #    {
      #        if (sysVersionControlSystem.editDefFile(this.generateXML()))
      #        {
      #            versioncontrol.init(sysVersionControlParameters);
      #        }
      #    }
      #    super();
      #}
    ENDSOURCE
    SOURCE #filenameLookupFileName
      #str filenameLookupFileName()
      #{
      #    return fileNameLookupName;
      #}
    ENDSOURCE
    SOURCE #filenameLookupFilter
      #FilenameFilter filenameLookupFilter()
      #{
      #    return fileNameLookupFilter;
      #}
    ENDSOURCE
    SOURCE #filenameLookupInitialPath
      #str filenameLookupInitialPath()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupTitle
      #str filenameLookupTitle()
      #{
      #    return fileNameLookupTitle;
      #}
    ENDSOURCE
    SOURCE #filepathLookupTitle
      #str filepathLookupTitle()
      #{
      #    return filePathLookupTitle;
      #}
    ENDSOURCE
    SOURCE #folderLookup
      #public void folderLookup(SysVersionControlTmpAdditionalFolders _buffer, FormControl _formControl, str _filterStr)
      #{
      #    str subFolderPath;
      #    str rootFolder = '';
      #    str vcsRoot;
      #    FormStringControl folderControl = _formControl as FormStringControl;
      #
      #    vcsRoot = sysVersionControlSystem.parmFolder();
      #
      #    // Get the root folder. If current record already has a subfolder, use that as the starting folder when browsing for folder.
      #    if (_buffer.RecId && _buffer.Folder)
      #    {
      #        rootFolder = strFmt('%1%2%3', vcsRoot,
      #                                      #FilePathDelimiter,
      #                                      _buffer.Folder);
      #    }
      #
      #    // If no rootFolder, use the one from vcs
      #    if (!WinAPI::folderExists(rootFolder))
      #    {
      #        rootFolder = vcsRoot;
      #    }
      #
      #    // Let the user select a sub folder and do validation
      #    subFolderPath = WinAPI::browseForFolderDialog("@SYS110341", rootFolder);
      #
      #    if (subFolderPath)
      #    {
      #        // Subtract the sub folder path from vcs root.
      #        subFolderPath = element.getSubFolderPathFromVcsRoot(subFolderPath);
      #
      #        // If we still have a subFolderPath it means it has been checked and ok, otherwise it would have been empty.
      #        if (subFolderPath && folderControl)
      #        {
      #            _buffer.Folder = subFolderPath;
      #            folderControl.text(subFolderPath);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #generatePluginXML
      #protected void generatePluginXML(XmlElement elem)
      #{
      #    FormControl tabpage;
      #    SysDictEnum             typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
      #    Object obj;
      #    int i;
      #
      #    for(i=1; i<=tab.controlCount(); i++)
      #    {
      #        tabpage = tab.controlNum(i);
      #        if(match('<Plugin',tabpage.name()))
      #        {
      #            if(tabpage.name()=='Plugin_'+typeEnum.value2Symbol(sysVersionControlParameters.vcsType))
      #            {
      #                if( TreeNode::findNode('\\forms\\'+this.name()+'\\Designs\\DesignList\\'+tabpage.name()+'\\methods\\generatePluginXML'))
      #                {
      #                    obj = tabpage;
      #                    obj.generatePluginXML(elem);
      #                    break;
      #                }
      #            }
      #        }
      #    }
      #
      #    return;
      #}
    ENDSOURCE
    SOURCE #generateXML
      #protected XmlDocument generateXML()
      #{
      #    XmlDocument             xml;
      #    XmlProcessingInstruction instr;
      #    XmlElement              topNode;
      #    XmlElement              nodeLevel1;
      #    XmlElement              nodeLevel2;
      #    SysDictEnum             typesEnum = new SysDictEnum(enumNum(UtilElementType));
      #    str                     folderName;
      #
      #    xml = new XmlDocument();
      #    instr = xml.createProcessingInstruction('xml', 'version="1.0" encoding="utf-8"');
      #    xml.appendChild(instr);
      #    topNode =  xml.appendChild(xml.createElement(#XMLVCS));
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLProject));
      #    nodeLevel1.setAttribute(#XMLValue, projectName.text());
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLBestPractice));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCompileErrors));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(compilerErrors.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCompileWarnings));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(compilerWarnings.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCompileToDos));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(compilerToDos.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLBPErrors));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(bestPracticeErrors.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLTitleCaseUpdate));
      #    nodeLevel2.setAttribute(#XMLValue, runTitleCaseUpdate.value() ? #PropertyValueYes : #PropertyValueNo);
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCheckInTestProject));
      #    nodeLevel2.setAttribute(#XMLValue, testProject.text());
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLLabel));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLLabelDefault));
      #    nodeLevel2.setAttribute(#XMLValue, labelFile.text());
      #    if (useLabelInterval.optionValue())
      #    {
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLLabelIntervalMin));
      #        nodeLevel2.setAttribute(#XMLValue, int2str(labelIntervalMin.value()));
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLLabelIntervalMax));
      #        nodeLevel2.setAttribute(#XMLValue, int2str(labelIntervalMax.value()));
      #    }
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLUnwantedObjectTypes));
      #    while select sysVersionControlTmpUnwantedTypes
      #    {
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLObjectType));
      #        nodeLevel2.setAttribute(#XMLValue, typesEnum.value2Name(sysVersionControlTmpUnwantedTypes.ObjectType));
      #    }
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLUnwantedObjectNames));
      #    while select sysVersionControlTmpUnwantedNames
      #    {
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLObjectName));
      #        nodeLevel2.setAttribute(#XMLValue, sysVersionControlTmpUnwantedNames.Name);
      #    }
      #
      #    // Additional folders
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLAdditionalFolders));
      #    while select sysVersionControlTmpAdditionalFolders
      #    {
      #        folderName = sysVersionControlTmpAdditionalFolders.Folder;
      #        if (folderName != strFmt('%1', currentAOLayer()))
      #        {
      #            nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLFolder));
      #            nodeLevel2.setAttribute(#XMLValue, folderName);
      #            nodeLevel2.setAttribute(#XMLDescription, sysVersionControlTmpAdditionalFolders.Description);
      #        }
      #    }
      #
      #    // Models
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLModels));
      #    while select sysVersionControlTmpModelFolders
      #    {
      #        folderName = sysVersionControlTmpModelFolders.Folder;
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLModel));
      #        nodeLevel2.setAttribute(#XMLModelFolder, folderName);
      #        nodeLevel2.setAttribute(#XMLDescription, sysVersionControlTmpModelFolders.Description);
      #        nodeLevel2.setAttribute(#XMLModelAldLocation, sysVersionControlTmpModelFolders.AldLocation);
      #    }
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLPluginSettings));
      #    this.generatePluginXML(nodeLevel1);
      #
      #    return xml;
      #}
    ENDSOURCE
    SOURCE #getSubFolderPathFromVcsRoot
      #/// <summary>
      #/// Substracts the sub folder path from VCS root folder path.
      #/// </summary>
      #/// <param name="_subFolderPath">
      #/// A relative or absolute path.
      #/// </param>
      #/// <returns>
      #/// Relative path to the VCS root folder path.
      #/// </returns>
      #/// <remarks>
      #/// Returns blank if sub folder path does not exists.
      #/// </remarks>
      #public str getSubFolderPathFromVcsRoot(str _subFolderPath)
      #{
      #    str vcsRoot = sysVersionControlSystem.parmFolder();
      #    #File
      #
      #    if (element.checkSubFolderPath(_subFolderPath))
      #    {
      #         // Subtract the sub folder path from vcs root
      #        if (_subFolderPath && WinAPI::folderExists(_subFolderPath) && vcsRoot)
      #        {
      #            return subStr(_subFolderPath, strLen(vcsRoot + #FilePathDelimiter) + 1, maxInt());
      #        }
      #    }
      #    return '';
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    Set unwantedNames;
      #    Set unwantedTypes;
      #
      #    Map addFolders;
      #    Map addModels;
      #
      #    SetEnumerator senum;
      #    MapEnumerator menum;
      #    str currentLayer = strFmt('%1', currentAOLayer());
      #    SysInfoAction_Formrun  actionRun;
      #
      #    super();
      #
      #    sysVersionControlParameters = SysVersionControlParameters::find();
      #
      #    if (sysVersionControlParameters.vcsEnabled == EnableDisable::Disable)
      #    {
      #        actionRun = SysInfoAction_Formrun::newFormname(formStr(SysVersionControlParametersDev));
      #        error("@SYS120744" + ' ' + strFmt("@SYS120745", "@SYS85914"), '', actionRun);
      #        element.closeCancel();
      #        return;
      #    }
      #
      #    // clear the base.
      #    versioncontrol.parmSysVersionControlSystem(null);
      #
      #    sysVersionControlSystem = SysVersionControlSystem::newType(sysVersionControlParameters.vcsType);
      #
      #    if (sysVersionControlSystem && sysVersionControlSystem.init(sysVersionControlParameters))
      #    {
      #        versioncontrol.parmSysVersionControlSystem(sysVersionControlSystem);
      #
      #        sysVersionControlSystem.applyGlobalSettings();
      #
      #        compilerWarnings.selection(sysVersionControlSystem.parmSettings().parmGateCompileWarnings());
      #        compilerErrors.selection(sysVersionControlSystem.parmSettings().parmGateCompileErrors());
      #        compilerToDos.selection(sysVersionControlSystem.parmSettings().parmGateCompileToDos());
      #        bestPracticeErrors.selection(sysVersionControlSystem.parmSettings().parmGateBestPracticeErrors());
      #        runTitleCaseUpdate.value(sysVersionControlSystem.parmSettings().parmRunTitleCaseUpdate());
      #        projectName.text(sysVersionControlSystem.parmProject());
      #        testProject.text(sysVersionControlSystem.parmTestProject());
      #
      #        labelFile.text(sysVersionControlSystem.parmSettings().parmDefaultLabelFile());
      #
      #        if (sysVersionControlSystem.parmSettings().parmLabelIntervalMin() ||
      #            sysVersionControlSystem.parmSettings().parmLabelIntervalMax())
      #        {
      #            useLabelInterval.optionValue(true);
      #
      #            labelIntervalMin.value(sysVersionControlSystem.parmSettings().parmLabelIntervalMin());
      #            labelIntervalMax.value(sysVersionControlSystem.parmSettings().parmLabelIntervalMax());
      #        }
      #        else
      #        {
      #            useLabelInterval.optionValue(false);
      #        }
      #
      #        unwantedNames = sysVersionControlSystem.parmUnwantedObjectNames();
      #        senum = unwantedNames.getEnumerator();
      #        while(senum.moveNext())
      #        {
      #            sysVersionControlTmpUnwantedNames.Name = senum.current();
      #            sysVersionControlTmpUnwantedNames.doInsert();
      #        }
      #        sysVersionControlTmpUnwantedNames_DS.research();
      #
      #        unwantedTypes = sysVersionControlSystem.parmUnwantedObjectTypes();
      #        senum = unwantedTypes.getEnumerator();
      #        while(senum.moveNext())
      #        {
      #            sysVersionControlTmpUnwantedTypes.ObjectType = senum.current();
      #            sysVersionControlTmpUnwantedTypes.doInsert();
      #        }
      #        sysVersionControlTmpUnwantedTypes_DS.research();
      #
      #
      #        // Insert the additional folders
      #        if (sysVersionControlSystem.supportAdditionalFolders())
      #        {
      #            addFolders = sysVersionControlSystem.parmAdditionalFolders();
      #
      #            //
      #            // Additional folders are being replaced with Models in AX 2012.
      #            // Support for configurating additional folders is kept
      #            // to allow customers to transition.
      #            //
      #            // It is not supported to use both Additional folders and Models simultaneously.
      #            //
      #            if (addFolders.elements() > 1) // The current layer is always added as an additional folder.
      #            {
      #                menum = addFolders.getEnumerator();
      #
      #                while(menum.moveNext())
      #                {
      #                    if(menum.currentKey() != currentLayer)
      #                    {
      #                        sysVersionControlTmpAdditionalFolders.Folder = menum.currentKey();
      #                        sysVersionControlTmpAdditionalFolders.Description = menum.currentValue();
      #                        sysVersionControlTmpAdditionalFolders.doInsert();
      #                    }
      #                }
      #
      #                sysVersionControlTmpAdditionalFolders_DS.research();
      #            }
      #            else
      #            {
      #                additionalSubFolders.visible(false);
      #            }
      #        }
      #        else
      #        {
      #            additionalSubFolders.visible(false);
      #        }
      #
      #        // Insert the models
      #        if (sysVersionControlSystem.supportModels())
      #        {
      #            addModels = sysVersionControlSystem.parmModelFolders();
      #            menum = addModels.getEnumerator();
      #
      #            while(menum.moveNext())
      #            {
      #                sysVersionControlTmpModelFolders.Folder = menum.currentKey();
      #                sysVersionControlTmpModelFolders.Description = menum.currentValue();
      #                sysVersionControlTmpModelFolders.AldLocation = sysVersionControlSystem.aldLocationFromFolder(sysVersionControlTmpModelFolders.Folder);
      #                sysVersionControlTmpModelFolders.doInsert();
      #            }
      #
      #            sysVersionControlTmpModelFolders_ds.research();
      #        }
      #        else
      #        {
      #            models.visible(false);
      #        }
      #
      #        this.activatePluginTab(sysVersionControlParameters.vcsType);
      #    }
      #    else
      #    {
      #        actionRun = SysInfoAction_Formrun::newFormname(formStr(SysVersionControlParametersDev));
      #        error("@SYS120746" + ' ' + strFmt("@SYS120745", "@SYS85914"), '', actionRun);
      #        element.closeCancel();
      #    }
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpUnwantedNames
          Table               #SysVersionControlTmpUnwantedNames
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpAdditionalFolders
          Table               #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Folder
            PROPERTIES
              Mandatory           #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    element.folderlookup(sysVersionControlTmpAdditionalFolders, _formControl, _filterStr);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        if (!element.checkSubFolderPath(sysVersionControlTmpAdditionalFolders.Folder))
          #        {
          #            ret = false;
          #        }
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpUnwantedTypes
          Table               #SysVersionControlTmpUnwantedTypes
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpModelFolders
          Table               #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Folder
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    element.folderlookup(sysVersionControlTmpModelFolders, _formControl, _filterStr);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AldLocation
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    element.aldFolderLookup(sysVersionControlTmpModelFolders, _formControl, _filterStr);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #    FilePath currentAldFolderFullPath;
          #    str vcsRoot;
          #    System.IO.DirectoryInfo diInfo;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        vcsRoot = sysVersionControlSystem.parmFolder();
          #
          #        if (!element.checkFolderIsRelative(sysVersionControlTmpModelFolders.Folder) ||
          #            !element.checkSubFolderPath(sysVersionControlTmpModelFolders.Folder))
          #        {
          #            ret = false;
          #        }
          #
          #        if (sysVersionControlTmpModelFolders.AldLocation)
          #        {
          #            if (!element.checkFolderIsRelative(sysVersionControlTmpModelFolders.AldLocation))
          #            {
          #                ret = false;
          #            }
          #
          #            try
          #            {
          #                currentAldFolderFullPath = System.IO.Path::Combine(vcsRoot, sysVersionControlTmpModelFolders.Folder, #labelfiles, sysVersionControlTmpModelFolders.AldLocation);
          #                diInfo = new System.IO.DirectoryInfo(currentAldFolderFullPath);
          #                currentAldFolderFullPath = diInfo.get_FullName();
          #
          #                // Check that the selected folder exists beneath vcs root
          #                if (!strStartsWith(currentAldFolderFullPath, vcsRoot))
          #                {
          #                    error(strFmt("@SYS110339", sysVersionControlTmpModelFolders.AldLocation, vcsRoot));
          #                    return false;
          #                }
          #            }
          #            catch
          #            {
          #                ret = checkFailed("@SYS4000768");
          #            }
          #        }
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS98154
      WindowType          #Workspace
      SetCompany          #No
      Columnspace         #100
      Style               #TableOfContents
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #AdditionalFoldersActionPane
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalFoldersListBodyGrp
          Style               #Strip
          DataSource          #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #AddModelsActionPane
          ElementPosition     #954437176
          HierarchyParent     #FoldersGroup
          Style               #Strip
          DataSource          #SysVersionControlTmpModelFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #UnwantedObjectNamesActionPane
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectNamesGroup
          Style               #Strip
          DataSource          #SysVersionControlTmpUnwantedNames
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #UnwantedObjectTypesActionPane
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectTypesGroup
          Style               #Strip
          DataSource          #SysVersionControlTmpUnwantedTypes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #AdditionalFoldersActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalFoldersActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #AddModelsActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #AddModelsActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #UnwantedObjectNamesActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #UnwantedObjectTypesActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #AdditionalFoldersButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalFoldersActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #Buttons
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ModelsButtonGrp
          ElementPosition     #1431655764
          HierarchyParent     #AddModelsActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #UnwantedObjectNamesButtonGrp
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #UnwantedObjectTypesButtonGrp
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #AdditionalFolders
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalFoldersListBodyGrp
          DataSource          #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #AddModels
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #FoldersGroup
          DataSource          #SysVersionControlTmpModelFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #UnwantedObjectNamesObjectNames
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectNamesGroup
          DataSource          #SysVersionControlTmpUnwantedNames
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #UnwantedObjectTypes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectTypesGroup
          DataSource          #SysVersionControlTmpUnwantedTypes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalFoldersListBodyGrp
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalSubfoldersListBody
          Caption             #@SYS94390
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalSubfoldersListBody
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalSubFolders
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalSubfoldersListTitle
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalSubFolders
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BestPractices
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #GeneralBody
          Caption             #@SYS94381
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Buttons
          Top                 #Bottom edge
          VerticalSpacing     #0
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FoldersGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #ModelsListBody
          Caption             #@SYS116817
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralBody
          ElementPosition     #1431655764
          HierarchyParent     #GeneralListBody
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListBody
          ElementPosition     #1610612733
          HierarchyParent     #GeneralTab
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListTitle
          ElementPosition     #1073741822
          HierarchyParent     #GeneralTab
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Labels
          Width               #Column width
          ElementPosition     #1789569705
          HierarchyParent     #GeneralBody
          Caption             #@SYS13322
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ModelsListBody
          ElementPosition     #1610612733
          HierarchyParent     #Models
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ModelsListTitle
          ElementPosition     #1073741822
          HierarchyParent     #Models
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SourceDepot
          ElementPosition     #1431655764
          HierarchyParent     #SourceDepotBody
          Caption             #@SYS343254
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SourceDepotBody
          ElementPosition     #1610612733
          HierarchyParent     #Plugin_SysVersionControlSourceDepot
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SourceDepotTitle
          ElementPosition     #1073741822
          HierarchyParent     #Plugin_SysVersionControlSourceDepot
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectNamesGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesListBody
          Caption             #@SYS94425
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectNamesListBody
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectNamesTab
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectNamesListTitle
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectNamesTab
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectTypesGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesListBody
          Caption             #@SYS94425
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectTypesListBody
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectTypesTab
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectTypesListTitle
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectTypesTab
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UseLabelInterval
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #Labels
          FrameType           #Edged 3D
          Caption             #@SYS300000
          FrameOptionButton   #Check
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VCSSettings
          Width               #Column width
          ElementPosition     #715827882
          HierarchyParent     #GeneralBody
          Caption             #@SYS94379
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Tabs                #5
          Style               #VerticalTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #AdditionalSubFolders
          AutoDeclaration     #Yes
          ElementPosition     #1380525201
          HierarchyParent     #Tab
          Caption             #@SYS94390
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #GeneralTab
          ElementPosition     #613566756
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Models
          AutoDeclaration     #Yes
          ElementPosition     #1636178016
          HierarchyParent     #Tab
          Caption             #@SYS116817
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Plugin_SysVersionControlSourceDepot
          AutoDeclaration     #Yes
          ElementPosition     #1891830831
          HierarchyParent     #Tab
          Caption             #@SYS85682
        ENDPROPERTIES
        
        METHODS
          SOURCE #generatePluginXML
            #protected void generatePluginXML(XmlElement elem)
            #{
            #    XmlElement              nodeLevel1;
            #    str                     branchstr;
            #    int                     pos;
            #
            #    nodeLevel1 = elem.appendChild(elem.ownerDocument().createElement(#XMLBranch));
            #    branchstr = branch.text();
            #    branchstr = strRTrim(branchstr);
            #    branchstr = strLTrim(branchstr);
            #    if(branch)
            #    {
            #        pos = strScan(branchstr, sysVersionControlParameters.RepositoryFolder, 1, strLen(branchstr));
            #        if(pos)
            #        {
            #            branchstr = subStr(branchstr,pos + strLen(sysVersionControlParameters.RepositoryFolder), strLen(branchstr));
            #        }
            #
            #        while(subStr(branchstr, 1, 1) == #FilePathDelimiter)
            #        {
            #            branchstr = subStr(branchstr, 2, strLen(branchstr));
            #        }
            #        while(subStr(branchstr, strLen(branchstr),-1) == #FilePathDelimiter)
            #        {
            #            branchstr = subStr(branchstr,1,strLen(branchstr)-1);
            #        }
            #    }
            #    nodeLevel1.setAttribute(#XMLValue, branchstr);
            #
            #    return;
            #}
          ENDSOURCE
          SOURCE #setPluginSettings
            #void setPluginSettings()
            #{
            #    SysVersionControlFilebasedBackEnd backend;
            #    SysVersionControlFileBasedBackEndSD fileBasedSD;
            #    SysVersionControlSystemFileBased fileBased = versioncontrol.parmSysVersionControlSystem() as SysVersionControlSystemFileBased;
            #
            #    if ( fileBased )
            #    {
            #        backend = fileBased.parmBackend();
            #        fileBasedSD = backend as SysVersionControlFileBasedBackEndSD;
            #        if (fileBasedSD)
            #        {
            #            branch.text(fileBasedSD.parmBranch());
            #        }
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #UnwantedObjectNamesTab
          ElementPosition     #869219571
          HierarchyParent     #Tab
          Caption             #@SYS343255
          FastTabExpanded     #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #UnwantedObjectTypesTab
          ElementPosition     #1124872386
          HierarchyParent     #Tab
          Caption             #@SYS343256
          FastTabExpanded     #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #RunTitleCaseUpdate
          AutoDeclaration     #Yes
          ElementPosition     #1073741820
          HierarchyParent     #BestPractices
          Label               #@SYS94384
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #BestPracticeErrors
          AutoDeclaration     #Yes
          HelpText            #@SYS94432
          ElementPosition     #1610612730
          HierarchyParent     #BestPractices
          Label               #@SYS94386
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CompilerErrors
          AutoDeclaration     #Yes
          HelpText            #@SYS94430
          ElementPosition     #805306365
          HierarchyParent     #BestPractices
          Label               #@SYS94383
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CompilerToDos
          AutoDeclaration     #Yes
          HelpText            #@SYS94431
          ElementPosition     #1342177275
          HierarchyParent     #BestPractices
          Label               #@SYS94385
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CompilerWarnings
          AutoDeclaration     #Yes
          HelpText            #@SYS94429
          ElementPosition     #536870910
          HierarchyParent     #BestPractices
          Label               #@SYS94382
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #UnwantedTypes_ObjectType
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypes
          Label               #@SYS81228
          DataSource          #SysVersionControlTmpUnwantedTypes
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #AdditionalFoldersRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalFoldersButtonGroup
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #AddtionalFoldersAddButton
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalFoldersButtonGroup
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          DefaultButton       #Yes
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #ModelsAddButton
          ElementPosition     #1073741822
          HierarchyParent     #ModelsButtonGrp
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #ModelsRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #ModelsButtonGrp
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectNamesAddButton
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectNamesButtonGrp
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectNamesRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectNamesButtonGrp
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectTypesAddButton
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectTypesButtonGrp
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectTypesRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectTypesButtonGrp
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #LabelIntervalMax
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #UseLabelInterval
          ExtendedDataType    
            ARRAY 
              #LabelIntervalTo
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #LabelIntervalMin
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #UseLabelInterval
          ExtendedDataType    
            ARRAY 
              #LabelIntervalFrom
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #AdditionalFoldersTitleText
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalSubfoldersListTitle
          Text                #@SYS343259
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #ExcludeObjectNamesTitleText
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesListTitle
          Text                #@SYS343255
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #ExcludeObjectTypesTitleText
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesListTitle
          Text                #@SYS343256
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #GeneralTitleText
          ElementPosition     #1431655764
          HierarchyParent     #GeneralListTitle
          Text                #@SYS343257
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #ModelTitleText
          ElementPosition     #1431655764
          HierarchyParent     #ModelsListTitle
          Text                #@SYS343258
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #SourceDepotTitleText
          ElementPosition     #1431655764
          HierarchyParent     #SourceDepotTitle
          Text                #@SYS343260
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #AdditionalFolders_Description
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalFolders
          DisplayLength       #25
          DataSource          #SysVersionControlTmpAdditionalFolders
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #AdditionalFolders_Folder
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalFolders
          DisplayLength       #20
          DataSource          #SysVersionControlTmpAdditionalFolders
          DataField           #Folder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Branch
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #SourceDepot
          DisplayLength       #60
          ExtendedDataType    
            ARRAY 
              #SysVersionControlBranch
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LabelFile
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Labels
          LookupButton        #Always
          ExtendedDataType    
            ARRAY 
              #LabelModuleId
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    SysLabelEdit::moduleIdLookup(this);
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (ret)
            #    {
            #        if (this.text() && !SysLabelEdit::validateModuleId(this.text()))
            #        {
            #            this.text(SysLabel::defaultModuleId());
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelFolders_AldLocation
          ElementPosition     #1717986916
          HierarchyParent     #AddModels
          DisplayLength       #20
          DataSource          #SysVersionControlTmpModelFolders
          DataField           #AldLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelFolders_Description
          Width               #Column width
          HelpText            #@SYS342658
          ElementPosition     #1288490187
          HierarchyParent     #AddModels
          DisplayLength       #25
          DataSource          #SysVersionControlTmpModelFolders
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelFolders_Folder
          HelpText            #@SYS342657
          ElementPosition     #858993458
          HierarchyParent     #AddModels
          DisplayLength       #20
          DataSource          #SysVersionControlTmpModelFolders
          DataField           #Folder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ProjectName
          AutoDeclaration     #Yes
          HelpText            #@SYS120748
          ElementPosition     #1431655764
          HierarchyParent     #VCSSettings
          Label               #@SYS120747
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TestProject
          AutoDeclaration     #Yes
          ElementPosition     #1879048185
          HierarchyParent     #BestPractices
          ExtendedDataType    
            ARRAY 
              #SysVersionControlTestProject
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #UnwantedNames_Name
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesObjectNames
          Label               #@SYS31438
          DataSource          #SysVersionControlTmpUnwantedNames
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlParametersDev
  PROPERTIES
    Name                #SysVersionControlParametersDev
    Origin              #{0B1E0000-0000-1000-136B-810ACED8B466}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    #SysVersionControl
      #
      #    FilenameFilter fileNameLookupFilter;
      #    str fileNameLookupName;
      #    str fileNameLookupTitle;
      #    str filePathLookupTitle;
      #}
    ENDSOURCE
    SOURCE #activatePluginTab
      #void activatePluginTab(SysVersionControlType type)
      #{
      #    FormControl tabpage;
      #    SysDictEnum typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
      #    Object      obj;
      #    int i;
      #    ;
      #
      #    fileNameLookupFilter = ['',''];
      #    fileNameLookupName = '';
      #    fileNameLookupTitle = '';
      #    filePathLookupTitle = '';
      #
      #    for(i=1; i<=tab.controlCount(); i++)
      #    {
      #        tabpage = tab.controlNum(i);
      #        if(match('<Plugin',tabpage.name()))
      #        {
      #            if(tabpage.name()=='Plugin_'+typeEnum.value2Symbol(type))
      #            {
      #                tabpage.visible(true);
      #                if( TreeNode::findNode('\\forms\\'+this.name()+'\\Designs\\Design\\[Tab:Tab]\\[TabPage:'+tabpage.name()+']\\methods\\setPluginSettings'))
      #                {
      #                    obj = tabpage;
      #                    obj.setPluginSettings();
      #                }
      #            }
      #            else
      #                tabpage.visible(false);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    sysVersionControlParameters.write();
      #    versioncontrol.init(sysVersionControlParameters);
      #    super();
      #}
    ENDSOURCE
    SOURCE #filenameLookupFileName
      #str filenameLookupFileName()
      #{
      #    return fileNameLookupName;
      #}
    ENDSOURCE
    SOURCE #filenameLookupFilter
      #FilenameFilter filenameLookupFilter()
      #{
      #    return fileNameLookupFilter;
      #}
    ENDSOURCE
    SOURCE #filenameLookupInitialPath
      #str filenameLookupInitialPath()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupTitle
      #str filenameLookupTitle()
      #{
      #    return fileNameLookupTitle;
      #}
    ENDSOURCE
    SOURCE #filepathLookupTitle
      #str filepathLookupTitle()
      #{
      #    return filePathLookupTitle;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    super();
      #    SysVersionControlParameters::find();
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #    this.setupFirstTabpage();
      #    this.activatePluginTab(sysVersionControlParameters.vcsType);
      #}
    ENDSOURCE
    SOURCE #setupFirstTabpage
      #void setupFirstTabpage()
      #{
      #    //
      #    // Hide repository folder when running morphX VCS
      #    //
      #    if (sysVersionControlParameters.vcsType == SysVersionControlType::SysVersionControlMorphX)
      #    {
      #        settings_RepositoryFolder.visible(false);
      #    }
      #    else
      #    {
      #        settings_RepositoryFolder.visible(true);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlParameters
          Table               #SysVersionControlParameters
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD RepositoryFolder
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    FormStringControl folderControl = _formControl as FormStringControl;
                #    str repositoryFolder = WinAPI::browseForFolderDialog("@SYS85727", SysVersionControlParameters.RepositoryFolder);
                #
                #    if (repositoryFolder)
                #    {
                #        SysVersionControlParameters.RepositoryFolder = repositoryFolder;
                #        folderControl.text(repositoryFolder);
                #
                #    }
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #warnWhenReverting
          #//BP Deviation Documented
          #edit boolean warnWhenReverting(boolean set, boolean val)
          #{
          #    if(set)
          #    {
          #        if(val)
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags | #VCWarnWhenReverting;
          #        else
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags & ~#VCWarnWhenReverting;
          #    }
          #    else
          #        val = sysVersionControlParameters.uiFlags & #VCWarnWhenReverting > 0;
          #    return val;
          #}
        ENDSOURCE
        SOURCE #aotColoring
          #//BP Deviation Documented
          #edit boolean aotColoring(boolean set, boolean val)
          #{
          #    if(set)
          #    {
          #        if(val)
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags | #VCAOTColoring;
          #        else
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags & ~#VCAOTColoring;
          #    }
          #    else
          #        val = sysVersionControlParameters.uiFlags & #VCAOTColoring > 0;
          #    return val;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #800
      Height              #450
      Caption             #@SYS85914
      TitleDatasource     #SysVersionControlParameters
      WindowType          #Workspace
      HideToolbar         #Yes
      SetCompany          #No
      Style               #TableOfContents
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #Buttons
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Buttons
          Top                 #Bottom edge
          VerticalSpacing     #0
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EnvironmentSettings
          ElementPosition     #1610612733
          HierarchyParent     #GeneralListBody
          Caption             #@SYS94387
          DataSource          #SysVersionControlParameters
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListBody
          ElementPosition     #1610612733
          HierarchyParent     #General
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListTitle
          ElementPosition     #1073741822
          HierarchyParent     #General
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Settings
          ElementPosition     #1073741822
          HierarchyParent     #GeneralListBody
          DataSource          #SysVersionControlParameters
          DataGroup           #DevSettings
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Tfs
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #TFSListBody
          DataSource          #SysVersionControlParameters
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TFSListBody
          ElementPosition     #1610612733
          HierarchyParent     #Plugin_SysVersionControlTfs
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TFSListTitle
          ElementPosition     #1073741822
          HierarchyParent     #Plugin_SysVersionControlTfs
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VSS
          ElementPosition     #1431655764
          HierarchyParent     #VSSListBody
          DataSource          #SysVersionControlParameters
          DataGroup           #VSS
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VSSListBody
          ElementPosition     #1610612733
          HierarchyParent     #Plugin_SysVersionControlSourceSafe
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VSSListTitle
          ElementPosition     #1073741822
          HierarchyParent     #Plugin_SysVersionControlSourceSafe
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Style               #VerticalTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #General
          ElementPosition     #858993458
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Plugin_SysVersionControlSourceSafe
          ElementPosition     #1288490187
          HierarchyParent     #Tab
          Caption             #@SYS94374
        ENDPROPERTIES
        
        METHODS
          SOURCE #setPluginSettings
            #void setPluginSettings()
            #{
            #    #file
            #
            #    fileNameLookupFilter = ["@SYS98810",#AllFilesName+'.ini'];
            #    fileNameLookupName = 'srcsafe.ini';
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Plugin_SysVersionControlTfs
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #Tab
          Caption             #@SYS117839
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #AOTColoring
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #EnvironmentSettings
          Label               #@SYS94388
          DataSource          #SysVersionControlParameters
          DataMethod          #AOTColoring
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #WarnWhenReverting
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #EnvironmentSettings
          Label               #@SYS94389
          DataSource          #SysVersionControlParameters
          DataMethod          #WarnWhenReverting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #DevSettings_VCSType
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Settings
          DataSource          #SysVersionControlParameters
          DataField           #VCSType
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    element.setupFirstTabpage();
            #    element.activatePluginTab(sysVersionControlParameters.vcsType);
            #
            #    element.redraw();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          SaveRecord          #No
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #GeneralTitleText
          ElementPosition     #1431655764
          HierarchyParent     #GeneralListTitle
          Text                #@SYS343175
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TFSTitleText
          ElementPosition     #1431655764
          HierarchyParent     #TFSListTitle
          Text                #@SYS343177
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #VSSTitleText
          ElementPosition     #1431655764
          HierarchyParent     #VSSListTitle
          Text                #@SYS343176
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Settings_RepositoryFolder
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #Settings
          DataSource          #SysVersionControlParameters
          DataField           #RepositoryFolder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_AppRoot
          ElementPosition     #1789569705
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #AppRoot
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_TfsBranch
          ElementPosition     #1431655764
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsBranch
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_TfsProject
          ElementPosition     #1073741823
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsProject
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_TfsServer
          ElementPosition     #715827882
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsServer
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    // next & prev, enabling the SysURLLookup to get the value from control.valueStr()
            #    // even though the record is not saved or if the value has been changed and not committed.
            #    element.nextField();
            #    element.prevField();
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlPendingChangeList
  PROPERTIES
    Name                #SysVersionControlPendingChangeList
    Origin              #{0B220000-0000-1000-9EF8-44F9206B7713}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControlPendingChangeList pendingChangeList;
      #}
    ENDSOURCE
    SOURCE #closeSelect
      #public void closeSelect(str _selectString)
      #{
      #    super((sysVersionControlPendingChangeList.Id=="@SYS99936" ? '' : sysVersionControlPendingChangeList.Id));
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem svc = versioncontrol.parmSysVersionControlSystem();
      #    Object obj;
      #    SysVersionControlChangeLists svcchl;
      #
      #    if (SysVersionControlParameters::find().vcsEnabled == EnableDisable::Disable)
      #    {
      #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
      #    }
      #
      #    super();
      #
      #    if(svc && svc.supportPendingChangeLists())
      #    {
      #        obj = svc;
      #        svcchl = obj;
      #        pendingChangeList = svcchl.getChangeLists();
      #        pendingChangeList.clear();
      #        pendingChangeList.Id = "@SYS99936";
      #        pendingChangeList.Description = "@SYS99935";
      #        pendingChangeList.insert();
      #
      #        // BP deviation documented
      #        sysVersionControlPendingChangeList.setTmp();
      #        sysVersionControlPendingChangeList.checkRecord(false);
      #        sysVersionControlPendingChangeList.setTmpData(pendingChangeList);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlPendingChangeList
          Table               #SysVersionControlPendingChangeList
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tablenum(SysVersionControlPendingChangeList)).addSortField(fieldnum(SysVersionControlPendingChangeList, Id),SortOrder::Ascending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Frame               #Border
      SetCompany          #No
      DataSource          #SysVersionControlPendingChangeList
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AllowEdit           #No
          ElementPosition     #1073741823
          DataSource          #SysVersionControlPendingChangeList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysVersionControlPendingChangeList_Description
          ElementPosition     #1610612733
          HierarchyParent     #Grid
          DataSource          #SysVersionControlPendingChangeList
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysVersionControlPendingChangeList_Id
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          DataSource          #SysVersionControlPendingChangeList
          DataField           #Id
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlSynchronizeLog
  PROPERTIES
    Name                #SysVersionControlSynchronizeLog
    Origin              #{D188A4E0-7CAF-436C-8087-0B0F43BA61E6}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    if (versioncontrol &&
      #        versioncontrol.parmSysVersionControlSystem() &&
      #        !versioncontrol.parmSysVersionControlSystem().supportSynchronization())
      #    {
      #        throw error("@SYS112528");
      #    }
      #
      #    super();
      #
      #    aotImage.imageList(new ImageListAppl_Aot().imageList());
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlSynchronizeLog
          Table               #SysVersionControlSynchronizeLog
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS85719
      TitleDatasource     #SysVersionControlSynchronizeLog
      WindowType          #Workspace
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1879048190
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #OverviewTab
          DataSource          #SysVersionControlSynchronizeLog
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridGrp
          ElementPosition     #1610612734
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlSynchronizeLog
          DataGroup           #GridGrp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #OverviewTab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CleanAll
          HelpText            #@SYS4000765
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          Text                #@SYS4000766
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysVersionControlSynchronizeLog syncLog;
            #    delete_from syncLog;
            #
            #    sysVersionControlSynchronizeLog_ds.executeQuery();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Clear
          HelpText            #@SYS85926
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Text                #@SYS3398
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysVersionControlSynchronizeLog syncLog;
            #    delete_from syncLog
            #        where syncLog.Processed == true;
            #
            #    sysVersionControlSynchronizeLog_ds.executeQuery();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Process
          HelpText            #@SYS85925
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          Text                #@SYS106503
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    SysVersionControlSynchronizeLog::processBatchNum(sysVersionControlSynchronizeLog.BatchNum);
            #    sysVersionControlSynchronizeLog_ds.executeQuery();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #UpdateNotSynced
          HelpText            #Separate unprocessed AOT group
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroup
          Text                #Group unprocessed
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #/// <summary>
            #///     Separates uncompleted items by AOT group
            #/// </summary>
            #/// <author>
            #///     Kevin Kabatra
            #/// </author>
            #void clicked()
            #{
            #    ;
            #    SysVersionControlSynchronizeLog::updateNotSynced();
            #    sysVersionControlSynchronizeLog_ds.executeQuery() ;
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #AOTImage
          AutoDeclaration     #Yes
          Width               #16
          Height              #16
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          ShowLabel           #No
          DataSource          #SysVersionControlSynchronizeLog
          DataField           #ImageRes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: PRN

; Microsoft Dynamics AX Project : VersionControl unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #VersionControl
  PRIVATE
  PROPERTIES
    Name                #VersionControl
    Origin              #{E1548CBF-2721-48D6-99E8-AF806E09DCF9}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Data Dictionary
      PROPERTIES
        Name                #Data Dictionary
        ProjectGroupType    #DataDictionary
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Tables
        PROPERTIES
          Name                #Tables
          ProjectGroupType    #Tables
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 2541
          NODETYPE 204
          NAME #SysVersionControlMorphXItemTable
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 2542
          NODETYPE 204
          NAME #SysVersionControlMorphXLockTable
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 2543
          NODETYPE 204
          NAME #SysVersionControlMorphXRevisionTable
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1981
          NODETYPE 204
          NAME #SysVersionControlParameters
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1761
          NODETYPE 204
          NAME #SysVersionControlPendingChangeList
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1982
          NODETYPE 204
          NAME #SysVersionControlSynchronizeLog
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 2217
          NODETYPE 204
          NAME #SysVersionControlTmpAdditionalFolders
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1983
          NODETYPE 204
          NAME #SysVersionControlTmpChange
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1984
          NODETYPE 204
          NAME #SysVersionControlTmpItem
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 272
          NODETYPE 204
          NAME #SysVersionControlTmpUnwantedNames
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 274
          NODETYPE 204
          NAME #SysVersionControlTmpUnwantedTypes
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 102152
          NODETYPE 204
          NAME #SysVersionControlTmpWorkItems
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1028542
        NODETYPE 329
        NAME #SysVersionControlSynchronizeLogHelper
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 841
        NODETYPE 329
        NAME #SysVersionControlAddIn
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020319
        NODETYPE 329
        NAME #SysVersionControlBackendDirSupport
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 843
        NODETYPE 329
        NAME #SysVersionControlChangeLists
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 12669
        NODETYPE 329
        NAME #SysVersionControlCreateProject
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 846
        NODETYPE 329
        NAME #SysVersionControlCreateRepository
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1677
        NODETYPE 329
        NAME #SysVersionControlDefFile
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1002
        NODETYPE 329
        NAME #SysVersionControlFile
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 13853
        NODETYPE 329
        NAME #SysVersionControlFilebasedBackEnd
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 18386
        NODETYPE 329
        NAME #SysVersionControlFileBasedBackEndSD
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 14497
        NODETYPE 329
        NAME #SysVersionControlFilebasedBackEndTfs
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020320
        NODETYPE 329
        NAME #SysVersionControlFileBasedBackEndVSS
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 856
        NODETYPE 329
        NAME #SysVersionControlInfo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 857
        NODETYPE 329
        NAME #SysVersionControllable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020321
        NODETYPE 329
        NAME #SysVersionControllableBase
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020322
        NODETYPE 329
        NAME #SysVersionControlModelFile
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 14977
        NODETYPE 329
        NAME #SysVersionControlMorphXClaimLock
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 2959
        NODETYPE 329
        NAME #SysVersionControlReviews
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6024
        NODETYPE 329
        NAME #SysVersionControlSettings
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 859
        NODETYPE 329
        NAME #SysVersionControlSynchronization
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020323
        NODETYPE 329
        NAME #SysVersionControlSyncParameters
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 860
        NODETYPE 329
        NAME #SysVersionControlSystem
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 13633
        NODETYPE 329
        NAME #SysVersionControlSystemFileBased
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 14433
        NODETYPE 329
        NAME #SysVersionControlSystemMorphX
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020324
        NODETYPE 329
        NAME #SysVersionControlUserInterfaceMorphX
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020325
        NODETYPE 329
        NAME #SysVersionControlUserInterfaceProvider
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020326
        NODETYPE 329
        NAME #SysVersionControlUserInterfaceSilent
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020327
        NODETYPE 329
        NAME #SysVersionControlUserInterfaceVS
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020328
        NODETYPE 329
        NAME #SysVersionControlWorkItemProvider
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1020329
        NODETYPE 329
        NAME #SysVersionControlWorkItemProviderTFS
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlChangeContents
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlChangesHistory
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlCheckedOut
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlCheckIn
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlItemHistory
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlNotification
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlParametersAdm
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlParametersDev
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlPendingChangeList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlSynchronizeLog
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
